This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.cursorrules
.editorconfig
.env.example
.gitattributes
.github/workflows/main.yml
.gitignore
app/Console/Commands/DownloadAllDomains.php
app/Console/Commands/DownloadDynadotDomains.php
app/Console/Commands/DownloadGodaddyDomains.php
app/Console/Commands/DownloadNamecheapDomains.php
app/Console/Commands/DownloadNamecomDomains.php
app/Console/Commands/DownloadPorkbunDomains.php
app/Console/Commands/DownloadSavDomains.php
app/Console/Commands/DownloadSpaceshipDomains.php
app/Console/Kernel.php
app/Exceptions/Handler.php
app/Http/Controllers/Auth/ConfirmPasswordController.php
app/Http/Controllers/Auth/ForgotPasswordController.php
app/Http/Controllers/Auth/LoginController.php
app/Http/Controllers/Auth/RegisterController.php
app/Http/Controllers/Auth/ResetPasswordController.php
app/Http/Controllers/Auth/VerificationController.php
app/Http/Controllers/Controller.php
app/Http/Controllers/DomainController.php
app/Http/Controllers/GetQuoteController.php
app/Http/Controllers/HomeController.php
app/Http/Controllers/UploadController.php
app/Http/Controllers/UserController.php
app/Http/Kernel.php
app/Http/Middleware/AdminMiddleware.php
app/Http/Middleware/Authenticate.php
app/Http/Middleware/EncryptCookies.php
app/Http/Middleware/PreventRequestsDuringMaintenance.php
app/Http/Middleware/RedirectIfAuthenticated.php
app/Http/Middleware/TrimStrings.php
app/Http/Middleware/TrustHosts.php
app/Http/Middleware/TrustProxies.php
app/Http/Middleware/ValidateSignature.php
app/Http/Middleware/VerifyCsrfToken.php
app/Models/Domain.php
app/Models/DomainResult.php
app/Models/User.php
app/Providers/AppServiceProvider.php
app/Providers/AuthServiceProvider.php
app/Providers/BroadcastServiceProvider.php
app/Providers/DomainServiceProvider.php
app/Providers/EventServiceProvider.php
app/Providers/RouteServiceProvider.php
app/Services/DomainService.php
app/Services/PricingService.php
app/Services/WhoisService.php
artisan
bootstrap/app.php
bootstrap/cache/.gitignore
config/app.php
config/auth.php
config/broadcasting.php
config/cache.php
config/cors.php
config/database.php
config/filesystems.php
config/hashing.php
config/logging.php
config/mail.php
config/queue.php
config/sanctum.php
config/services.php
config/session.php
config/view.php
database/.gitignore
database/factories/UserFactory.php
database/migrations/2014_10_12_000000_create_users_table.php
database/migrations/2014_10_12_100000_create_password_reset_tokens_table.php
database/migrations/2014_10_12_100000_create_password_resets_table.php
database/migrations/2019_08_19_000000_create_failed_jobs_table.php
database/migrations/2019_12_14_000001_create_personal_access_tokens_table.php
database/migrations/2024_03_14_000001_add_fields_to_users_table.php
database/migrations/2024_09_23_170935_create_domains_table.php
database/migrations/2024_09_25_105547_add_status_to_domains_table.php
database/migrations/2024_10_17_172455_create_domain_results_table.php
database/migrations/2024_10_17_185039_recreate_domain_results_table.php
database/migrations/2024_10_18_000000_add_user_id_to_domain_results_table.php
database/migrations/2025_03_11_212759_create_quote_payment_records_table.php
database/seeders/AdminUserSeeder.php
database/seeders/DatabaseSeeder.php
docs/Crypto payments check API.postman_collection.json
docs/description.md
docs/tasks.md
package.json
phpunit.xml
public/.htaccess
public/index.php
public/robots.txt
public/site.webmanifest
README.md
resources/js/app.js
resources/js/bootstrap.js
resources/sass/_variables.scss
resources/sass/app.scss
resources/views/auth/login.blade.php
resources/views/auth/passwords/confirm.blade.php
resources/views/auth/passwords/email.blade.php
resources/views/auth/passwords/reset.blade.php
resources/views/auth/register.blade.php
resources/views/auth/verify.blade.php
resources/views/dashboard/user.blade.php
resources/views/domains/index.blade.php
resources/views/domains/public.blade.php
resources/views/getquote.blade.php
resources/views/home.blade.php
resources/views/layouts/app.blade.php
resources/views/partials/navbar.blade.php
resources/views/upload.blade.php
resources/views/welcome.blade.php
routes/api.php
routes/channels.php
routes/console.php
routes/web.php
storage/app/.gitignore
storage/app/public/.gitignore
storage/framework/.gitignore
storage/framework/cache/.gitignore
storage/framework/cache/data/.gitignore
storage/framework/sessions/.gitignore
storage/framework/testing/.gitignore
storage/framework/views/.gitignore
storage/logs/.gitignore
tests/CreatesApplication.php
tests/Feature/ExampleTest.php
tests/PricingServiceTest.php
tests/TestCase.php
tests/Unit/ExampleTest.php
vite.config.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".editorconfig">
root = true

[*]
charset = utf-8
end_of_line = lf
indent_size = 4
indent_style = space
insert_final_newline = true
trim_trailing_whitespace = true

[*.md]
trim_trailing_whitespace = false

[*.{yml,yaml}]
indent_size = 2

[docker-compose.yml]
indent_size = 4
</file>

<file path=".gitattributes">
* text=auto eol=lf

*.blade.php diff=html
*.css diff=css
*.html diff=html
*.md diff=markdown
*.php diff=php

/.github export-ignore
CHANGELOG.md export-ignore
.styleci.yml export-ignore
</file>

<file path="app/Console/Commands/DownloadDynadotDomains.php">
<?php

namespace App\Console\Commands;

use App\Models\Domain;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class DownloadDynadotDomains extends Command
{
    protected $signature = 'domains:download-dynadot';
    protected $description = 'Download domains from Dynadot API';

    public function handle()
    {
        // Start logging the process
        Log::info('Starting Dynadot domains download');
        
        $apiKey = config('services.dynadot.api_key');
        
        if (!$apiKey) {
            Log::error('Dynadot API key not found');
            $this->error('Dynadot API key not found. Please check your .env file.');
            return 1;
        }

        $this->info('Downloading domains from Dynadot...');

        try {
            $response = Http::withoutVerifying()
                ->get('https://api.dynadot.com/api3.json', [
                    'key' => $apiKey,
                    'command' => 'list_domain',
                ]);

            if (!$response->successful()) {
                Log::error('Failed to fetch domains from Dynadot API', [
                    'status' => $response->status(),
                    'body' => $response->body()
                ]);
                $this->error('Failed to fetch domains from Dynadot API');
                return 1;
            }

            $data = $response->json();
            
            // Initialize counters
            $totalDomains = 0;
            $newDomains = 0;
            $skippedDomains = 0;

            // Check if we have domains in the response
            if (!isset($data['ListDomainInfoResponse']['MainDomains'])) {
                Log::warning('No domains found in API response');
                $this->warn('No domains found in API response');
                return 1;
            }

            $domains = $data['ListDomainInfoResponse']['MainDomains'];
            $totalDomains = count($domains);
            
            $this->info("Processing {$totalDomains} domains...");
            
            // Process each domain
            foreach ($domains as $domainData) {
                // Convert milliseconds timestamp to Unix timestamp
                $expTimestamp = floor($domainData['Expiration'] / 1000);
                
                $domainName = $domainData['Name'];
                
                // Skip if domain already exists
                if (Domain::where('domain', $domainName)->exists()) {
                    $skippedDomains++;
                    continue;
                }

                // Create new domain
                Domain::create([
                    'domain' => $domainName,
                    'exp_date' => $expTimestamp,
                    'registrar' => 'dynadot'
                ]);
                
                $newDomains++;
                Log::info("Added new domain: {$domainName}");
            }

            // Log final statistics
            $message = "Process completed. " .
                      "Total domains: {$totalDomains}, " .
                      "New: {$newDomains}, " .
                      "Skipped: {$skippedDomains}";
            
            Log::info($message);
            $this->info($message);
            
        } catch (\Exception $e) {
            Log::error('Error processing Dynadot domains: ' . $e->getMessage());
            $this->error('Error: ' . $e->getMessage());
            return 1;
        }
    }
}
</file>

<file path="app/Console/Commands/DownloadGodaddyDomains.php">
<?php

namespace App\Console\Commands;

use App\Models\Domain;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class DownloadGodaddyDomains extends Command
{
    // Command signature and description for artisan
    protected $signature = 'domains:download-godaddy {--dry-run : Run without saving to database}';
    protected $description = 'Download domains from GoDaddy API';

    // Base URL for GoDaddy API
    protected $apiUrl = 'https://api.godaddy.com/v1';

    public function handle()
    {
        // Start logging the process with more debug info
        Log::info('Starting GoDaddy domains download', [
            'dry_run' => $this->option('dry-run'),
            'environment' => app()->environment()
        ]);
        
        // Get API credentials from .env with detailed logging
        $apiKey = config('services.godaddy.api_key');
        
        // Log masked API key for debugging
        Log::info('API Key Check', [
            'key_exists' => !empty($apiKey),
            'key_length' => strlen($apiKey),
            'key_last_4' => !empty($apiKey) ? '****' . substr($apiKey, -4) : 'EMPTY',
            'config_path' => 'services.godaddy.api_key'
        ]);
        
        // Enhanced API key validation
        if (empty($apiKey)) {
            Log::error('GoDaddy API key not found or empty');
            $this->error('GoDaddy API key not found. Please check your .env file.');
            return 1;
        }

        // Validate API key format (should contain : for key:secret format)
        if (!str_contains($apiKey, ':')) {
            Log::error('GoDaddy API key appears to be malformed - missing key:secret format');
            $this->error('GoDaddy API key should be in format "key:secret"');
            return 1;
        }

        $this->info('Downloading domains from GoDaddy...');

        try {
            // Initialize counters for statistics
            $totalDomains = 0;
            $newDomains = 0;
            $skippedDomains = 0;

            // Properly format the API key for GoDaddy
            // The format should be exactly: sso-key KEY:SECRET (no spaces in KEY:SECRET)
            $apiKeyTrimmed = trim($apiKey); // Remove any accidental whitespace
            
            // Log the API key format (safely)
            Log::info('API Key Format Check', [
                'contains_spaces' => str_contains($apiKeyTrimmed, ' '),
                'key_parts_count' => count(explode(':', $apiKeyTrimmed)),
                'total_length' => strlen($apiKeyTrimmed),
                'starts_with_spaces' => $apiKeyTrimmed !== $apiKey
            ]);

            // Make API request with proper header format
            $response = Http::withoutVerifying()
                ->withHeaders([
                    'Authorization' => 'sso-key ' . $apiKeyTrimmed, // Note the space after sso-key
                    'Accept' => 'application/json'
                ])
                ->get("{$this->apiUrl}/domains", [
                    'statuses' => 'ACTIVE',
                    'limit' => 1000
                ]);

            // Log the request details (safely)
            Log::info('API Request Details', [
                'url' => "{$this->apiUrl}/domains",
                'auth_header_format' => 'sso-key ****' . substr($apiKeyTrimmed, -4),
                'params' => ['statuses' => 'ACTIVE', 'limit' => 1000]
            ]);

            if (!$response->successful()) {
                $errorDetails = [
                    'status' => $response->status(),
                    'body' => $response->body(),
                    'headers' => $response->headers()
                ];
                
                Log::error('Failed to fetch domains from GoDaddy API', $errorDetails);
                $this->error('Failed to fetch domains from GoDaddy API');
                $this->error('Status: ' . $response->status());
                $this->error('Response: ' . $response->body());
                $this->error('Headers: ' . json_encode($response->headers()));
                return 1;
            }

            // Add raw response logging
            $domains = $response->json();
            Log::info('Raw API Response (ACTIVE domains only):', ['response' => json_encode($domains, JSON_PRETTY_PRINT)]);
            $this->line('Raw API Response (ACTIVE domains only):');
            $this->line(json_encode($domains, JSON_PRETTY_PRINT));
            
            $totalDomains = count($domains);
            
            // Log the total number of active domains found
            $this->info("Processing {$totalDomains} active domains...");

            // Add sample domain structure logging
            if (!empty($domains)) {
                Log::info('Sample domain structure:', ['first_domain' => json_encode($domains[0], JSON_PRETTY_PRINT)]);
                $this->line('Sample domain structure:');
                $this->line(json_encode($domains[0], JSON_PRETTY_PRINT));
            }

            // Process each domain from the response
            foreach ($domains as $domainData) {
                $domainName = $domainData['domain'];
                
                // Skip if domain already exists in our database
                if (Domain::where('domain', $domainName)->exists()) {
                    $this->line("Skipping existing domain: {$domainName}");
                    $skippedDomains++;
                    continue;
                }

                // Convert expiry date to timestamp
                $expTimestamp = strtotime($domainData['expires']);
                
                // In dry-run mode, just show what would happen
                if ($this->option('dry-run')) {
                    $this->info("Would add domain: {$domainName}");
                    $this->line("  Expiry: " . date('Y-m-d', $expTimestamp));
                    $this->line("  Registrar: godaddy");
                    $newDomains++;
                    continue;
                }

                // Create new domain record if not in dry-run mode
                Domain::create([
                    'domain' => $domainName,
                    'exp_date' => $expTimestamp,
                    'registrar' => 'godaddy'
                ]);
                
                $newDomains++;
                Log::info("Added new domain: {$domainName}");
            }

            // Update final message to indicate dry run
            $message = ($this->option('dry-run') ? "[DRY RUN] " : "") .
                      "Process completed. " .
                      "Total domains: {$totalDomains}, " .
                      "New: {$newDomains}, " .
                      "Skipped: {$skippedDomains}";
            
            Log::info($message);
            $this->info($message);
            
        } catch (\Exception $e) {
            Log::error('Error processing GoDaddy domains: ' . $e->getMessage());
            $this->error('Error: ' . $e->getMessage());
            return 1;
        }
    }
}
</file>

<file path="app/Console/Commands/DownloadNamecheapDomains.php">
<?php

namespace App\Console\Commands;

use App\Models\Domain;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class DownloadNamecheapDomains extends Command
{
    // Hey, I'm the command that downloads domains from Namecheap! 
    protected $signature = 'domains:download-namecheap {--dry-run : Run without saving to database}';
    protected $description = 'Download domains from Namecheap API';

    // Base URL for Namecheap API - they use a different URL for production vs testing
    protected $apiUrl = 'https://api.namecheap.com/xml.response';

    public function handle()
    {
        // Start our journey! 🚀
        Log::info('Starting Namecheap domains download', [
            'dry_run' => $this->option('dry-run'),
            'environment' => app()->environment()
        ]);
        
        // Get our secret API key
        $apiKey = config('services.namecheap.api_key');
        
        // Log the API key info (but keep it secret! 🤫)
        Log::info('API Key Check', [
            'key_exists' => !empty($apiKey),
            'key_length' => strlen($apiKey),
            'key_last_4' => !empty($apiKey) ? '****' . substr($apiKey, -4) : 'EMPTY'
        ]);
        
        // Make sure we have an API key
        if (empty($apiKey)) {
            Log::error('Namecheap API key not found or empty');
            $this->error('Namecheap API key not found. Please check your .env file.');
            return 1;
        }

        $this->info('Downloading domains from Namecheap...');

        try {
            // Keep track of what we're doing
            $totalDomains = 0;
            $newDomains = 0;
            $skippedDomains = 0;

            // Namecheap needs these parameters for the API call
            $params = [
                'ApiUser' => config('services.namecheap.username', 'your_username'),
                'ApiKey' => $apiKey,
                'UserName' => config('services.namecheap.username', 'your_username'),
                'Command' => 'namecheap.domains.getList',
                'ClientIp' => config('services.namecheap.client_ip', '127.0.0.1'),
                'PageSize' => 100,  // Get 100 domains at a time
                'Page' => 1
            ];

            // Log what we're about to do
            Log::info('API Request Details', [
                'url' => $this->apiUrl,
                'params' => array_merge($params, ['ApiKey' => '****' . substr($apiKey, -4)])
            ]);

            // Make the API call - notice we're not verifying SSL (but be careful with this!)
            $response = Http::withoutVerifying()
                ->get($this->apiUrl, $params);

            if (!$response->successful()) {
                $errorDetails = [
                    'status' => $response->status(),
                    'body' => $response->body(),
                    'headers' => $response->headers()
                ];
                
                Log::error('Failed to fetch domains from Namecheap API', $errorDetails);
                $this->error('Failed to fetch domains from Namecheap API');
                return 1;
            }

            // Namecheap returns XML, so we need to convert it
            $xml = simplexml_load_string($response->body());
            $domains = $xml->CommandResponse->DomainGetListResult->Domain ?? [];

            // Log what we got back
            Log::info('Retrieved domains count:', ['count' => count($domains)]);
            
            foreach ($domains as $domain) {
                $domainName = (string)$domain['Name'];
                $totalDomains++;
                
                // Skip domains we already know about
                if (Domain::where('domain', $domainName)->exists()) {
                    $this->line("Skipping existing domain: {$domainName}");
                    $skippedDomains++;
                    continue;
                }

                // Convert expiry date to timestamp
                $expTimestamp = strtotime((string)$domain['Expires']);
                
                // If we're just practicing (dry run), don't actually save anything
                if ($this->option('dry-run')) {
                    $this->info("Would add domain: {$domainName}");
                    $this->line("  Expiry: " . date('Y-m-d', $expTimestamp));
                    $this->line("  Registrar: namecheap");
                    $newDomains++;
                    continue;
                }

                // Save the domain for real!
                Domain::create([
                    'domain' => $domainName,
                    'exp_date' => $expTimestamp,
                    'registrar' => 'namecheap'
                ]);
                
                $newDomains++;
                Log::info("Added new domain: {$domainName}");
            }

            // Tell everyone what we did
            $message = ($this->option('dry-run') ? "[DRY RUN] " : "") .
                      "Process completed. " .
                      "Total domains: {$totalDomains}, " .
                      "New: {$newDomains}, " .
                      "Skipped: {$skippedDomains}";
            
            Log::info($message);
            $this->info($message);
            
        } catch (\Exception $e) {
            Log::error('Error processing Namecheap domains: ' . $e->getMessage());
            $this->error('Error: ' . $e->getMessage());
            return 1;
        }
    }
}
</file>

<file path="app/Console/Commands/DownloadNamecomDomains.php">
<?php

namespace App\Console\Commands;

use App\Models\Domain;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class DownloadNamecomDomains extends Command
{
    // Command signature and description for artisan
    protected $signature = 'domains:download-namecom {--dry-run : Run without saving to database}';
    protected $description = 'Download domains from Name.com API';

    // Base URL for Name.com API
    protected $apiUrl = 'https://api.name.com/v4';

    public function handle()
    {
        // Start logging the process with debug info
        Log::info('Starting Name.com domains download', [
            'dry_run' => $this->option('dry-run'),
            'environment' => app()->environment()
        ]);
        
        // Get API credentials from .env
        $apiKey = config('services.namecom.api_key');
        
        // Log masked API key for debugging
        Log::info('API Key Check', [
            'key_exists' => !empty($apiKey),
            'key_length' => strlen($apiKey),
            'key_last_4' => !empty($apiKey) ? '****' . substr($apiKey, -4) : 'EMPTY',
            'config_path' => 'services.namecom.api_key'
        ]);
        
        // Enhanced API key validation
        if (empty($apiKey)) {
            Log::error('Name.com API key not found or empty');
            $this->error('Name.com API key not found. Please check your .env file.');
            return 1;
        }

        $this->info('Downloading domains from Name.com...');

        try {
            // Initialize counters for statistics
            $totalDomains = 0;
            $newDomains = 0;
            $skippedDomains = 0;
            
            // Make API request with Basic Auth and skip SSL verification
            $response = Http::withoutVerifying()
                ->withBasicAuth('joebravo2007@gmail.com', $apiKey)
                ->get("{$this->apiUrl}/domains", [
                    'page' => 1,
                    'perPage' => 1000
                ]);

            // Log the request details (safely)
            Log::info('API Request Details', [
                'url' => "{$this->apiUrl}/domains",
                'auth_type' => 'Basic Auth',
                'params' => ['page' => 1, 'perPage' => 1000]
            ]);

            if (!$response->successful()) {
                $errorDetails = [
                    'status' => $response->status(),
                    'body' => $response->body(),
                    'headers' => $response->headers()
                ];
                
                Log::error('Failed to fetch domains from Name.com API', $errorDetails);
                $this->error('Failed to fetch domains from Name.com API');
                $this->error('Status: ' . $response->status());
                $this->error('Response: ' . $response->body());
                return 1;
            }

            // Add raw response logging
            $responseData = $response->json();
            $domains = $responseData['domains'] ?? [];
            
            Log::info('Raw API Response:', ['response' => json_encode($domains, JSON_PRETTY_PRINT)]);
            $this->line('Raw API Response:');
            $this->line(json_encode($domains, JSON_PRETTY_PRINT));
            
            $totalDomains = count($domains);
            
            // Log the total number of domains found
            $this->info("Processing {$totalDomains} domains...");

            // Add sample domain structure logging
            if (!empty($domains)) {
                Log::info('Sample domain structure:', ['first_domain' => json_encode($domains[0], JSON_PRETTY_PRINT)]);
                $this->line('Sample domain structure:');
                $this->line(json_encode($domains[0], JSON_PRETTY_PRINT));
            }

            // Process each domain from the response
            foreach ($domains as $domainData) {
                $domainName = $domainData['domainName'];
                
                // Skip if domain already exists in our database
                if (Domain::where('domain', $domainName)->exists()) {
                    $this->line("Skipping existing domain: {$domainName}");
                    $skippedDomains++;
                    continue;
                }

                // Convert expiry date to timestamp
                $expTimestamp = strtotime($domainData['expireDate']);
                
                // In dry-run mode, just show what would happen
                if ($this->option('dry-run')) {
                    $this->info("Would add domain: {$domainName}");
                    $this->line("  Expiry: " . date('Y-m-d', $expTimestamp));
                    $this->line("  Registrar: namecom");
                    $newDomains++;
                    continue;
                }

                // Create new domain record if not in dry-run mode
                Domain::create([
                    'domain' => $domainName,
                    'exp_date' => $expTimestamp,
                    'registrar' => 'namecom'
                ]);
                
                $newDomains++;
                Log::info("Added new domain: {$domainName}");
            }

            // Update final message to indicate dry run
            $message = ($this->option('dry-run') ? "[DRY RUN] " : "") .
                      "Process completed. " .
                      "Total domains: {$totalDomains}, " .
                      "New: {$newDomains}, " .
                      "Skipped: {$skippedDomains}";
            
            Log::info($message);
            $this->info($message);
            
        } catch (\Exception $e) {
            Log::error('Error processing Name.com domains: ' . $e->getMessage());
            $this->error('Error: ' . $e->getMessage());
            return 1;
        }
    }
}
</file>

<file path="app/Console/Commands/DownloadPorkbunDomains.php">
<?php

namespace App\Console\Commands;

use App\Models\Domain;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class DownloadPorkbunDomains extends Command
{
    // Hey! I'm the command that downloads domains from Porkbun API
    protected $signature = 'domains:download-porkbun {--dry-run : Run without saving to database}';
    protected $description = 'Download domains from Porkbun API';

    // Porkbun API endpoint - they use HTTPS
    protected $apiUrl = 'https://api.porkbun.com/api/json/v3';

    public function handle()
    {
        // Let's start by logging what we're doing
        Log::info('Starting Porkbun domains download', [
            'dry_run' => $this->option('dry-run'),
            'environment' => app()->environment()
        ]);

        // Get our API credentials - we need both key and secret
        $apiKey = config('services.porkbun.api_key');
        $apiSecret = config('services.porkbun.api_secret');

        // Log that we have the credentials (but don't show them!)
        Log::info('API Credentials Check', [
            'key_exists' => !empty($apiKey),
            'key_length' => strlen($apiKey ?? ''),
            'secret_exists' => !empty($apiSecret),
            'secret_length' => strlen($apiSecret ?? ''),
        ]);

        // Make sure we have both credentials
        if (empty($apiKey) || empty($apiSecret)) {
            Log::error('Porkbun API credentials missing');
            $this->error('Porkbun API credentials not found. Please check your .env file for PORKBUN_API_KEY and PORKBUN_API_SECRET');
            return 1;
        }

        $this->info('Downloading domains from Porkbun...');

        try {
            // Keep track of what we're doing
            $totalDomains = 0;
            $newDomains = 0;
            $skippedDomains = 0;

            // Make the API request - note we're not verifying SSL
            $response = Http::withoutVerifying()
                ->post("{$this->apiUrl}/domain/listAll", [
                    'apikey' => $apiKey,
                    'secretapikey' => $apiSecret
                ]);

            // Log what we got back (safely)
            Log::info('API Request Details', [
                'url' => "{$this->apiUrl}/domain/listAll",
                'status' => $response->status(),
                'has_response' => !empty($response->json())
            ]);

            if (!$response->successful()) {
                $errorDetails = [
                    'status' => $response->status(),
                    'body' => $response->body(),
                    'headers' => $response->headers()
                ];
                
                Log::error('Failed to fetch domains from Porkbun API', $errorDetails);
                $this->error('Failed to fetch domains from Porkbun API');
                $this->error('Status: ' . $response->status());
                $this->error('Response: ' . $response->body());
                return 1;
            }

            $responseData = $response->json();
            
            // Porkbun specific response structure check
            if (!isset($responseData['status']) || $responseData['status'] !== 'SUCCESS') {
                Log::error('Porkbun API returned error', ['response' => $responseData]);
                $this->error('Porkbun API returned error: ' . ($responseData['message'] ?? 'Unknown error'));
                return 1;
            }

            $domains = $responseData['domains'] ?? [];
            $totalDomains = count($domains);

            // Show what we found
            $this->info("Processing {$totalDomains} domains...");

            // Log a sample domain if we have any
            if (!empty($domains)) {
                Log::info('Sample domain structure:', ['first_domain' => json_encode($domains[0], JSON_PRETTY_PRINT)]);
            }

            // Process each domain
            foreach ($domains as $domainData) {
                $domainName = $domainData['domain'];
                
                // Skip if we already have it
                if (Domain::where('domain', $domainName)->exists()) {
                    $this->line("Skipping existing domain: {$domainName}");
                    $skippedDomains++;
                    continue;
                }

                // Convert expiry date to timestamp
                $expTimestamp = strtotime($domainData['expireDate']);
                
                // In dry-run mode, just show what would happen
                if ($this->option('dry-run')) {
                    $this->info("Would add domain: {$domainName}");
                    $this->line("  Expiry: " . date('Y-m-d', $expTimestamp));
                    $this->line("  Registrar: porkbun");
                    $newDomains++;
                    continue;
                }

                // Actually add the domain to our database
                Domain::create([
                    'domain' => $domainName,
                    'exp_date' => $expTimestamp,
                    'registrar' => 'porkbun'
                ]);
                
                $newDomains++;
                Log::info("Added new domain: {$domainName}");
            }

            // Show the final results
            $message = ($this->option('dry-run') ? "[DRY RUN] " : "") .
                      "Process completed. " .
                      "Total domains: {$totalDomains}, " .
                      "New: {$newDomains}, " .
                      "Skipped: {$skippedDomains}";
            
            Log::info($message);
            $this->info($message);
            
        } catch (\Exception $e) {
            Log::error('Error processing Porkbun domains: ' . $e->getMessage());
            $this->error('Error: ' . $e->getMessage());
            return 1;
        }
    }
}
</file>

<file path="app/Console/Commands/DownloadSpaceshipDomains.php">
<?php

namespace App\Console\Commands;

use App\Models\Domain;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class DownloadSpaceshipDomains extends Command
{
    // Hey, I'm the command that downloads domains from Spaceship.com!
    protected $signature = 'domains:download-spaceship {--dry-run : Run without saving to database}';
    protected $description = 'Download domains from Spaceship.com API';

    // Base URL for Spaceship API - updated to match docs
    protected $apiUrl = 'https://spaceship.dev/api/v1';

    public function handle()
    {
        // Let's start by logging what we're doing
        Log::info('Starting Spaceship domains download', [
            'dry_run' => $this->option('dry-run'),
            'environment' => app()->environment()
        ]);

        // Get our API credentials - we need both key and secret
        $apiKey = config('services.spaceship.api_key');
        $apiSecret = config('services.spaceship.api_secret');

        // Log that we got the credentials (but don't show them!)
        Log::info('API Credentials Check', [
            'key_exists' => !empty($apiKey),
            'secret_exists' => !empty($apiSecret),
            'key_last_4' => !empty($apiKey) ? '****' . substr($apiKey, -4) : 'EMPTY',
            'secret_last_4' => !empty($apiSecret) ? '****' . substr($apiSecret, -4) : 'EMPTY'
        ]);

        // Make sure we have both credentials
        if (empty($apiKey) || empty($apiSecret)) {
            Log::error('Spaceship API credentials missing');
            $this->error('Spaceship API credentials not found. Please check SPACESHIP_API_KEY and SPACESHIP_API_SECRET in your .env file.');
            return 1;
        }

        $this->info('Downloading domains from Spaceship...');

        try {
            $totalDomains = 0;
            $newDomains = 0;
            $skippedDomains = 0;
            $page = 0;
            $hasMorePages = true;

            while ($hasMorePages) {
                Log::info('Fetching page', ['page' => $page]);

                $response = Http::withoutVerifying()
                    ->withHeaders([
                        'X-API-Key' => $apiKey,
                        'X-API-Secret' => $apiSecret,
                    ])
                    ->get("{$this->apiUrl}/domains", [
                        'take' => 100,
                        'skip' => $page * 100,
                        'orderBy' => ['name']
                    ]);

                // Log what we tried to do
                Log::info('API Request Details', [
                    'url' => "{$this->apiUrl}/domains",
                    'auth_type' => 'X-API headers',
                    'params' => [
                        'take' => 100,
                        'skip' => $page * 100,
                        'orderBy' => ['name']
                    ]
                ]);

                // If something went wrong, let's handle it
                if (!$response->successful()) {
                    $errorDetails = [
                        'status' => $response->status(),
                        'body' => $response->body(),
                        'headers' => $response->headers()
                    ];
                    
                    Log::error('Failed to fetch domains from Spaceship API', $errorDetails);
                    $this->error('Failed to fetch domains from Spaceship API');
                    $this->error('Status: ' . $response->status());
                    $this->error('Response: ' . $response->body());
                    return 1;
                }

                // Debug: Show complete API response
                $this->info('Complete API Response:');
                $this->line(json_encode($response->json(), JSON_PRETTY_PRINT));
                
                // Update to use 'items' instead of 'domains'
                $domains = $response->json()['items'] ?? [];
                $currentPageCount = count($domains);
                
                Log::info('Retrieved domains for page', [
                    'page' => $page,
                    'count' => $currentPageCount
                ]);

                foreach ($domains as $domainData) {
                    $domainName = $domainData['name'] ?? null;
                    
                    if (!$domainName) {
                        Log::warning('Domain name missing in response', ['data' => $domainData]);
                        continue;
                    }

                    // Skip existing domains
                    if (Domain::where('domain', $domainName)->exists()) {
                        $this->line("Skipping existing domain: {$domainName}");
                        $skippedDomains++;
                        continue;
                    }

                    // Convert expiry date to timestamp
                    $expTimestamp = strtotime($domainData['expirationDate'] ?? 'now');
                    $regTimestamp = strtotime($domainData['registrationDate'] ?? 'now');

                    // Log detailed domain info
                    Log::info('Processing domain', [
                        'name' => $domainName,
                        'isPremium' => $domainData['isPremium'] ?? false,
                        'autoRenew' => $domainData['autoRenew'] ?? false,
                        'lifecycle' => $domainData['lifecycleStatus'] ?? 'unknown',
                        'verification' => $domainData['verificationStatus'] ?? 'unknown',
                        'nameservers' => $domainData['nameservers']['hosts'] ?? []
                    ]);

                    if ($this->option('dry-run')) {
                        $this->info("Would add domain: {$domainName}");
                        $this->line("  Registration: " . date('Y-m-d', $regTimestamp));
                        $this->line("  Expiry: " . date('Y-m-d', $expTimestamp));
                        $this->line("  Registrar: spaceship");
                        $this->line("  Auto Renew: " . ($domainData['autoRenew'] ? 'Yes' : 'No'));
                        $newDomains++;
                        continue;
                    }

                    // Save with additional fields
                    Domain::create([
                        'domain' => $domainName,
                        'exp_date' => $expTimestamp,
                        'reg_date' => $regTimestamp,
                        'registrar' => 'spaceship',
                        'auto_renew' => $domainData['autoRenew'] ?? false,
                        'status' => $domainData['lifecycleStatus'] ?? 'registered',
                        'nameservers' => json_encode($domainData['nameservers']['hosts'] ?? [])
                    ]);
                    
                    $newDomains++;
                    Log::info("Added new domain: {$domainName}");
                }

                $totalDomains += $currentPageCount;
                
                // Check if we should continue pagination
                $hasMorePages = $currentPageCount >= 100;
                $page++;

                Log::info('Page processing complete', [
                    'current_page' => $page,
                    'has_more' => $hasMorePages,
                    'total_so_far' => $totalDomains
                ]);
            }

            // Tell everyone what we did
            $message = ($this->option('dry-run') ? "[DRY RUN] " : "") .
                      "Process completed. " .
                      "Total domains: {$totalDomains}, " .
                      "New: {$newDomains}, " .
                      "Skipped: {$skippedDomains}";
            
            Log::info($message);
            $this->info($message);
            
        } catch (\Exception $e) {
            Log::error('Error processing Spaceship domains: ' . $e->getMessage());
            $this->error('Error: ' . $e->getMessage());
            return 1;
        }
    }
}
</file>

<file path="app/Exceptions/Handler.php">
<?php

namespace App\Exceptions;

use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Throwable;

class Handler extends ExceptionHandler
{
    /**
     * The list of the inputs that are never flashed to the session on validation exceptions.
     *
     * @var array<int, string>
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     */
    public function register(): void
    {
        $this->reportable(function (Throwable $e) {
            //
        });
    }
}
</file>

<file path="app/Http/Controllers/Auth/ConfirmPasswordController.php">
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Foundation\Auth\ConfirmsPasswords;

class ConfirmPasswordController extends Controller
{
    /*
    |--------------------------------------------------------------------------
    | Confirm Password Controller
    |--------------------------------------------------------------------------
    |
    | This controller is responsible for handling password confirmations and
    | uses a simple trait to include the behavior. You're free to explore
    | this trait and override any functions that require customization.
    |
    */

    use ConfirmsPasswords;

    /**
     * Where to redirect users when the intended url fails.
     *
     * @var string
     */
    protected $redirectTo = '/home';

    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('auth');
    }
}
</file>

<file path="app/Http/Controllers/Auth/ForgotPasswordController.php">
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Foundation\Auth\SendsPasswordResetEmails;

class ForgotPasswordController extends Controller
{
    /*
    |--------------------------------------------------------------------------
    | Password Reset Controller
    |--------------------------------------------------------------------------
    |
    | This controller is responsible for handling password reset emails and
    | includes a trait which assists in sending these notifications from
    | your application to your users. Feel free to explore this trait.
    |
    */

    use SendsPasswordResetEmails;
}
</file>

<file path="app/Http/Controllers/Auth/LoginController.php">
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Foundation\Auth\AuthenticatesUsers;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class LoginController extends Controller
{
    /*
    |--------------------------------------------------------------------------
    | Login Controller
    |--------------------------------------------------------------------------
    |
    | This controller handles authenticating users for the application and
    | redirecting them to your home screen. The controller uses a trait
    | to conveniently provide its functionality to your applications.
    |
    */

    use AuthenticatesUsers;

    /**
     * Where to redirect users after login.
     *
     * @var string
     */
    protected $redirectTo = '/home';

    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('guest')->except('logout');
    }

    /**
     * Log the user out of the application.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\RedirectResponse
     */
    public function logout(Request $request)
    {
        Auth::logout();

        $request->session()->invalidate();

        $request->session()->regenerateToken();

        return redirect('/');
    }
}
</file>

<file path="app/Http/Controllers/Auth/RegisterController.php">
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Models\User;
use Illuminate\Foundation\Auth\RegistersUsers;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Validator;

class RegisterController extends Controller
{
    /*
    |--------------------------------------------------------------------------
    | Register Controller
    |--------------------------------------------------------------------------
    |
    | This controller handles the registration of new users as well as their
    | validation and creation. By default this controller uses a trait to
    | provide this functionality without requiring any additional code.
    |
    */

    use RegistersUsers;

    /**
     * Where to redirect users after registration.
     *
     * @var string
     */
    protected $redirectTo = '/home';

    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('guest');
    }

    /**
     * Get a validator for an incoming registration request.
     *
     * @param  array  $data
     * @return \Illuminate\Contracts\Validation\Validator
     */
    protected function validator(array $data)
    {
        return Validator::make($data, [
            'name' => ['required', 'string', 'max:255'],
            'email' => ['required', 'string', 'email', 'max:255', 'unique:users'],
            'password' => ['required', 'string', 'min:8', 'confirmed'],
        ]);
    }

    /**
     * Create a new user instance after a valid registration.
     *
     * @param  array  $data
     * @return \App\Models\User
     */
    protected function create(array $data)
    {
        return User::create([
            'name' => $data['name'],
            'email' => $data['email'],
            'password' => Hash::make($data['password']),
        ]);
    }
}
</file>

<file path="app/Http/Controllers/Auth/ResetPasswordController.php">
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Foundation\Auth\ResetsPasswords;

class ResetPasswordController extends Controller
{
    /*
    |--------------------------------------------------------------------------
    | Password Reset Controller
    |--------------------------------------------------------------------------
    |
    | This controller is responsible for handling password reset requests
    | and uses a simple trait to include this behavior. You're free to
    | explore this trait and override any methods you wish to tweak.
    |
    */

    use ResetsPasswords;

    /**
     * Where to redirect users after resetting their password.
     *
     * @var string
     */
    protected $redirectTo = '/home';
}
</file>

<file path="app/Http/Controllers/Auth/VerificationController.php">
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Foundation\Auth\VerifiesEmails;

class VerificationController extends Controller
{
    /*
    |--------------------------------------------------------------------------
    | Email Verification Controller
    |--------------------------------------------------------------------------
    |
    | This controller is responsible for handling email verification for any
    | user that recently registered with the application. Emails may also
    | be re-sent if the user didn't receive the original email message.
    |
    */

    use VerifiesEmails;

    /**
     * Where to redirect users after verification.
     *
     * @var string
     */
    protected $redirectTo = '/home';

    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('auth');
        $this->middleware('signed')->only('verify');
        $this->middleware('throttle:6,1')->only('verify', 'resend');
    }
}
</file>

<file path="app/Http/Controllers/Controller.php">
<?php

namespace App\Http\Controllers;

use Illuminate\Foundation\Auth\Access\AuthorizesRequests;
use Illuminate\Foundation\Validation\ValidatesRequests;
use Illuminate\Routing\Controller as BaseController;

class Controller extends BaseController
{
    use AuthorizesRequests, ValidatesRequests;
}
</file>

<file path="app/Http/Middleware/Authenticate.php">
<?php

namespace App\Http\Middleware;

use Illuminate\Auth\Middleware\Authenticate as Middleware;
use Illuminate\Http\Request;

class Authenticate extends Middleware
{
    /**
     * Get the path the user should be redirected to when they are not authenticated.
     */
    protected function redirectTo(Request $request): ?string
    {
        return $request->expectsJson() ? null : route('login');
    }
}
</file>

<file path="app/Http/Middleware/EncryptCookies.php">
<?php

namespace App\Http\Middleware;

use Illuminate\Cookie\Middleware\EncryptCookies as Middleware;

class EncryptCookies extends Middleware
{
    /**
     * The names of the cookies that should not be encrypted.
     *
     * @var array<int, string>
     */
    protected $except = [
        //
    ];
}
</file>

<file path="app/Http/Middleware/PreventRequestsDuringMaintenance.php">
<?php

namespace App\Http\Middleware;

use Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance as Middleware;

class PreventRequestsDuringMaintenance extends Middleware
{
    /**
     * The URIs that should be reachable while maintenance mode is enabled.
     *
     * @var array<int, string>
     */
    protected $except = [
        //
    ];
}
</file>

<file path="app/Http/Middleware/RedirectIfAuthenticated.php">
<?php

namespace App\Http\Middleware;

use App\Providers\RouteServiceProvider;
use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Symfony\Component\HttpFoundation\Response;

class RedirectIfAuthenticated
{
    /**
     * Handle an incoming request.
     *
     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
     */
    public function handle(Request $request, Closure $next, string ...$guards): Response
    {
        $guards = empty($guards) ? [null] : $guards;

        foreach ($guards as $guard) {
            if (Auth::guard($guard)->check()) {
                return redirect(RouteServiceProvider::HOME);
            }
        }

        return $next($request);
    }
}
</file>

<file path="app/Http/Middleware/TrimStrings.php">
<?php

namespace App\Http\Middleware;

use Illuminate\Foundation\Http\Middleware\TrimStrings as Middleware;

class TrimStrings extends Middleware
{
    /**
     * The names of the attributes that should not be trimmed.
     *
     * @var array<int, string>
     */
    protected $except = [
        'current_password',
        'password',
        'password_confirmation',
    ];
}
</file>

<file path="app/Http/Middleware/TrustHosts.php">
<?php

namespace App\Http\Middleware;

use Illuminate\Http\Middleware\TrustHosts as Middleware;

class TrustHosts extends Middleware
{
    /**
     * Get the host patterns that should be trusted.
     *
     * @return array<int, string|null>
     */
    public function hosts(): array
    {
        return [
            $this->allSubdomainsOfApplicationUrl(),
        ];
    }
}
</file>

<file path="app/Http/Middleware/TrustProxies.php">
<?php

namespace App\Http\Middleware;

use Illuminate\Http\Middleware\TrustProxies as Middleware;
use Symfony\Component\HttpFoundation\Request;

class TrustProxies extends Middleware
{
    /**
     * The trusted proxies for this application.
     *
     * @var array<int, string>|string|null
     */
    protected $proxies = '*';

    /**
     * The headers that should be used to detect proxies.
     *
     * @var int
     */
    protected $headers = Request::HEADER_X_FORWARDED_FOR | 
                         Request::HEADER_X_FORWARDED_HOST | 
                         Request::HEADER_X_FORWARDED_PORT | 
                         Request::HEADER_X_FORWARDED_PROTO;
}
</file>

<file path="app/Http/Middleware/ValidateSignature.php">
<?php

namespace App\Http\Middleware;

use Illuminate\Routing\Middleware\ValidateSignature as Middleware;

class ValidateSignature extends Middleware
{
    /**
     * The names of the query string parameters that should be ignored.
     *
     * @var array<int, string>
     */
    protected $except = [
        // 'fbclid',
        // 'utm_campaign',
        // 'utm_content',
        // 'utm_medium',
        // 'utm_source',
        // 'utm_term',
    ];
}
</file>

<file path="app/Http/Middleware/VerifyCsrfToken.php">
<?php

namespace App\Http\Middleware;

use Illuminate\Foundation\Http\Middleware\VerifyCsrfToken as Middleware;

class VerifyCsrfToken extends Middleware
{
    /**
     * The URIs that should be excluded from CSRF verification.
     *
     * @var array<int, string>
     */
    protected $except = [
        //
    ];
}
</file>

<file path="app/Models/Domain.php">
<?php

// app/Models/Domain.php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Domain extends Model
{
    protected $fillable = [
        'domain',
        'exp_date',
        'registrar',
    ];
}
</file>

<file path="app/Providers/AppServiceProvider.php">
<?php

namespace App\Providers;

use Illuminate\Support\ServiceProvider;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     */
    public function register(): void
    {
        //
    }

    /**
     * Bootstrap any application services.
     */
    public function boot(): void
    {
        //
    }
}
</file>

<file path="app/Providers/AuthServiceProvider.php">
<?php

namespace App\Providers;

// use Illuminate\Support\Facades\Gate;
use Illuminate\Foundation\Support\Providers\AuthServiceProvider as ServiceProvider;

class AuthServiceProvider extends ServiceProvider
{
    /**
     * The model to policy mappings for the application.
     *
     * @var array<class-string, class-string>
     */
    protected $policies = [
        //
    ];

    /**
     * Register any authentication / authorization services.
     */
    public function boot(): void
    {
        //
    }
}
</file>

<file path="app/Providers/BroadcastServiceProvider.php">
<?php

namespace App\Providers;

use Illuminate\Support\Facades\Broadcast;
use Illuminate\Support\ServiceProvider;

class BroadcastServiceProvider extends ServiceProvider
{
    /**
     * Bootstrap any application services.
     */
    public function boot(): void
    {
        Broadcast::routes();

        require base_path('routes/channels.php');
    }
}
</file>

<file path="app/Providers/EventServiceProvider.php">
<?php

namespace App\Providers;

use Illuminate\Auth\Events\Registered;
use Illuminate\Auth\Listeners\SendEmailVerificationNotification;
use Illuminate\Foundation\Support\Providers\EventServiceProvider as ServiceProvider;
use Illuminate\Support\Facades\Event;

class EventServiceProvider extends ServiceProvider
{
    /**
     * The event to listener mappings for the application.
     *
     * @var array<class-string, array<int, class-string>>
     */
    protected $listen = [
        Registered::class => [
            SendEmailVerificationNotification::class,
        ],
    ];

    /**
     * Register any events for your application.
     */
    public function boot(): void
    {
        //
    }

    /**
     * Determine if events and listeners should be automatically discovered.
     */
    public function shouldDiscoverEvents(): bool
    {
        return false;
    }
}
</file>

<file path="app/Providers/RouteServiceProvider.php">
<?php

namespace App\Providers;

use Illuminate\Cache\RateLimiting\Limit;
use Illuminate\Foundation\Support\Providers\RouteServiceProvider as ServiceProvider;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\RateLimiter;
use Illuminate\Support\Facades\Route;

class RouteServiceProvider extends ServiceProvider
{
    /**
     * The path to your application's "home" route.
     *
     * Typically, users are redirected here after authentication.
     *
     * @var string
     */
    public const HOME = '/home';

    /**
     * Define your route model bindings, pattern filters, and other route configuration.
     */
    public function boot(): void
    {
        RateLimiter::for('api', function (Request $request) {
            return Limit::perMinute(60)->by($request->user()?->id ?: $request->ip());
        });

        $this->routes(function () {
            Route::middleware('api')
                ->prefix('api')
                ->group(base_path('routes/api.php'));

            Route::middleware('web')
                ->group(base_path('routes/web.php'));
        });
    }
}
</file>

<file path="artisan">
#!/usr/bin/env php
<?php

define('LARAVEL_START', microtime(true));

/*
|--------------------------------------------------------------------------
| Register The Auto Loader
|--------------------------------------------------------------------------
|
| Composer provides a convenient, automatically generated class loader
| for our application. We just need to utilize it! We'll require it
| into the script here so that we do not have to worry about the
| loading of any of our classes manually. It's great to relax.
|
*/

require __DIR__.'/vendor/autoload.php';

$app = require_once __DIR__.'/bootstrap/app.php';

/*
|--------------------------------------------------------------------------
| Run The Artisan Application
|--------------------------------------------------------------------------
|
| When we run the console application, the current CLI command will be
| executed in this console and the response sent back to a terminal
| or another output device for the developers. Here goes nothing!
|
*/

$kernel = $app->make(Illuminate\Contracts\Console\Kernel::class);

$status = $kernel->handle(
    $input = new Symfony\Component\Console\Input\ArgvInput,
    new Symfony\Component\Console\Output\ConsoleOutput
);

/*
|--------------------------------------------------------------------------
| Shutdown The Application
|--------------------------------------------------------------------------
|
| Once Artisan has finished running, we will fire off the shutdown events
| so that any final work may be done by the application before we shut
| down the process. This is the last thing to happen to the request.
|
*/

$kernel->terminate($input, $status);

exit($status);
</file>

<file path="bootstrap/app.php">
<?php

/*
|--------------------------------------------------------------------------
| Create The Application
|--------------------------------------------------------------------------
|
| The first thing we will do is create a new Laravel application instance
| which serves as the "glue" for all the components of Laravel, and is
| the IoC container for the system binding all of the various parts.
|
*/

$app = new Illuminate\Foundation\Application(
    $_ENV['APP_BASE_PATH'] ?? dirname(__DIR__)
);

/*
|--------------------------------------------------------------------------
| Bind Important Interfaces
|--------------------------------------------------------------------------
|
| Next, we need to bind some important interfaces into the container so
| we will be able to resolve them when needed. The kernels serve the
| incoming requests to this application from both the web and CLI.
|
*/

$app->singleton(
    Illuminate\Contracts\Http\Kernel::class,
    App\Http\Kernel::class
);

$app->singleton(
    Illuminate\Contracts\Console\Kernel::class,
    App\Console\Kernel::class
);

$app->singleton(
    Illuminate\Contracts\Debug\ExceptionHandler::class,
    App\Exceptions\Handler::class
);

/*
|--------------------------------------------------------------------------
| Return The Application
|--------------------------------------------------------------------------
|
| This script returns the application instance. The instance is given to
| the calling script so we can separate the building of the instances
| from the actual running of the application and sending responses.
|
*/

return $app;
</file>

<file path="bootstrap/cache/.gitignore">
*
!.gitignore
</file>

<file path="config/auth.php">
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Authentication Defaults
    |--------------------------------------------------------------------------
    |
    | This option controls the default authentication "guard" and password
    | reset options for your application. You may change these defaults
    | as required, but they're a perfect start for most applications.
    |
    */

    'defaults' => [
        'guard' => 'web',
        'passwords' => 'users',
    ],

    /*
    |--------------------------------------------------------------------------
    | Authentication Guards
    |--------------------------------------------------------------------------
    |
    | Next, you may define every authentication guard for your application.
    | Of course, a great default configuration has been defined for you
    | here which uses session storage and the Eloquent user provider.
    |
    | All authentication drivers have a user provider. This defines how the
    | users are actually retrieved out of your database or other storage
    | mechanisms used by this application to persist your user's data.
    |
    | Supported: "session"
    |
    */

    'guards' => [
        'web' => [
            'driver' => 'session',
            'provider' => 'users',
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | User Providers
    |--------------------------------------------------------------------------
    |
    | All authentication drivers have a user provider. This defines how the
    | users are actually retrieved out of your database or other storage
    | mechanisms used by this application to persist your user's data.
    |
    | If you have multiple user tables or models you may configure multiple
    | sources which represent each model / table. These sources may then
    | be assigned to any extra authentication guards you have defined.
    |
    | Supported: "database", "eloquent"
    |
    */

    'providers' => [
        'users' => [
            'driver' => 'eloquent',
            'model' => App\Models\User::class,
        ],

        // 'users' => [
        //     'driver' => 'database',
        //     'table' => 'users',
        // ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Resetting Passwords
    |--------------------------------------------------------------------------
    |
    | You may specify multiple password reset configurations if you have more
    | than one user table or model in the application and you want to have
    | separate password reset settings based on the specific user types.
    |
    | The expiry time is the number of minutes that each reset token will be
    | considered valid. This security feature keeps tokens short-lived so
    | they have less time to be guessed. You may change this as needed.
    |
    | The throttle setting is the number of seconds a user must wait before
    | generating more password reset tokens. This prevents the user from
    | quickly generating a very large amount of password reset tokens.
    |
    */

    'passwords' => [
        'users' => [
            'provider' => 'users',
            'table' => 'password_reset_tokens',
            'expire' => 60,
            'throttle' => 60,
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Password Confirmation Timeout
    |--------------------------------------------------------------------------
    |
    | Here you may define the amount of seconds before a password confirmation
    | times out and the user is prompted to re-enter their password via the
    | confirmation screen. By default, the timeout lasts for three hours.
    |
    */

    'password_timeout' => 10800,

];
</file>

<file path="config/broadcasting.php">
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Broadcaster
    |--------------------------------------------------------------------------
    |
    | This option controls the default broadcaster that will be used by the
    | framework when an event needs to be broadcast. You may set this to
    | any of the connections defined in the "connections" array below.
    |
    | Supported: "pusher", "ably", "redis", "log", "null"
    |
    */

    'default' => env('BROADCAST_DRIVER', 'null'),

    /*
    |--------------------------------------------------------------------------
    | Broadcast Connections
    |--------------------------------------------------------------------------
    |
    | Here you may define all of the broadcast connections that will be used
    | to broadcast events to other systems or over websockets. Samples of
    | each available type of connection are provided inside this array.
    |
    */

    'connections' => [

        'pusher' => [
            'driver' => 'pusher',
            'key' => env('PUSHER_APP_KEY'),
            'secret' => env('PUSHER_APP_SECRET'),
            'app_id' => env('PUSHER_APP_ID'),
            'options' => [
                'cluster' => env('PUSHER_APP_CLUSTER'),
                'host' => env('PUSHER_HOST') ?: 'api-'.env('PUSHER_APP_CLUSTER', 'mt1').'.pusher.com',
                'port' => env('PUSHER_PORT', 443),
                'scheme' => env('PUSHER_SCHEME', 'https'),
                'encrypted' => true,
                'useTLS' => env('PUSHER_SCHEME', 'https') === 'https',
            ],
            'client_options' => [
                // Guzzle client options: https://docs.guzzlephp.org/en/stable/request-options.html
            ],
        ],

        'ably' => [
            'driver' => 'ably',
            'key' => env('ABLY_KEY'),
        ],

        'redis' => [
            'driver' => 'redis',
            'connection' => 'default',
        ],

        'log' => [
            'driver' => 'log',
        ],

        'null' => [
            'driver' => 'null',
        ],

    ],

];
</file>

<file path="config/cache.php">
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Cache Store
    |--------------------------------------------------------------------------
    |
    | This option controls the default cache connection that gets used while
    | using this caching library. This connection is used when another is
    | not explicitly specified when executing a given caching function.
    |
    */

    'default' => env('CACHE_DRIVER', 'file'),

    /*
    |--------------------------------------------------------------------------
    | Cache Stores
    |--------------------------------------------------------------------------
    |
    | Here you may define all of the cache "stores" for your application as
    | well as their drivers. You may even define multiple stores for the
    | same cache driver to group types of items stored in your caches.
    |
    | Supported drivers: "apc", "array", "database", "file",
    |         "memcached", "redis", "dynamodb", "octane", "null"
    |
    */

    'stores' => [

        'apc' => [
            'driver' => 'apc',
        ],

        'array' => [
            'driver' => 'array',
            'serialize' => false,
        ],

        'database' => [
            'driver' => 'database',
            'table' => 'cache',
            'connection' => null,
            'lock_connection' => null,
        ],

        'file' => [
            'driver' => 'file',
            'path' => storage_path('framework/cache/data'),
            'lock_path' => storage_path('framework/cache/data'),
        ],

        'memcached' => [
            'driver' => 'memcached',
            'persistent_id' => env('MEMCACHED_PERSISTENT_ID'),
            'sasl' => [
                env('MEMCACHED_USERNAME'),
                env('MEMCACHED_PASSWORD'),
            ],
            'options' => [
                // Memcached::OPT_CONNECT_TIMEOUT => 2000,
            ],
            'servers' => [
                [
                    'host' => env('MEMCACHED_HOST', '127.0.0.1'),
                    'port' => env('MEMCACHED_PORT', 11211),
                    'weight' => 100,
                ],
            ],
        ],

        'redis' => [
            'driver' => 'redis',
            'connection' => 'cache',
            'lock_connection' => 'default',
        ],

        'dynamodb' => [
            'driver' => 'dynamodb',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
            'table' => env('DYNAMODB_CACHE_TABLE', 'cache'),
            'endpoint' => env('DYNAMODB_ENDPOINT'),
        ],

        'octane' => [
            'driver' => 'octane',
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Cache Key Prefix
    |--------------------------------------------------------------------------
    |
    | When utilizing the APC, database, memcached, Redis, or DynamoDB cache
    | stores there might be other applications using the same cache. For
    | that reason, you may prefix every cache key to avoid collisions.
    |
    */

    'prefix' => env('CACHE_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_cache_'),

];
</file>

<file path="config/cors.php">
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Cross-Origin Resource Sharing (CORS) Configuration
    |--------------------------------------------------------------------------
    |
    | Here you may configure your settings for cross-origin resource sharing
    | or "CORS". This determines what cross-origin operations may execute
    | in web browsers. You are free to adjust these settings as needed.
    |
    | To learn more: https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS
    |
    */

    'paths' => ['api/*', 'sanctum/csrf-cookie'],

    'allowed_methods' => ['*'],

    'allowed_origins' => ['*'],

    'allowed_origins_patterns' => [],

    'allowed_headers' => ['*'],

    'exposed_headers' => [],

    'max_age' => 0,

    'supports_credentials' => false,

];
</file>

<file path="config/database.php">
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Database Connection Name
    |--------------------------------------------------------------------------
    |
    | Here you may specify which of the database connections below you wish
    | to use as your default connection for all database work. Of course
    | you may use many connections at once using the Database library.
    |
    */

    'default' => env('DB_CONNECTION', 'mysql'),

    /*
    |--------------------------------------------------------------------------
    | Database Connections
    |--------------------------------------------------------------------------
    |
    | Here are each of the database connections setup for your application.
    | Of course, examples of configuring each database platform that is
    | supported by Laravel is shown below to make development simple.
    |
    |
    | All database work in Laravel is done through the PHP PDO facilities
    | so make sure you have the driver for your particular database of
    | choice installed on your machine before you begin development.
    |
    */

    'connections' => [

        'sqlite' => [
            'driver' => 'sqlite',
            'url' => env('DATABASE_URL'),
            'database' => env('DB_DATABASE', database_path('database.sqlite')),
            'prefix' => '',
            'foreign_key_constraints' => env('DB_FOREIGN_KEYS', true),
        ],

        'mysql' => [
            'driver' => 'mysql',
            'url' => env('DATABASE_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '3306'),
            'database' => env('DB_DATABASE', 'forge'),
            'username' => env('DB_USERNAME', 'forge'),
            'password' => env('DB_PASSWORD', ''),
            'unix_socket' => env('DB_SOCKET', ''),
            'charset' => 'utf8mb4',
            'collation' => 'utf8mb4_unicode_ci',
            'prefix' => '',
            'prefix_indexes' => true,
            'strict' => true,
            'engine' => null,
            'options' => extension_loaded('pdo_mysql') ? array_filter([
                PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
            ]) : [],
        ],

        'pgsql' => [
            'driver' => 'pgsql',
            'url' => env('DATABASE_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '5432'),
            'database' => env('DB_DATABASE', 'forge'),
            'username' => env('DB_USERNAME', 'forge'),
            'password' => env('DB_PASSWORD', ''),
            'charset' => 'utf8',
            'prefix' => '',
            'prefix_indexes' => true,
            'search_path' => 'public',
            'sslmode' => 'prefer',
        ],

        'sqlsrv' => [
            'driver' => 'sqlsrv',
            'url' => env('DATABASE_URL'),
            'host' => env('DB_HOST', 'localhost'),
            'port' => env('DB_PORT', '1433'),
            'database' => env('DB_DATABASE', 'forge'),
            'username' => env('DB_USERNAME', 'forge'),
            'password' => env('DB_PASSWORD', ''),
            'charset' => 'utf8',
            'prefix' => '',
            'prefix_indexes' => true,
            // 'encrypt' => env('DB_ENCRYPT', 'yes'),
            // 'trust_server_certificate' => env('DB_TRUST_SERVER_CERTIFICATE', 'false'),
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Migration Repository Table
    |--------------------------------------------------------------------------
    |
    | This table keeps track of all the migrations that have already run for
    | your application. Using this information, we can determine which of
    | the migrations on disk haven't actually been run in the database.
    |
    */

    'migrations' => 'migrations',

    /*
    |--------------------------------------------------------------------------
    | Redis Databases
    |--------------------------------------------------------------------------
    |
    | Redis is an open source, fast, and advanced key-value store that also
    | provides a richer body of commands than a typical key-value system
    | such as APC or Memcached. Laravel makes it easy to dig right in.
    |
    */

    'redis' => [

        'client' => env('REDIS_CLIENT', 'phpredis'),

        'options' => [
            'cluster' => env('REDIS_CLUSTER', 'redis'),
            'prefix' => env('REDIS_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_database_'),
        ],

        'default' => [
            'url' => env('REDIS_URL'),
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'username' => env('REDIS_USERNAME'),
            'password' => env('REDIS_PASSWORD'),
            'port' => env('REDIS_PORT', '6379'),
            'database' => env('REDIS_DB', '0'),
        ],

        'cache' => [
            'url' => env('REDIS_URL'),
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'username' => env('REDIS_USERNAME'),
            'password' => env('REDIS_PASSWORD'),
            'port' => env('REDIS_PORT', '6379'),
            'database' => env('REDIS_CACHE_DB', '1'),
        ],

    ],

];
</file>

<file path="config/filesystems.php">
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Filesystem Disk
    |--------------------------------------------------------------------------
    |
    | Here you may specify the default filesystem disk that should be used
    | by the framework. The "local" disk, as well as a variety of cloud
    | based disks are available to your application. Just store away!
    |
    */

    'default' => env('FILESYSTEM_DISK', 'local'),

    /*
    |--------------------------------------------------------------------------
    | Filesystem Disks
    |--------------------------------------------------------------------------
    |
    | Here you may configure as many filesystem "disks" as you wish, and you
    | may even configure multiple disks of the same driver. Defaults have
    | been set up for each driver as an example of the required values.
    |
    | Supported Drivers: "local", "ftp", "sftp", "s3"
    |
    */

    'disks' => [

        'local' => [
            'driver' => 'local',
            'root' => storage_path('app'),
            'throw' => false,
        ],

        'public' => [
            'driver' => 'local',
            'root' => storage_path('app/public'),
            'url' => env('APP_URL').'/storage',
            'visibility' => 'public',
            'throw' => false,
        ],

        's3' => [
            'driver' => 's3',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'region' => env('AWS_DEFAULT_REGION'),
            'bucket' => env('AWS_BUCKET'),
            'url' => env('AWS_URL'),
            'endpoint' => env('AWS_ENDPOINT'),
            'use_path_style_endpoint' => env('AWS_USE_PATH_STYLE_ENDPOINT', false),
            'throw' => false,
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Symbolic Links
    |--------------------------------------------------------------------------
    |
    | Here you may configure the symbolic links that will be created when the
    | `storage:link` Artisan command is executed. The array keys should be
    | the locations of the links and the values should be their targets.
    |
    */

    'links' => [
        public_path('storage') => storage_path('app/public'),
    ],

];
</file>

<file path="config/hashing.php">
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Hash Driver
    |--------------------------------------------------------------------------
    |
    | This option controls the default hash driver that will be used to hash
    | passwords for your application. By default, the bcrypt algorithm is
    | used; however, you remain free to modify this option if you wish.
    |
    | Supported: "bcrypt", "argon", "argon2id"
    |
    */

    'driver' => 'bcrypt',

    /*
    |--------------------------------------------------------------------------
    | Bcrypt Options
    |--------------------------------------------------------------------------
    |
    | Here you may specify the configuration options that should be used when
    | passwords are hashed using the Bcrypt algorithm. This will allow you
    | to control the amount of time it takes to hash the given password.
    |
    */

    'bcrypt' => [
        'rounds' => env('BCRYPT_ROUNDS', 12),
        'verify' => true,
    ],

    /*
    |--------------------------------------------------------------------------
    | Argon Options
    |--------------------------------------------------------------------------
    |
    | Here you may specify the configuration options that should be used when
    | passwords are hashed using the Argon algorithm. These will allow you
    | to control the amount of time it takes to hash the given password.
    |
    */

    'argon' => [
        'memory' => 65536,
        'threads' => 1,
        'time' => 4,
        'verify' => true,
    ],

];
</file>

<file path="config/logging.php">
<?php

use Monolog\Handler\NullHandler;
use Monolog\Handler\StreamHandler;
use Monolog\Handler\SyslogUdpHandler;
use Monolog\Processor\PsrLogMessageProcessor;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Log Channel
    |--------------------------------------------------------------------------
    |
    | This option defines the default log channel that gets used when writing
    | messages to the logs. The name specified in this option should match
    | one of the channels defined in the "channels" configuration array.
    |
    */

    'default' => env('LOG_CHANNEL', 'stack'),

    /*
    |--------------------------------------------------------------------------
    | Deprecations Log Channel
    |--------------------------------------------------------------------------
    |
    | This option controls the log channel that should be used to log warnings
    | regarding deprecated PHP and library features. This allows you to get
    | your application ready for upcoming major versions of dependencies.
    |
    */

    'deprecations' => [
        'channel' => env('LOG_DEPRECATIONS_CHANNEL', 'null'),
        'trace' => false,
    ],

    /*
    |--------------------------------------------------------------------------
    | Log Channels
    |--------------------------------------------------------------------------
    |
    | Here you may configure the log channels for your application. Out of
    | the box, Laravel uses the Monolog PHP logging library. This gives
    | you a variety of powerful log handlers / formatters to utilize.
    |
    | Available Drivers: "single", "daily", "slack", "syslog",
    |                    "errorlog", "monolog",
    |                    "custom", "stack"
    |
    */

    'channels' => [
        'stack' => [
            'driver' => 'stack',
            'channels' => ['single'],
            'ignore_exceptions' => false,
        ],

        'single' => [
            'driver' => 'single',
            'path' => storage_path('logs/laravel.log'),
            'level' => env('LOG_LEVEL', 'debug'),
            'replace_placeholders' => true,
        ],

        'daily' => [
            'driver' => 'daily',
            'path' => storage_path('logs/laravel.log'),
            'level' => env('LOG_LEVEL', 'debug'),
            'days' => 14,
            'replace_placeholders' => true,
        ],

        'slack' => [
            'driver' => 'slack',
            'url' => env('LOG_SLACK_WEBHOOK_URL'),
            'username' => 'Laravel Log',
            'emoji' => ':boom:',
            'level' => env('LOG_LEVEL', 'critical'),
            'replace_placeholders' => true,
        ],

        'papertrail' => [
            'driver' => 'monolog',
            'level' => env('LOG_LEVEL', 'debug'),
            'handler' => env('LOG_PAPERTRAIL_HANDLER', SyslogUdpHandler::class),
            'handler_with' => [
                'host' => env('PAPERTRAIL_URL'),
                'port' => env('PAPERTRAIL_PORT'),
                'connectionString' => 'tls://'.env('PAPERTRAIL_URL').':'.env('PAPERTRAIL_PORT'),
            ],
            'processors' => [PsrLogMessageProcessor::class],
        ],

        'stderr' => [
            'driver' => 'monolog',
            'level' => env('LOG_LEVEL', 'debug'),
            'handler' => StreamHandler::class,
            'formatter' => env('LOG_STDERR_FORMATTER'),
            'with' => [
                'stream' => 'php://stderr',
            ],
            'processors' => [PsrLogMessageProcessor::class],
        ],

        'syslog' => [
            'driver' => 'syslog',
            'level' => env('LOG_LEVEL', 'debug'),
            'facility' => LOG_USER,
            'replace_placeholders' => true,
        ],

        'errorlog' => [
            'driver' => 'errorlog',
            'level' => env('LOG_LEVEL', 'debug'),
            'replace_placeholders' => true,
        ],

        'null' => [
            'driver' => 'monolog',
            'handler' => NullHandler::class,
        ],

        'emergency' => [
            'path' => storage_path('logs/laravel.log'),
        ],
    ],

];
</file>

<file path="config/mail.php">
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Mailer
    |--------------------------------------------------------------------------
    |
    | This option controls the default mailer that is used to send any email
    | messages sent by your application. Alternative mailers may be setup
    | and used as needed; however, this mailer will be used by default.
    |
    */

    'default' => env('MAIL_MAILER', 'smtp'),

    /*
    |--------------------------------------------------------------------------
    | Mailer Configurations
    |--------------------------------------------------------------------------
    |
    | Here you may configure all of the mailers used by your application plus
    | their respective settings. Several examples have been configured for
    | you and you are free to add your own as your application requires.
    |
    | Laravel supports a variety of mail "transport" drivers to be used while
    | sending an e-mail. You will specify which one you are using for your
    | mailers below. You are free to add additional mailers as required.
    |
    | Supported: "smtp", "sendmail", "mailgun", "ses", "ses-v2",
    |            "postmark", "log", "array", "failover", "roundrobin"
    |
    */

    'mailers' => [
        'smtp' => [
            'transport' => 'smtp',
            'url' => env('MAIL_URL'),
            'host' => env('MAIL_HOST', 'smtp.mailgun.org'),
            'port' => env('MAIL_PORT', 587),
            'encryption' => env('MAIL_ENCRYPTION', 'tls'),
            'username' => env('MAIL_USERNAME'),
            'password' => env('MAIL_PASSWORD'),
            'timeout' => null,
            'local_domain' => env('MAIL_EHLO_DOMAIN'),
        ],

        'ses' => [
            'transport' => 'ses',
        ],

        'postmark' => [
            'transport' => 'postmark',
            // 'message_stream_id' => null,
            // 'client' => [
            //     'timeout' => 5,
            // ],
        ],

        'mailgun' => [
            'transport' => 'mailgun',
            // 'client' => [
            //     'timeout' => 5,
            // ],
        ],

        'sendmail' => [
            'transport' => 'sendmail',
            'path' => env('MAIL_SENDMAIL_PATH', '/usr/sbin/sendmail -bs -i'),
        ],

        'log' => [
            'transport' => 'log',
            'channel' => env('MAIL_LOG_CHANNEL'),
        ],

        'array' => [
            'transport' => 'array',
        ],

        'failover' => [
            'transport' => 'failover',
            'mailers' => [
                'smtp',
                'log',
            ],
        ],

        'roundrobin' => [
            'transport' => 'roundrobin',
            'mailers' => [
                'ses',
                'postmark',
            ],
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Global "From" Address
    |--------------------------------------------------------------------------
    |
    | You may wish for all e-mails sent by your application to be sent from
    | the same address. Here, you may specify a name and address that is
    | used globally for all e-mails that are sent by your application.
    |
    */

    'from' => [
        'address' => env('MAIL_FROM_ADDRESS', 'hello@example.com'),
        'name' => env('MAIL_FROM_NAME', 'Example'),
    ],

    /*
    |--------------------------------------------------------------------------
    | Markdown Mail Settings
    |--------------------------------------------------------------------------
    |
    | If you are using Markdown based email rendering, you may configure your
    | theme and component paths here, allowing you to customize the design
    | of the emails. Or, you may simply stick with the Laravel defaults!
    |
    */

    'markdown' => [
        'theme' => 'default',

        'paths' => [
            resource_path('views/vendor/mail'),
        ],
    ],

];
</file>

<file path="config/queue.php">
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Queue Connection Name
    |--------------------------------------------------------------------------
    |
    | Laravel's queue API supports an assortment of back-ends via a single
    | API, giving you convenient access to each back-end using the same
    | syntax for every one. Here you may define a default connection.
    |
    */

    'default' => env('QUEUE_CONNECTION', 'sync'),

    /*
    |--------------------------------------------------------------------------
    | Queue Connections
    |--------------------------------------------------------------------------
    |
    | Here you may configure the connection information for each server that
    | is used by your application. A default configuration has been added
    | for each back-end shipped with Laravel. You are free to add more.
    |
    | Drivers: "sync", "database", "beanstalkd", "sqs", "redis", "null"
    |
    */

    'connections' => [

        'sync' => [
            'driver' => 'sync',
        ],

        'database' => [
            'driver' => 'database',
            'table' => 'jobs',
            'queue' => 'default',
            'retry_after' => 90,
            'after_commit' => false,
        ],

        'beanstalkd' => [
            'driver' => 'beanstalkd',
            'host' => 'localhost',
            'queue' => 'default',
            'retry_after' => 90,
            'block_for' => 0,
            'after_commit' => false,
        ],

        'sqs' => [
            'driver' => 'sqs',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'prefix' => env('SQS_PREFIX', 'https://sqs.us-east-1.amazonaws.com/your-account-id'),
            'queue' => env('SQS_QUEUE', 'default'),
            'suffix' => env('SQS_SUFFIX'),
            'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
            'after_commit' => false,
        ],

        'redis' => [
            'driver' => 'redis',
            'connection' => 'default',
            'queue' => env('REDIS_QUEUE', 'default'),
            'retry_after' => 90,
            'block_for' => null,
            'after_commit' => false,
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Job Batching
    |--------------------------------------------------------------------------
    |
    | The following options configure the database and table that store job
    | batching information. These options can be updated to any database
    | connection and table which has been defined by your application.
    |
    */

    'batching' => [
        'database' => env('DB_CONNECTION', 'mysql'),
        'table' => 'job_batches',
    ],

    /*
    |--------------------------------------------------------------------------
    | Failed Queue Jobs
    |--------------------------------------------------------------------------
    |
    | These options configure the behavior of failed queue job logging so you
    | can control which database and table are used to store the jobs that
    | have failed. You may change them to any database / table you wish.
    |
    */

    'failed' => [
        'driver' => env('QUEUE_FAILED_DRIVER', 'database-uuids'),
        'database' => env('DB_CONNECTION', 'mysql'),
        'table' => 'failed_jobs',
    ],

];
</file>

<file path="config/sanctum.php">
<?php

use Laravel\Sanctum\Sanctum;

return [

    /*
    |--------------------------------------------------------------------------
    | Stateful Domains
    |--------------------------------------------------------------------------
    |
    | Requests from the following domains / hosts will receive stateful API
    | authentication cookies. Typically, these should include your local
    | and production domains which access your API via a frontend SPA.
    |
    */

    'stateful' => explode(',', env('SANCTUM_STATEFUL_DOMAINS', sprintf(
        '%s%s',
        'localhost,localhost:3000,127.0.0.1,127.0.0.1:8000,::1',
        Sanctum::currentApplicationUrlWithPort()
    ))),

    /*
    |--------------------------------------------------------------------------
    | Sanctum Guards
    |--------------------------------------------------------------------------
    |
    | This array contains the authentication guards that will be checked when
    | Sanctum is trying to authenticate a request. If none of these guards
    | are able to authenticate the request, Sanctum will use the bearer
    | token that's present on an incoming request for authentication.
    |
    */

    'guard' => ['web'],

    /*
    |--------------------------------------------------------------------------
    | Expiration Minutes
    |--------------------------------------------------------------------------
    |
    | This value controls the number of minutes until an issued token will be
    | considered expired. This will override any values set in the token's
    | "expires_at" attribute, but first-party sessions are not affected.
    |
    */

    'expiration' => null,

    /*
    |--------------------------------------------------------------------------
    | Token Prefix
    |--------------------------------------------------------------------------
    |
    | Sanctum can prefix new tokens in order to take advantage of numerous
    | security scanning initiatives maintained by open source platforms
    | that notify developers if they commit tokens into repositories.
    |
    | See: https://docs.github.com/en/code-security/secret-scanning/about-secret-scanning
    |
    */

    'token_prefix' => env('SANCTUM_TOKEN_PREFIX', ''),

    /*
    |--------------------------------------------------------------------------
    | Sanctum Middleware
    |--------------------------------------------------------------------------
    |
    | When authenticating your first-party SPA with Sanctum you may need to
    | customize some of the middleware Sanctum uses while processing the
    | request. You may change the middleware listed below as required.
    |
    */

    'middleware' => [
        'authenticate_session' => Laravel\Sanctum\Http\Middleware\AuthenticateSession::class,
        'encrypt_cookies' => App\Http\Middleware\EncryptCookies::class,
        'verify_csrf_token' => App\Http\Middleware\VerifyCsrfToken::class,
    ],

];
</file>

<file path="config/services.php">
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Third Party Services
    |--------------------------------------------------------------------------
    |
    | This file is for storing the credentials for third party services such
    | as Mailgun, Postmark, AWS and more. This file provides the de facto
    | location for this type of information, allowing packages to have
    | a conventional file to locate the various service credentials.
    |
    */

    'mailgun' => [
        'domain' => env('MAILGUN_DOMAIN'),
        'secret' => env('MAILGUN_SECRET'),
        'endpoint' => env('MAILGUN_ENDPOINT', 'api.mailgun.net'),
        'scheme' => 'https',
    ],

    'postmark' => [
        'token' => env('POSTMARK_TOKEN'),
    ],

    'ses' => [
        'key' => env('AWS_ACCESS_KEY_ID'),
        'secret' => env('AWS_SECRET_ACCESS_KEY'),
        'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
    ],

    'dynadot' => [
        'api_key' => env('DYNADOT_API_KEY'),
    ],

    'godaddy' => [
        'api_key' => env('GODADDY_API_KEY'),
    ],

    'namecom' => [
        'api_key' => env('NAMECOM_API_KEY'),
    ],

    'namecheap' => [
        'api_key' => env('NAMECHEAP_API_KEY'),
        'username' => env('NAMECHEAP_USERNAME'),
        'client_ip' => env('NAMECHEAP_CLIENT_IP', '127.0.0.1'),
    ],

    'porkbun' => [
        'api_key' => env('PORKBUN_API_KEY'),
        'api_secret' => env('PORKBUN_API_SECRET'),
    ],

    'spaceship' => [
        'api_key' => env('SPACESHIP_API_KEY'),
        'api_secret' => env('SPACESHIP_API_SECRET'),
    ],

];
</file>

<file path="config/session.php">
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Session Driver
    |--------------------------------------------------------------------------
    |
    | This option controls the default session "driver" that will be used on
    | requests. By default, we will use the lightweight native driver but
    | you may specify any of the other wonderful drivers provided here.
    |
    | Supported: "file", "cookie", "database", "apc",
    |            "memcached", "redis", "dynamodb", "array"
    |
    */

    'driver' => env('SESSION_DRIVER', 'file'),

    /*
    |--------------------------------------------------------------------------
    | Session Lifetime
    |--------------------------------------------------------------------------
    |
    | Here you may specify the number of minutes that you wish the session
    | to be allowed to remain idle before it expires. If you want them
    | to immediately expire on the browser closing, set that option.
    |
    */

    'lifetime' => env('SESSION_LIFETIME', 120),

    'expire_on_close' => false,

    /*
    |--------------------------------------------------------------------------
    | Session Encryption
    |--------------------------------------------------------------------------
    |
    | This option allows you to easily specify that all of your session data
    | should be encrypted before it is stored. All encryption will be run
    | automatically by Laravel and you can use the Session like normal.
    |
    */

    'encrypt' => false,

    /*
    |--------------------------------------------------------------------------
    | Session File Location
    |--------------------------------------------------------------------------
    |
    | When using the native session driver, we need a location where session
    | files may be stored. A default has been set for you but a different
    | location may be specified. This is only needed for file sessions.
    |
    */

    'files' => storage_path('framework/sessions'),

    /*
    |--------------------------------------------------------------------------
    | Session Database Connection
    |--------------------------------------------------------------------------
    |
    | When using the "database" or "redis" session drivers, you may specify a
    | connection that should be used to manage these sessions. This should
    | correspond to a connection in your database configuration options.
    |
    */

    'connection' => env('SESSION_CONNECTION'),

    /*
    |--------------------------------------------------------------------------
    | Session Database Table
    |--------------------------------------------------------------------------
    |
    | When using the "database" session driver, you may specify the table we
    | should use to manage the sessions. Of course, a sensible default is
    | provided for you; however, you are free to change this as needed.
    |
    */

    'table' => 'sessions',

    /*
    |--------------------------------------------------------------------------
    | Session Cache Store
    |--------------------------------------------------------------------------
    |
    | While using one of the framework's cache driven session backends you may
    | list a cache store that should be used for these sessions. This value
    | must match with one of the application's configured cache "stores".
    |
    | Affects: "apc", "dynamodb", "memcached", "redis"
    |
    */

    'store' => env('SESSION_STORE'),

    /*
    |--------------------------------------------------------------------------
    | Session Sweeping Lottery
    |--------------------------------------------------------------------------
    |
    | Some session drivers must manually sweep their storage location to get
    | rid of old sessions from storage. Here are the chances that it will
    | happen on a given request. By default, the odds are 2 out of 100.
    |
    */

    'lottery' => [2, 100],

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Name
    |--------------------------------------------------------------------------
    |
    | Here you may change the name of the cookie used to identify a session
    | instance by ID. The name specified here will get used every time a
    | new session cookie is created by the framework for every driver.
    |
    */

    'cookie' => env(
        'SESSION_COOKIE',
        Str::slug(env('APP_NAME', 'laravel'), '_').'_session'
    ),

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Path
    |--------------------------------------------------------------------------
    |
    | The session cookie path determines the path for which the cookie will
    | be regarded as available. Typically, this will be the root path of
    | your application but you are free to change this when necessary.
    |
    */

    'path' => '/',

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Domain
    |--------------------------------------------------------------------------
    |
    | Here you may change the domain of the cookie used to identify a session
    | in your application. This will determine which domains the cookie is
    | available to in your application. A sensible default has been set.
    |
    */

    'domain' => env('SESSION_DOMAIN'),

    /*
    |--------------------------------------------------------------------------
    | HTTPS Only Cookies
    |--------------------------------------------------------------------------
    |
    | By setting this option to true, session cookies will only be sent back
    | to the server if the browser has a HTTPS connection. This will keep
    | the cookie from being sent to you when it can't be done securely.
    |
    */

    'secure' => env('SESSION_SECURE_COOKIE'),

    /*
    |--------------------------------------------------------------------------
    | HTTP Access Only
    |--------------------------------------------------------------------------
    |
    | Setting this value to true will prevent JavaScript from accessing the
    | value of the cookie and the cookie will only be accessible through
    | the HTTP protocol. You are free to modify this option if needed.
    |
    */

    'http_only' => true,

    /*
    |--------------------------------------------------------------------------
    | Same-Site Cookies
    |--------------------------------------------------------------------------
    |
    | This option determines how your cookies behave when cross-site requests
    | take place, and can be used to mitigate CSRF attacks. By default, we
    | will set this value to "lax" since this is a secure default value.
    |
    | Supported: "lax", "strict", "none", null
    |
    */

    'same_site' => 'lax',

    /*
    |--------------------------------------------------------------------------
    | Partitioned Cookies
    |--------------------------------------------------------------------------
    |
    | Setting this value to true will tie the cookie to the top-level site for
    | a cross-site context. Partitioned cookies are accepted by the browser
    | when flagged "secure" and the Same-Site attribute is set to "none".
    |
    */

    'partitioned' => false,

];
</file>

<file path="config/view.php">
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | View Storage Paths
    |--------------------------------------------------------------------------
    |
    | Most templating systems load templates from disk. Here you may specify
    | an array of paths that should be checked for your views. Of course
    | the usual Laravel view path has already been registered for you.
    |
    */

    'paths' => [
        resource_path('views'),
    ],

    /*
    |--------------------------------------------------------------------------
    | Compiled View Path
    |--------------------------------------------------------------------------
    |
    | This option determines where all the compiled Blade templates will be
    | stored for your application. Typically, this is within the storage
    | directory. However, as usual, you are free to change this value.
    |
    */

    'compiled' => env(
        'VIEW_COMPILED_PATH',
        realpath(storage_path('framework/views'))
    ),

];
</file>

<file path="database/.gitignore">
*.sqlite*
</file>

<file path="database/factories/UserFactory.php">
<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\User>
 */
class UserFactory extends Factory
{
    /**
     * The current password being used by the factory.
     */
    protected static ?string $password;

    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'name' => fake()->name(),
            'email' => fake()->unique()->safeEmail(),
            'email_verified_at' => now(),
            'password' => static::$password ??= Hash::make('password'),
            'remember_token' => Str::random(10),
        ];
    }

    /**
     * Indicate that the model's email address should be unverified.
     */
    public function unverified(): static
    {
        return $this->state(fn (array $attributes) => [
            'email_verified_at' => null,
        ]);
    }
}
</file>

<file path="database/migrations/2014_10_12_000000_create_users_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('email')->unique();
            $table->timestamp('email_verified_at')->nullable();
            $table->string('password');
            $table->rememberToken();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('users');
    }
};
</file>

<file path="database/migrations/2014_10_12_100000_create_password_reset_tokens_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('password_reset_tokens', function (Blueprint $table) {
            $table->string('email')->primary();
            $table->string('token');
            $table->timestamp('created_at')->nullable();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('password_reset_tokens');
    }
};
</file>

<file path="database/migrations/2014_10_12_100000_create_password_resets_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('password_resets', function (Blueprint $table) {
            $table->string('email')->index();
            $table->string('token');
            $table->timestamp('created_at')->nullable();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('password_resets');
    }
};
</file>

<file path="database/migrations/2019_08_19_000000_create_failed_jobs_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('failed_jobs', function (Blueprint $table) {
            $table->id();
            $table->string('uuid')->unique();
            $table->text('connection');
            $table->text('queue');
            $table->longText('payload');
            $table->longText('exception');
            $table->timestamp('failed_at')->useCurrent();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('failed_jobs');
    }
};
</file>

<file path="database/migrations/2019_12_14_000001_create_personal_access_tokens_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('personal_access_tokens', function (Blueprint $table) {
            $table->id();
            $table->morphs('tokenable');
            $table->string('name');
            $table->string('token', 64)->unique();
            $table->text('abilities')->nullable();
            $table->timestamp('last_used_at')->nullable();
            $table->timestamp('expires_at')->nullable();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('personal_access_tokens');
    }
};
</file>

<file path="database/migrations/2024_09_23_170935_create_domains_table.php">
<?php
// database/migrations/xxxx_xx_xx_create_domains_table.php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateDomainsTable extends Migration
{
    public function up()
    {
        Schema::create('domains', function (Blueprint $table) {
            $table->id();
            $table->string('domain')->unique();
            $table->bigInteger('exp_date');
            $table->string('registrar');
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('domains');
    }
}
</file>

<file path="database/migrations/2024_09_25_105547_add_status_to_domains_table.php">
<?php
// database/migrations/2024_09_24_000000_add_status_to_domains_table.php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class AddStatusToDomainsTable extends Migration
{
    public function up()
    {
        Schema::table('domains', function (Blueprint $table) {
            $table->string('status')->default('ACTIVE')->after('registrar'); // Add status column
        });
    }

    public function down()
    {
        Schema::table('domains', function (Blueprint $table) {
            $table->dropColumn('status');
        });
    }
}
</file>

<file path="database/migrations/2024_10_17_172455_create_domain_results_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateDomainResultsTable extends Migration
{
    public function up()
    {
        Schema::create('domain_results', function (Blueprint $table) {
            $table->id();
            $table->uuid('uuid');
            $table->string('domain');
            $table->string('registrant')->nullable();
            $table->date('expiration_date')->nullable();
            $table->integer('days_left');
            $table->decimal('price', 8, 2);
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('domain_results');
    }
}
</file>

<file path="database/migrations/2024_10_17_185039_recreate_domain_results_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class RecreateDomainResultsTable extends Migration
{
    public function up()
    {
        Schema::dropIfExists('domain_results');

        Schema::create('domain_results', function (Blueprint $table) {
            $table->id();
            $table->uuid('uuid');
            $table->string('domain');
            $table->string('registrar'); // Updated column name
            $table->date('expiration_date');
            $table->integer('days_left');
            $table->decimal('price', 8, 2);
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('domain_results');
    }
}
</file>

<file path="database/seeders/AdminUserSeeder.php">
<?php

// database/seeders/AdminUserSeeder.php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\Hash;
use App\Models\User;

class AdminUserSeeder extends Seeder
{
    public function run()
    {
        User::create([
            'name' => 'Admin',
            'email' => 'admin@nsdomains.com',
            'password' => Hash::make('HF&*ONRYGYFE'),
        ]);
    }
}
</file>

<file path="database/seeders/DatabaseSeeder.php">
<?php

namespace Database\Seeders;

// use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;

class DatabaseSeeder extends Seeder
{
    /**
     * Seed the application's database.
     */
    public function run(): void
    {
        // \App\Models\User::factory(10)->create();

        // \App\Models\User::factory()->create([
        //     'name' => 'Test User',
        //     'email' => 'test@example.com',
        // ]);
    }
}
</file>

<file path="docs/Crypto payments check API.postman_collection.json">
{
	"info": {
		"_postman_id": "0486c51b-08a4-4b09-80e1-45f05dc0a13b",
		"name": "Crypto payments check API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15603002"
	},
	"item": [
		{
			"name": "tron_valid_key",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-API-KEY",
						"value": "test_api_key_123"
					}
				],
				"url": {
					"raw": "{{HOST}}/tron/tx/00009557eee0e4de96ad09044665909472d98da93efe68a94b7531fe4b7bad1d",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"tron",
						"tx",
						"00009557eee0e4de96ad09044665909472d98da93efe68a94b7531fe4b7bad1d"
					]
				},
				"description": "Generated from cURL: curl -X GET \\\r\n  http://localhost:5000/tron/tx/00009557eee0e4de96ad09044665909472d98da93efe68a94b7531fe4b7bad1d \\\r\n  -H \"X-API-KEY: <API_KEY>\""
			},
			"response": []
		},
		{
			"name": "bsc_valid_key",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-API-KEY",
						"value": "test_api_key_123"
					}
				],
				"url": {
					"raw": "{{HOST}}/bsc/tx/0x70972bb704abba84303f55df329d46c2e574adfd8a1e02e3dc5e259d5f01f2f6",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"bsc",
						"tx",
						"0x70972bb704abba84303f55df329d46c2e574adfd8a1e02e3dc5e259d5f01f2f6"
					]
				},
				"description": "Generated from cURL: curl -X GET \\\r\n  http://localhost:5000/bsc/tx/0x70972bb704abba84303f55df329d46c2e574adfd8a1e02e3dc5e259d5f01f2f6 \\\r\n  -H \"X-API-KEY: <API_KEY>\""
			},
			"response": []
		},
		{
			"name": "bitcoin_valid_tx",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-API-KEY",
						"value": "test_api_key_123"
					}
				],
				"url": {
					"raw": "{{HOST}}/bitcoin/tx/359f8a4bb14b8e1e79580320b92552dc0b3919340ae608746269abcce847c1fd?receiver_address=bc1q26e3zj4yt7u8agju2ajy0z9ljxvhgzlppjgavh",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"bitcoin",
						"tx",
						"359f8a4bb14b8e1e79580320b92552dc0b3919340ae608746269abcce847c1fd"
					],
					"query": [
						{
							"key": "receiver_address",
							"value": "bc1q26e3zj4yt7u8agju2ajy0z9ljxvhgzlppjgavh"
						}
					]
				},
				"description": "Generated from cURL:   curl -X GET \\\r\n      -H \"X-API-KEY: YOUR_API_KEY_HERE\" \\\r\n      \"http://localhost:5000/bitcoin/tx/359f8a4bb14b8e1e79580320b92552dc0b3919340ae608746269abcce847c1fd?receiver_address=bc1q26e3zj4yt7u8agju2ajy0z9ljxvhgzlppjgavh\""
			},
			"response": []
		},
		{
			"name": "bypass_btc_get_trx",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "X-API-KEY",
						"value": "test_api_key_123"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n            \"transaction_hash\": \"00009557eee0e4de96ad09044665909472d98da93efe68a94b7531fe4b7bad1d\"\r\n          }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOST}}/check-transaction",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"check-transaction"
					]
				},
				"description": "Generated from cURL: curl -X POST \\\r\n      -H \"Content-Type: application/json\" \\\r\n      -H \"X-API-KEY: YOUR_API_KEY_HERE\" \\\r\n      -d '{\r\n            \"transaction_hash\": \"00009557eee0e4de96ad09044665909472d98da93efe68a94b7531fe4b7bad1d\"\r\n          }' \\\r\n      \"http://localhost:5000/check-transaction\""
			},
			"response": []
		},
		{
			"name": "btc_with_filter",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "X-API-KEY",
						"value": "test_api_key_123"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n            \"transaction_hash\": \"359f8a4bb14b8e1e79580320b92552dc0b3919340ae608746269abcce847c1fd\",\r\n            \"receiver_address\": \"bc1q26e3zj4yt7u8agju2ajy0z9ljxvhgzlppjgavh\"\r\n          }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOST}}/check-transaction",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"check-transaction"
					]
				},
				"description": "Generated from cURL:     curl -X POST \\\r\n      -H \"Content-Type: application/json\" \\\r\n      -H \"X-API-KEY: YOUR_API_KEY_HERE\" \\\r\n      -d '{\r\n            \"transaction_hash\": \"359f8a4bb14b8e1e79580320b92552dc0b3919340ae608746269abcce847c1fd\",\r\n            \"receiver_address\": \"bc1q26e3zj4yt7u8agju2ajy0z9ljxvhgzlppjgavh\"\r\n          }' \\\r\n      \"http://localhost:5000/check-transaction\""
			},
			"response": []
		},
		{
			"name": "only_btc",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "X-API-KEY",
						"value": "test_api_key_123"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n            \"transaction_hash\": \"359f8a4bb14b8e1e79580320b92552dc0b3919340ae608746269abcce847c1fd\",\r\n            \"blockchain\": \"BITCOIN\",\r\n            \"receiver_address\": \"bc1q26e3zj4yt7u8agju2ajy0z9ljxvhgzlppjgavh\"\r\n          }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOST}}/check-transaction",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"check-transaction"
					]
				},
				"description": "Generated from cURL:     curl -X POST \\\r\n      -H \"Content-Type: application/json\" \\\r\n      -H \"X-API-KEY: YOUR_API_KEY_HERE\" \\\r\n      -d '{\r\n            \"transaction_hash\": \"359f8a4bb14b8e1e79580320b92552dc0b3919340ae608746269abcce847c1fd\",\r\n            \"blockchain\": \"BITCOIN\",\r\n            \"receiver_address\": \"bc1q26e3zj4yt7u8agju2ajy0z9ljxvhgzlppjgavh\"\r\n          }' \\\r\n      \"http://localhost:5000/check-transaction\""
			},
			"response": []
		},
		{
			"name": "health check",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "X-API-KEY",
						"value": "test_api_key_123"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n            \"transaction_hash\": \"359f8a4bb14b8e1e79580320b92552dc0b3919340ae608746269abcce847c1fd\",\r\n            \"blockchain\": \"BITCOIN\",\r\n            \"receiver_address\": \"bc1q26e3zj4yt7u8agju2ajy0z9ljxvhgzlppjgavh\"\r\n          }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOST}}/health",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"health"
					]
				},
				"description": "Generated from cURL:     curl -X POST \\\r\n      -H \"Content-Type: application/json\" \\\r\n      -H \"X-API-KEY: YOUR_API_KEY_HERE\" \\\r\n      -d '{\r\n            \"transaction_hash\": \"359f8a4bb14b8e1e79580320b92552dc0b3919340ae608746269abcce847c1fd\",\r\n            \"blockchain\": \"BITCOIN\",\r\n            \"receiver_address\": \"bc1q26e3zj4yt7u8agju2ajy0z9ljxvhgzlppjgavh\"\r\n          }' \\\r\n      \"http://localhost:5000/check-transaction\""
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "HOST",
			"value": "https://crypto-payments.cheaptools.club",
			"type": "string"
		}
	]
}
</file>

<file path="package.json">
{
    "private": true,
    "type": "module",
    "scripts": {
        "dev": "vite",
        "build": "vite build"
    },
    "devDependencies": {
        "@popperjs/core": "^2.11.6",
        "axios": "^1.6.4",
        "bootstrap": "^5.2.3",
        "laravel-vite-plugin": "^1.0.0",
        "sass": "^1.56.1",
        "vite": "^5.4.7"
    }
}
</file>

<file path="phpunit.xml">
<?xml version="1.0" encoding="UTF-8"?>
<phpunit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="vendor/phpunit/phpunit/phpunit.xsd"
         bootstrap="vendor/autoload.php"
         colors="true"
>
    <testsuites>
        <testsuite name="Unit">
            <directory>tests/Unit</directory>
        </testsuite>
        <testsuite name="Feature">
            <directory>tests/Feature</directory>
        </testsuite>
    </testsuites>
    <source>
        <include>
            <directory>app</directory>
        </include>
    </source>
    <php>
        <env name="APP_ENV" value="testing"/>
        <env name="BCRYPT_ROUNDS" value="4"/>
        <env name="CACHE_DRIVER" value="array"/>
        <!-- <env name="DB_CONNECTION" value="sqlite"/> -->
        <!-- <env name="DB_DATABASE" value=":memory:"/> -->
        <env name="MAIL_MAILER" value="array"/>
        <env name="PULSE_ENABLED" value="false"/>
        <env name="QUEUE_CONNECTION" value="sync"/>
        <env name="SESSION_DRIVER" value="array"/>
        <env name="TELESCOPE_ENABLED" value="false"/>
    </php>
</phpunit>
</file>

<file path="public/.htaccess">
<IfModule mod_rewrite.c>
    <IfModule mod_negotiation.c>
        Options -MultiViews -Indexes
    </IfModule>

    RewriteEngine On

    # Handle Authorization Header
    RewriteCond %{HTTP:Authorization} .
    RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]

    # Redirect Trailing Slashes If Not A Folder...
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_URI} (.+)/$
    RewriteRule ^ %1 [L,R=301]

    # Send Requests To Front Controller...
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteRule ^ index.php [L]
</IfModule>
</file>

<file path="public/index.php">
<?php

use Illuminate\Contracts\Http\Kernel;
use Illuminate\Http\Request;

define('LARAVEL_START', microtime(true));

/*
|--------------------------------------------------------------------------
| Check If The Application Is Under Maintenance
|--------------------------------------------------------------------------
|
| If the application is in maintenance / demo mode via the "down" command
| we will load this file so that any pre-rendered content can be shown
| instead of starting the framework, which could cause an exception.
|
*/

if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) {
    require $maintenance;
}

/*
|--------------------------------------------------------------------------
| Register The Auto Loader
|--------------------------------------------------------------------------
|
| Composer provides a convenient, automatically generated class loader for
| this application. We just need to utilize it! We'll simply require it
| into the script here so we don't need to manually load our classes.
|
*/

require __DIR__.'/../vendor/autoload.php';

/*
|--------------------------------------------------------------------------
| Run The Application
|--------------------------------------------------------------------------
|
| Once we have the application, we can handle the incoming request using
| the application's HTTP kernel. Then, we will send the response back
| to this client's browser, allowing them to enjoy our application.
|
*/

$app = require_once __DIR__.'/../bootstrap/app.php';

$kernel = $app->make(Kernel::class);

$response = $kernel->handle(
    $request = Request::capture()
)->send();

$kernel->terminate($request, $response);
</file>

<file path="public/robots.txt">
User-agent: *
Disallow:
</file>

<file path="public/site.webmanifest">
{"name":"","short_name":"","icons":[{"src":"/android-chrome-192x192.png","sizes":"192x192","type":"image/png"},{"src":"/android-chrome-512x512.png","sizes":"512x512","type":"image/png"}],"theme_color":"#ffffff","background_color":"#ffffff","display":"standalone"}
</file>

<file path="resources/js/app.js">
import './bootstrap';
</file>

<file path="resources/js/bootstrap.js">
import 'bootstrap';

/**
 * We'll load the axios HTTP library which allows us to easily issue requests
 * to our Laravel back-end. This library automatically handles sending the
 * CSRF token as a header based on the value of the "XSRF" token cookie.
 */

import axios from 'axios';
window.axios = axios;

window.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';

/**
 * Echo exposes an expressive API for subscribing to channels and listening
 * for events that are broadcast by Laravel. Echo and event broadcasting
 * allows your team to easily build robust real-time web applications.
 */

// import Echo from 'laravel-echo';

// import Pusher from 'pusher-js';
// window.Pusher = Pusher;

// window.Echo = new Echo({
//     broadcaster: 'pusher',
//     key: import.meta.env.VITE_PUSHER_APP_KEY,
//     cluster: import.meta.env.VITE_PUSHER_APP_CLUSTER ?? 'mt1',
//     wsHost: import.meta.env.VITE_PUSHER_HOST ?? `ws-${import.meta.env.VITE_PUSHER_APP_CLUSTER}.pusher.com`,
//     wsPort: import.meta.env.VITE_PUSHER_PORT ?? 80,
//     wssPort: import.meta.env.VITE_PUSHER_PORT ?? 443,
//     forceTLS: (import.meta.env.VITE_PUSHER_SCHEME ?? 'https') === 'https',
//     enabledTransports: ['ws', 'wss'],
// });
</file>

<file path="resources/sass/_variables.scss">
// Body
$body-bg: #f8fafc;

// Typography
$font-family-sans-serif: 'Nunito', sans-serif;
$font-size-base: 0.9rem;
$line-height-base: 1.6;
</file>

<file path="resources/sass/app.scss">
// Fonts
@import url('https://fonts.bunny.net/css?family=Nunito');

// Variables
@import 'variables';

// Bootstrap
@import 'bootstrap/scss/bootstrap';
</file>

<file path="resources/views/auth/login.blade.php">
@extends('layouts.app')

@section('content')
<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">{{ __('Login') }}</div>

                <div class="card-body">
                    <form method="POST" action="{{ route('login') }}">
                        @csrf

                        <div class="row mb-3">
                            <label for="email" class="col-md-4 col-form-label text-md-end">{{ __('Email Address') }}</label>

                            <div class="col-md-6">
                                <input id="email" type="email" class="form-control @error('email') is-invalid @enderror" name="email" value="{{ old('email') }}" required autocomplete="email" autofocus>

                                @error('email')
                                    <span class="invalid-feedback" role="alert">
                                        <strong>{{ $message }}</strong>
                                    </span>
                                @enderror
                            </div>
                        </div>

                        <div class="row mb-3">
                            <label for="password" class="col-md-4 col-form-label text-md-end">{{ __('Password') }}</label>

                            <div class="col-md-6">
                                <input id="password" type="password" class="form-control @error('password') is-invalid @enderror" name="password" required autocomplete="current-password">

                                @error('password')
                                    <span class="invalid-feedback" role="alert">
                                        <strong>{{ $message }}</strong>
                                    </span>
                                @enderror
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6 offset-md-4">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" name="remember" id="remember" {{ old('remember') ? 'checked' : '' }}>

                                    <label class="form-check-label" for="remember">
                                        {{ __('Remember Me') }}
                                    </label>
                                </div>
                            </div>
                        </div>

                        <div class="row mb-0">
                            <div class="col-md-8 offset-md-4">
                                <button type="submit" class="btn btn-primary">
                                    {{ __('Login') }}
                                </button>

                                @if (Route::has('password.request'))
                                    <a class="btn btn-link" href="{{ route('password.request') }}">
                                        {{ __('Forgot Your Password?') }}
                                    </a>
                                @endif
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
@endsection
</file>

<file path="resources/views/auth/passwords/confirm.blade.php">
@extends('layouts.app')

@section('content')
<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">{{ __('Confirm Password') }}</div>

                <div class="card-body">
                    {{ __('Please confirm your password before continuing.') }}

                    <form method="POST" action="{{ route('password.confirm') }}">
                        @csrf

                        <div class="row mb-3">
                            <label for="password" class="col-md-4 col-form-label text-md-end">{{ __('Password') }}</label>

                            <div class="col-md-6">
                                <input id="password" type="password" class="form-control @error('password') is-invalid @enderror" name="password" required autocomplete="current-password">

                                @error('password')
                                    <span class="invalid-feedback" role="alert">
                                        <strong>{{ $message }}</strong>
                                    </span>
                                @enderror
                            </div>
                        </div>

                        <div class="row mb-0">
                            <div class="col-md-8 offset-md-4">
                                <button type="submit" class="btn btn-primary">
                                    {{ __('Confirm Password') }}
                                </button>

                                @if (Route::has('password.request'))
                                    <a class="btn btn-link" href="{{ route('password.request') }}">
                                        {{ __('Forgot Your Password?') }}
                                    </a>
                                @endif
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
@endsection
</file>

<file path="resources/views/auth/passwords/email.blade.php">
@extends('layouts.app')

@section('content')
<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">{{ __('Reset Password') }}</div>

                <div class="card-body">
                    @if (session('status'))
                        <div class="alert alert-success" role="alert">
                            {{ session('status') }}
                        </div>
                    @endif

                    <form method="POST" action="{{ route('password.email') }}">
                        @csrf

                        <div class="row mb-3">
                            <label for="email" class="col-md-4 col-form-label text-md-end">{{ __('Email Address') }}</label>

                            <div class="col-md-6">
                                <input id="email" type="email" class="form-control @error('email') is-invalid @enderror" name="email" value="{{ old('email') }}" required autocomplete="email" autofocus>

                                @error('email')
                                    <span class="invalid-feedback" role="alert">
                                        <strong>{{ $message }}</strong>
                                    </span>
                                @enderror
                            </div>
                        </div>

                        <div class="row mb-0">
                            <div class="col-md-6 offset-md-4">
                                <button type="submit" class="btn btn-primary">
                                    {{ __('Send Password Reset Link') }}
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
@endsection
</file>

<file path="resources/views/auth/passwords/reset.blade.php">
@extends('layouts.app')

@section('content')
<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">{{ __('Reset Password') }}</div>

                <div class="card-body">
                    <form method="POST" action="{{ route('password.update') }}">
                        @csrf

                        <input type="hidden" name="token" value="{{ $token }}">

                        <div class="row mb-3">
                            <label for="email" class="col-md-4 col-form-label text-md-end">{{ __('Email Address') }}</label>

                            <div class="col-md-6">
                                <input id="email" type="email" class="form-control @error('email') is-invalid @enderror" name="email" value="{{ $email ?? old('email') }}" required autocomplete="email" autofocus>

                                @error('email')
                                    <span class="invalid-feedback" role="alert">
                                        <strong>{{ $message }}</strong>
                                    </span>
                                @enderror
                            </div>
                        </div>

                        <div class="row mb-3">
                            <label for="password" class="col-md-4 col-form-label text-md-end">{{ __('Password') }}</label>

                            <div class="col-md-6">
                                <input id="password" type="password" class="form-control @error('password') is-invalid @enderror" name="password" required autocomplete="new-password">

                                @error('password')
                                    <span class="invalid-feedback" role="alert">
                                        <strong>{{ $message }}</strong>
                                    </span>
                                @enderror
                            </div>
                        </div>

                        <div class="row mb-3">
                            <label for="password-confirm" class="col-md-4 col-form-label text-md-end">{{ __('Confirm Password') }}</label>

                            <div class="col-md-6">
                                <input id="password-confirm" type="password" class="form-control" name="password_confirmation" required autocomplete="new-password">
                            </div>
                        </div>

                        <div class="row mb-0">
                            <div class="col-md-6 offset-md-4">
                                <button type="submit" class="btn btn-primary">
                                    {{ __('Reset Password') }}
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
@endsection
</file>

<file path="resources/views/auth/register.blade.php">
@extends('layouts.app')

@section('content')
<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">{{ __('Register') }}</div>

                <div class="card-body">
                    <form method="POST" action="{{ route('register') }}">
                        @csrf

                        <div class="row mb-3">
                            <label for="name" class="col-md-4 col-form-label text-md-end">{{ __('Name') }}</label>

                            <div class="col-md-6">
                                <input id="name" type="text" class="form-control @error('name') is-invalid @enderror" name="name" value="{{ old('name') }}" required autocomplete="name" autofocus>

                                @error('name')
                                    <span class="invalid-feedback" role="alert">
                                        <strong>{{ $message }}</strong>
                                    </span>
                                @enderror
                            </div>
                        </div>

                        <div class="row mb-3">
                            <label for="email" class="col-md-4 col-form-label text-md-end">{{ __('Email Address') }}</label>

                            <div class="col-md-6">
                                <input id="email" type="email" class="form-control @error('email') is-invalid @enderror" name="email" value="{{ old('email') }}" required autocomplete="email">

                                @error('email')
                                    <span class="invalid-feedback" role="alert">
                                        <strong>{{ $message }}</strong>
                                    </span>
                                @enderror
                            </div>
                        </div>

                        <div class="row mb-3">
                            <label for="password" class="col-md-4 col-form-label text-md-end">{{ __('Password') }}</label>

                            <div class="col-md-6">
                                <input id="password" type="password" class="form-control @error('password') is-invalid @enderror" name="password" required autocomplete="new-password">

                                @error('password')
                                    <span class="invalid-feedback" role="alert">
                                        <strong>{{ $message }}</strong>
                                    </span>
                                @enderror
                            </div>
                        </div>

                        <div class="row mb-3">
                            <label for="password-confirm" class="col-md-4 col-form-label text-md-end">{{ __('Confirm Password') }}</label>

                            <div class="col-md-6">
                                <input id="password-confirm" type="password" class="form-control" name="password_confirmation" required autocomplete="new-password">
                            </div>
                        </div>

                        <div class="row mb-0">
                            <div class="col-md-6 offset-md-4">
                                <button type="submit" class="btn btn-primary">
                                    {{ __('Register') }}
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
@endsection
</file>

<file path="resources/views/auth/verify.blade.php">
@extends('layouts.app')

@section('content')
<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">{{ __('Verify Your Email Address') }}</div>

                <div class="card-body">
                    @if (session('resent'))
                        <div class="alert alert-success" role="alert">
                            {{ __('A fresh verification link has been sent to your email address.') }}
                        </div>
                    @endif

                    {{ __('Before proceeding, please check your email for a verification link.') }}
                    {{ __('If you did not receive the email') }},
                    <form class="d-inline" method="POST" action="{{ route('verification.resend') }}">
                        @csrf
                        <button type="submit" class="btn btn-link p-0 m-0 align-baseline">{{ __('click here to request another') }}</button>.
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
@endsection
</file>

<file path="resources/views/home.blade.php">
@extends('layouts.app')

@section('content')
<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">{{ __('Dashboard') }}</div>

                <div class="card-body">
                    @if (session('status'))
                        <div class="alert alert-success" role="alert">
                            {{ session('status') }}
                        </div>
                    @endif

                    {{ __('You are logged in!') }}
                </div>
            </div>
        </div>
    </div>
</div>
@endsection
</file>

<file path="resources/views/partials/navbar.blade.php">
<!-- resources/views/partials/navbar.blade.php -->

<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <a class="navbar-brand" href="#">Domain Manager</a>
    <div class="collapse navbar-collapse">
        <ul class="navbar-nav mr-auto">
            <li class="nav-item">
                <a class="nav-link" href="{{ route('domains.uploadForm') }}">
                    Upload Domains
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="{{ route('domains.index') }}">
                    View Domains
                </a>
            </li>
        </ul>
    </div>
</nav>
</file>

<file path="resources/views/welcome.blade.php">
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <title>Laravel</title>

        <!-- Fonts -->
        <link rel="preconnect" href="https://fonts.bunny.net">
        <link href="https://fonts.bunny.net/css?family=figtree:400,600&display=swap" rel="stylesheet" />

        <!-- Styles -->
        <style>
            /* ! tailwindcss v3.2.4 | MIT License | https://tailwindcss.com */*,::after,::before{box-sizing:border-box;border-width:0;border-style:solid;border-color:#e5e7eb}::after,::before{--tw-content:''}html{line-height:1.5;-webkit-text-size-adjust:100%;-moz-tab-size:4;tab-size:4;font-family:Figtree, sans-serif;font-feature-settings:normal}body{margin:0;line-height:inherit}hr{height:0;color:inherit;border-top-width:1px}abbr:where([title]){-webkit-text-decoration:underline dotted;text-decoration:underline dotted}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit}a{color:inherit;text-decoration:inherit}b,strong{font-weight:bolder}code,kbd,pre,samp{font-family:ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}table{text-indent:0;border-color:inherit;border-collapse:collapse}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;font-weight:inherit;line-height:inherit;color:inherit;margin:0;padding:0}button,select{text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button;background-color:transparent;background-image:none}:-moz-focusring{outline:auto}:-moz-ui-invalid{box-shadow:none}progress{vertical-align:baseline}::-webkit-inner-spin-button,::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}summary{display:list-item}blockquote,dd,dl,figure,h1,h2,h3,h4,h5,h6,hr,p,pre{margin:0}fieldset{margin:0;padding:0}legend{padding:0}menu,ol,ul{list-style:none;margin:0;padding:0}textarea{resize:vertical}input::placeholder,textarea::placeholder{opacity:1;color:#9ca3af}[role=button],button{cursor:pointer}:disabled{cursor:default}audio,canvas,embed,iframe,img,object,svg,video{display:block;vertical-align:middle}img,video{max-width:100%;height:auto}[hidden]{display:none}*, ::before, ::after{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgb(59 130 246 / 0.5);--tw-ring-offset-shadow:0 0 #0000;--tw-ring-shadow:0 0 #0000;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: }::-webkit-backdrop{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgb(59 130 246 / 0.5);--tw-ring-offset-shadow:0 0 #0000;--tw-ring-shadow:0 0 #0000;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: }::backdrop{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgb(59 130 246 / 0.5);--tw-ring-offset-shadow:0 0 #0000;--tw-ring-shadow:0 0 #0000;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: }.relative{position:relative}.mx-auto{margin-left:auto;margin-right:auto}.mx-6{margin-left:1.5rem;margin-right:1.5rem}.ml-4{margin-left:1rem}.mt-16{margin-top:4rem}.mt-6{margin-top:1.5rem}.mt-4{margin-top:1rem}.-mt-px{margin-top:-1px}.mr-1{margin-right:0.25rem}.flex{display:flex}.inline-flex{display:inline-flex}.grid{display:grid}.h-16{height:4rem}.h-7{height:1.75rem}.h-6{height:1.5rem}.h-5{height:1.25rem}.min-h-screen{min-height:100vh}.w-auto{width:auto}.w-16{width:4rem}.w-7{width:1.75rem}.w-6{width:1.5rem}.w-5{width:1.25rem}.max-w-7xl{max-width:80rem}.shrink-0{flex-shrink:0}.scale-100{--tw-scale-x:1;--tw-scale-y:1;transform:translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}.grid-cols-1{grid-template-columns:repeat(1, minmax(0, 1fr))}.items-center{align-items:center}.justify-center{justify-content:center}.gap-6{gap:1.5rem}.gap-4{gap:1rem}.self-center{align-self:center}.rounded-lg{border-radius:0.5rem}.rounded-full{border-radius:9999px}.bg-gray-100{--tw-bg-opacity:1;background-color:rgb(243 244 246 / var(--tw-bg-opacity))}.bg-white{--tw-bg-opacity:1;background-color:rgb(255 255 255 / var(--tw-bg-opacity))}.bg-red-50{--tw-bg-opacity:1;background-color:rgb(254 242 242 / var(--tw-bg-opacity))}.bg-dots-darker{background-image:url("data:image/svg+xml,%3Csvg width='30' height='30' viewBox='0 0 30 30' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M1.22676 0C1.91374 0 2.45351 0.539773 2.45351 1.22676C2.45351 1.91374 1.91374 2.45351 1.22676 2.45351C0.539773 2.45351 0 1.91374 0 1.22676C0 0.539773 0.539773 0 1.22676 0Z' fill='rgba(0,0,0,0.07)'/%3E%3C/svg%3E")}.from-gray-700\/50{--tw-gradient-from:rgb(55 65 81 / 0.5);--tw-gradient-to:rgb(55 65 81 / 0);--tw-gradient-stops:var(--tw-gradient-from), var(--tw-gradient-to)}.via-transparent{--tw-gradient-to:rgb(0 0 0 / 0);--tw-gradient-stops:var(--tw-gradient-from), transparent, var(--tw-gradient-to)}.bg-center{background-position:center}.stroke-red-500{stroke:#ef4444}.stroke-gray-400{stroke:#9ca3af}.p-6{padding:1.5rem}.px-6{padding-left:1.5rem;padding-right:1.5rem}.text-center{text-align:center}.text-right{text-align:right}.text-xl{font-size:1.25rem;line-height:1.75rem}.text-sm{font-size:0.875rem;line-height:1.25rem}.font-semibold{font-weight:600}.leading-relaxed{line-height:1.625}.text-gray-600{--tw-text-opacity:1;color:rgb(75 85 99 / var(--tw-text-opacity))}.text-gray-900{--tw-text-opacity:1;color:rgb(17 24 39 / var(--tw-text-opacity))}.text-gray-500{--tw-text-opacity:1;color:rgb(107 114 128 / var(--tw-text-opacity))}.underline{-webkit-text-decoration-line:underline;text-decoration-line:underline}.antialiased{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.shadow-2xl{--tw-shadow:0 25px 50px -12px rgb(0 0 0 / 0.25);--tw-shadow-colored:0 25px 50px -12px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)}.shadow-gray-500\/20{--tw-shadow-color:rgb(107 114 128 / 0.2);--tw-shadow:var(--tw-shadow-colored)}.transition-all{transition-property:all;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transition-duration:150ms}.selection\:bg-red-500 *::selection{--tw-bg-opacity:1;background-color:rgb(239 68 68 / var(--tw-bg-opacity))}.selection\:text-white *::selection{--tw-text-opacity:1;color:rgb(255 255 255 / var(--tw-text-opacity))}.selection\:bg-red-500::selection{--tw-bg-opacity:1;background-color:rgb(239 68 68 / var(--tw-bg-opacity))}.selection\:text-white::selection{--tw-text-opacity:1;color:rgb(255 255 255 / var(--tw-text-opacity))}.hover\:text-gray-900:hover{--tw-text-opacity:1;color:rgb(17 24 39 / var(--tw-text-opacity))}.hover\:text-gray-700:hover{--tw-text-opacity:1;color:rgb(55 65 81 / var(--tw-text-opacity))}.focus\:rounded-sm:focus{border-radius:0.125rem}.focus\:outline:focus{outline-style:solid}.focus\:outline-2:focus{outline-width:2px}.focus\:outline-red-500:focus{outline-color:#ef4444}.group:hover .group-hover\:stroke-gray-600{stroke:#4b5563}.z-10{z-index: 10}@media (prefers-reduced-motion: no-preference){.motion-safe\:hover\:scale-\[1\.01\]:hover{--tw-scale-x:1.01;--tw-scale-y:1.01;transform:translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}}@media (prefers-color-scheme: dark){.dark\:bg-gray-900{--tw-bg-opacity:1;background-color:rgb(17 24 39 / var(--tw-bg-opacity))}.dark\:bg-gray-800\/50{background-color:rgb(31 41 55 / 0.5)}.dark\:bg-red-800\/20{background-color:rgb(153 27 27 / 0.2)}.dark\:bg-dots-lighter{background-image:url("data:image/svg+xml,%3Csvg width='30' height='30' viewBox='0 0 30 30' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M1.22676 0C1.91374 0 2.45351 0.539773 2.45351 1.22676C2.45351 1.91374 1.91374 2.45351 1.22676 2.45351C0.539773 2.45351 0 1.91374 0 1.22676C0 0.539773 0.539773 0 1.22676 0Z' fill='rgba(255,255,255,0.07)'/%3E%3C/svg%3E")}.dark\:bg-gradient-to-bl{background-image:linear-gradient(to bottom left, var(--tw-gradient-stops))}.dark\:stroke-gray-600{stroke:#4b5563}.dark\:text-gray-400{--tw-text-opacity:1;color:rgb(156 163 175 / var(--tw-text-opacity))}.dark\:text-white{--tw-text-opacity:1;color:rgb(255 255 255 / var(--tw-text-opacity))}.dark\:shadow-none{--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)}.dark\:ring-1{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000)}.dark\:ring-inset{--tw-ring-inset:inset}.dark\:ring-white\/5{--tw-ring-color:rgb(255 255 255 / 0.05)}.dark\:hover\:text-white:hover{--tw-text-opacity:1;color:rgb(255 255 255 / var(--tw-text-opacity))}.group:hover .dark\:group-hover\:stroke-gray-400{stroke:#9ca3af}}@media (min-width: 640px){.sm\:fixed{position:fixed}.sm\:top-0{top:0px}.sm\:right-0{right:0px}.sm\:ml-0{margin-left:0px}.sm\:flex{display:flex}.sm\:items-center{align-items:center}.sm\:justify-center{justify-content:center}.sm\:justify-between{justify-content:space-between}.sm\:text-left{text-align:left}.sm\:text-right{text-align:right}}@media (min-width: 768px){.md\:grid-cols-2{grid-template-columns:repeat(2, minmax(0, 1fr))}}@media (min-width: 1024px){.lg\:gap-8{gap:2rem}.lg\:p-8{padding:2rem}}
        </style>
    </head>
    <body class="antialiased">
        <div class="relative sm:flex sm:justify-center sm:items-center min-h-screen bg-dots-darker bg-center bg-gray-100 dark:bg-dots-lighter dark:bg-gray-900 selection:bg-red-500 selection:text-white">
            @if (Route::has('login'))
                <div class="sm:fixed sm:top-0 sm:right-0 p-6 text-right z-10">
                    @auth
                        <a href="{{ url('/home') }}" class="font-semibold text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white focus:outline focus:outline-2 focus:rounded-sm focus:outline-red-500">Home</a>
                    @else
                        <a href="{{ route('login') }}" class="font-semibold text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white focus:outline focus:outline-2 focus:rounded-sm focus:outline-red-500">Log in</a>

                        @if (Route::has('register'))
                            <a href="{{ route('register') }}" class="ml-4 font-semibold text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white focus:outline focus:outline-2 focus:rounded-sm focus:outline-red-500">Register</a>
                        @endif
                    @endauth
                </div>
            @endif

            <div class="max-w-7xl mx-auto p-6 lg:p-8">
                <div class="flex justify-center">
                    <svg viewBox="0 0 62 65" fill="none" xmlns="http://www.w3.org/2000/svg" class="h-16 w-auto bg-gray-100 dark:bg-gray-900">
                        <path d="M61.8548 14.6253C61.8778 14.7102 61.8895 14.7978 61.8897 14.8858V28.5615C61.8898 28.737 61.8434 28.9095 61.7554 29.0614C61.6675 29.2132 61.5409 29.3392 61.3887 29.4265L49.9104 36.0351V49.1337C49.9104 49.4902 49.7209 49.8192 49.4118 49.9987L25.4519 63.7916C25.3971 63.8227 25.3372 63.8427 25.2774 63.8639C25.255 63.8714 25.2338 63.8851 25.2101 63.8913C25.0426 63.9354 24.8666 63.9354 24.6991 63.8913C24.6716 63.8838 24.6467 63.8689 24.6205 63.8589C24.5657 63.8389 24.5084 63.8215 24.456 63.7916L0.501061 49.9987C0.348882 49.9113 0.222437 49.7853 0.134469 49.6334C0.0465019 49.4816 0.000120578 49.3092 0 49.1337L0 8.10652C0 8.01678 0.0124642 7.92953 0.0348998 7.84477C0.0423783 7.8161 0.0598282 7.78993 0.0697995 7.76126C0.0884958 7.70891 0.105946 7.65531 0.133367 7.6067C0.152063 7.5743 0.179485 7.54812 0.20192 7.51821C0.230588 7.47832 0.256763 7.43719 0.290416 7.40229C0.319084 7.37362 0.356476 7.35243 0.388883 7.32751C0.425029 7.29759 0.457436 7.26518 0.498568 7.2415L12.4779 0.345059C12.6296 0.257786 12.8015 0.211853 12.9765 0.211853C13.1515 0.211853 13.3234 0.257786 13.475 0.345059L25.4531 7.2415H25.4556C25.4955 7.26643 25.5292 7.29759 25.5653 7.32626C25.5977 7.35119 25.6339 7.37362 25.6625 7.40104C25.6974 7.43719 25.7224 7.47832 25.7523 7.51821C25.7735 7.54812 25.8021 7.5743 25.8196 7.6067C25.8483 7.65656 25.8645 7.70891 25.8844 7.76126C25.8944 7.78993 25.9118 7.8161 25.9193 7.84602C25.9423 7.93096 25.954 8.01853 25.9542 8.10652V33.7317L35.9355 27.9844V14.8846C35.9355 14.7973 35.948 14.7088 35.9704 14.6253C35.9792 14.5954 35.9954 14.5692 36.0053 14.5405C36.0253 14.4882 36.0427 14.4346 36.0702 14.386C36.0888 14.3536 36.1163 14.3274 36.1375 14.2975C36.1674 14.2576 36.1923 14.2165 36.2272 14.1816C36.2559 14.1529 36.292 14.1317 36.3244 14.1068C36.3618 14.0769 36.3942 14.0445 36.4341 14.0208L48.4147 7.12434C48.5663 7.03694 48.7383 6.99094 48.9133 6.99094C49.0883 6.99094 49.2602 7.03694 49.4118 7.12434L61.3899 14.0208C61.4323 14.0457 61.4647 14.0769 61.5021 14.1055C61.5333 14.1305 61.5694 14.1529 61.5981 14.1803C61.633 14.2165 61.6579 14.2576 61.6878 14.2975C61.7103 14.3274 61.7377 14.3536 61.7551 14.386C61.7838 14.4346 61.8 14.4882 61.8199 14.5405C61.8312 14.5692 61.8474 14.5954 61.8548 14.6253ZM59.893 27.9844V16.6121L55.7013 19.0252L49.9104 22.3593V33.7317L59.8942 27.9844H59.893ZM47.9149 48.5566V37.1768L42.2187 40.4299L25.953 49.7133V61.2003L47.9149 48.5566ZM1.99677 9.83281V48.5566L23.9562 61.199V49.7145L12.4841 43.2219L12.4804 43.2194L12.4754 43.2169C12.4368 43.1945 12.4044 43.1621 12.3682 43.1347C12.3371 43.1097 12.3009 43.0898 12.2735 43.0624L12.271 43.0586C12.2386 43.0275 12.2162 42.9888 12.1887 42.9539C12.1638 42.9203 12.1339 42.8916 12.114 42.8567L12.1127 42.853C12.0903 42.8156 12.0766 42.7707 12.0604 42.7283C12.0442 42.6909 12.023 42.656 12.013 42.6161C12.0005 42.5688 11.998 42.5177 11.9931 42.4691C11.9881 42.4317 11.9781 42.3943 11.9781 42.3569V15.5801L6.18848 12.2446L1.99677 9.83281ZM12.9777 2.36177L2.99764 8.10652L12.9752 13.8513L22.9541 8.10527L12.9752 2.36177H12.9777ZM18.1678 38.2138L23.9574 34.8809V9.83281L19.7657 12.2459L13.9749 15.5801V40.6281L18.1678 38.2138ZM48.9133 9.14105L38.9344 14.8858L48.9133 20.6305L58.8909 14.8846L48.9133 9.14105ZM47.9149 22.3593L42.124 19.0252L37.9323 16.6121V27.9844L43.7219 31.3174L47.9149 33.7317V22.3593ZM24.9533 47.987L39.59 39.631L46.9065 35.4555L36.9352 29.7145L25.4544 36.3242L14.9907 42.3482L24.9533 47.987Z" fill="#FF2D20"/>
                    </svg>
                </div>

                <div class="mt-16">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 lg:gap-8">
                        <a href="https://laravel.com/docs" class="scale-100 p-6 bg-white dark:bg-gray-800/50 dark:bg-gradient-to-bl from-gray-700/50 via-transparent dark:ring-1 dark:ring-inset dark:ring-white/5 rounded-lg shadow-2xl shadow-gray-500/20 dark:shadow-none flex motion-safe:hover:scale-[1.01] transition-all duration-250 focus:outline focus:outline-2 focus:outline-red-500">
                            <div>
                                <div class="h-16 w-16 bg-red-50 dark:bg-red-800/20 flex items-center justify-center rounded-full">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" class="w-7 h-7 stroke-red-500">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M12 6.042A8.967 8.967 0 006 3.75c-1.052 0-2.062.18-3 .512v14.25A8.987 8.987 0 016 18c2.305 0 4.408.867 6 2.292m0-14.25a8.966 8.966 0 016-2.292c1.052 0 2.062.18 3 .512v14.25A8.987 8.987 0 0018 18a8.967 8.967 0 00-6 2.292m0-14.25v14.25" />
                                    </svg>
                                </div>

                                <h2 class="mt-6 text-xl font-semibold text-gray-900 dark:text-white">Documentation</h2>

                                <p class="mt-4 text-gray-500 dark:text-gray-400 text-sm leading-relaxed">
                                    Laravel has wonderful documentation covering every aspect of the framework. Whether you are a newcomer or have prior experience with Laravel, we recommend reading our documentation from beginning to end.
                                </p>
                            </div>

                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" class="self-center shrink-0 stroke-red-500 w-6 h-6 mx-6">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12h15m0 0l-6.75-6.75M19.5 12l-6.75 6.75" />
                            </svg>
                        </a>

                        <a href="https://laracasts.com" class="scale-100 p-6 bg-white dark:bg-gray-800/50 dark:bg-gradient-to-bl from-gray-700/50 via-transparent dark:ring-1 dark:ring-inset dark:ring-white/5 rounded-lg shadow-2xl shadow-gray-500/20 dark:shadow-none flex motion-safe:hover:scale-[1.01] transition-all duration-250 focus:outline focus:outline-2 focus:outline-red-500">
                            <div>
                                <div class="h-16 w-16 bg-red-50 dark:bg-red-800/20 flex items-center justify-center rounded-full">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" class="w-7 h-7 stroke-red-500">
                                        <path stroke-linecap="round" d="M15.75 10.5l4.72-4.72a.75.75 0 011.28.53v11.38a.75.75 0 01-1.28.53l-4.72-4.72M4.5 18.75h9a2.25 2.25 0 002.25-2.25v-9a2.25 2.25 0 00-2.25-2.25h-9A2.25 2.25 0 002.25 7.5v9a2.25 2.25 0 002.25 2.25z" />
                                    </svg>
                                </div>

                                <h2 class="mt-6 text-xl font-semibold text-gray-900 dark:text-white">Laracasts</h2>

                                <p class="mt-4 text-gray-500 dark:text-gray-400 text-sm leading-relaxed">
                                    Laracasts offers thousands of video tutorials on Laravel, PHP, and JavaScript development. Check them out, see for yourself, and massively level up your development skills in the process.
                                </p>
                            </div>

                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" class="self-center shrink-0 stroke-red-500 w-6 h-6 mx-6">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12h15m0 0l-6.75-6.75M19.5 12l-6.75 6.75" />
                            </svg>
                        </a>

                        <a href="https://laravel-news.com" class="scale-100 p-6 bg-white dark:bg-gray-800/50 dark:bg-gradient-to-bl from-gray-700/50 via-transparent dark:ring-1 dark:ring-inset dark:ring-white/5 rounded-lg shadow-2xl shadow-gray-500/20 dark:shadow-none flex motion-safe:hover:scale-[1.01] transition-all duration-250 focus:outline focus:outline-2 focus:outline-red-500">
                            <div>
                                <div class="h-16 w-16 bg-red-50 dark:bg-red-800/20 flex items-center justify-center rounded-full">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" class="w-7 h-7 stroke-red-500">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M12 7.5h1.5m-1.5 3h1.5m-7.5 3h7.5m-7.5 3h7.5m3-9h3.375c.621 0 1.125.504 1.125 1.125V18a2.25 2.25 0 01-2.25 2.25M16.5 7.5V18a2.25 2.25 0 002.25 2.25M16.5 7.5V4.875c0-.621-.504-1.125-1.125-1.125H4.125C3.504 3.75 3 4.254 3 4.875V18a2.25 2.25 0 002.25 2.25h13.5M6 7.5h3v3H6v-3z" />
                                    </svg>
                                </div>

                                <h2 class="mt-6 text-xl font-semibold text-gray-900 dark:text-white">Laravel News</h2>

                                <p class="mt-4 text-gray-500 dark:text-gray-400 text-sm leading-relaxed">
                                    Laravel News is a community driven portal and newsletter aggregating all of the latest and most important news in the Laravel ecosystem, including new package releases and tutorials.
                                </p>
                            </div>

                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" class="self-center shrink-0 stroke-red-500 w-6 h-6 mx-6">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12h15m0 0l-6.75-6.75M19.5 12l-6.75 6.75" />
                            </svg>
                        </a>

                        <div class="scale-100 p-6 bg-white dark:bg-gray-800/50 dark:bg-gradient-to-bl from-gray-700/50 via-transparent dark:ring-1 dark:ring-inset dark:ring-white/5 rounded-lg shadow-2xl shadow-gray-500/20 dark:shadow-none flex motion-safe:hover:scale-[1.01] transition-all duration-250 focus:outline focus:outline-2 focus:outline-red-500">
                            <div>
                                <div class="h-16 w-16 bg-red-50 dark:bg-red-800/20 flex items-center justify-center rounded-full">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" class="w-7 h-7 stroke-red-500">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M6.115 5.19l.319 1.913A6 6 0 008.11 10.36L9.75 12l-.387.775c-.217.433-.132.956.21 1.298l1.348 1.348c.21.21.329.497.329.795v1.089c0 .426.24.815.622 1.006l.153.076c.433.217.956.132 1.298-.21l.723-.723a8.7 8.7 0 002.288-4.042 1.087 1.087 0 00-.358-1.099l-1.33-1.108c-.251-.21-.582-.299-.905-.245l-1.17.195a1.125 1.125 0 01-.98-.314l-.295-.295a1.125 1.125 0 010-1.591l.13-.132a1.125 1.125 0 011.3-.21l.603.302a.809.809 0 001.086-1.086L14.25 7.5l1.256-.837a4.5 4.5 0 001.528-1.732l.146-.292M6.115 5.19A9 9 0 1017.18 4.64M6.115 5.19A8.965 8.965 0 0112 3c1.929 0 3.716.607 5.18 1.64" />
                                    </svg>
                                </div>

                                <h2 class="mt-6 text-xl font-semibold text-gray-900 dark:text-white">Vibrant Ecosystem</h2>

                                <p class="mt-4 text-gray-500 dark:text-gray-400 text-sm leading-relaxed">
                                    Laravel's robust library of first-party tools and libraries, such as <a href="https://forge.laravel.com" class="underline hover:text-gray-700 dark:hover:text-white focus:outline focus:outline-2 focus:rounded-sm focus:outline-red-500">Forge</a>, <a href="https://vapor.laravel.com" class="underline hover:text-gray-700 dark:hover:text-white focus:outline focus:outline-2 focus:rounded-sm focus:outline-red-500">Vapor</a>, <a href="https://nova.laravel.com" class="underline hover:text-gray-700 dark:hover:text-white focus:outline focus:outline-2 focus:rounded-sm focus:outline-red-500">Nova</a>, and <a href="https://envoyer.io" class="underline hover:text-gray-700 dark:hover:text-white focus:outline focus:outline-2 focus:rounded-sm focus:outline-red-500">Envoyer</a> help you take your projects to the next level. Pair them with powerful open source libraries like <a href="https://laravel.com/docs/billing" class="underline hover:text-gray-700 dark:hover:text-white focus:outline focus:outline-2 focus:rounded-sm focus:outline-red-500">Cashier</a>, <a href="https://laravel.com/docs/dusk" class="underline hover:text-gray-700 dark:hover:text-white focus:outline focus:outline-2 focus:rounded-sm focus:outline-red-500">Dusk</a>, <a href="https://laravel.com/docs/broadcasting" class="underline hover:text-gray-700 dark:hover:text-white focus:outline focus:outline-2 focus:rounded-sm focus:outline-red-500">Echo</a>, <a href="https://laravel.com/docs/horizon" class="underline hover:text-gray-700 dark:hover:text-white focus:outline focus:outline-2 focus:rounded-sm focus:outline-red-500">Horizon</a>, <a href="https://laravel.com/docs/sanctum" class="underline hover:text-gray-700 dark:hover:text-white focus:outline focus:outline-2 focus:rounded-sm focus:outline-red-500">Sanctum</a>, <a href="https://laravel.com/docs/telescope" class="underline hover:text-gray-700 dark:hover:text-white focus:outline focus:outline-2 focus:rounded-sm focus:outline-red-500">Telescope</a>, and more.
                                </p>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="flex justify-center mt-16 px-0 sm:items-center sm:justify-between">
                    <div class="text-center text-sm sm:text-left">
                        &nbsp;
                    </div>

                    <div class="text-center text-sm text-gray-500 dark:text-gray-400 sm:text-right sm:ml-0">
                        Laravel v{{ Illuminate\Foundation\Application::VERSION }} (PHP v{{ PHP_VERSION }})
                    </div>
                </div>
            </div>
        </div>
    </body>
</html>
</file>

<file path="routes/api.php">
<?php

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;

/*
|--------------------------------------------------------------------------
| API Routes
|--------------------------------------------------------------------------
|
| Here is where you can register API routes for your application. These
| routes are loaded by the RouteServiceProvider and all of them will
| be assigned to the "api" middleware group. Make something great!
|
*/

Route::middleware('auth:sanctum')->get('/user', function (Request $request) {
    return $request->user();
});
</file>

<file path="routes/channels.php">
<?php

use Illuminate\Support\Facades\Broadcast;

/*
|--------------------------------------------------------------------------
| Broadcast Channels
|--------------------------------------------------------------------------
|
| Here you may register all of the event broadcasting channels that your
| application supports. The given channel authorization callbacks are
| used to check if an authenticated user can listen to the channel.
|
*/

Broadcast::channel('App.Models.User.{id}', function ($user, $id) {
    return (int) $user->id === (int) $id;
});
</file>

<file path="routes/console.php">
<?php

use Illuminate\Foundation\Inspiring;
use Illuminate\Support\Facades\Artisan;

/*
|--------------------------------------------------------------------------
| Console Routes
|--------------------------------------------------------------------------
|
| This file is where you may define all of your Closure based console
| commands. Each Closure is bound to a command instance allowing a
| simple approach to interacting with each command's IO methods.
|
*/

Artisan::command('inspire', function () {
    $this->comment(Inspiring::quote());
})->purpose('Display an inspiring quote');
</file>

<file path="storage/app/.gitignore">
*
!public/
!.gitignore
</file>

<file path="storage/app/public/.gitignore">
*
!.gitignore
</file>

<file path="storage/framework/.gitignore">
compiled.php
config.php
down
events.scanned.php
maintenance.php
routes.php
routes.scanned.php
schedule-*
services.json
</file>

<file path="storage/framework/cache/.gitignore">
*
!data/
!.gitignore
</file>

<file path="storage/framework/cache/data/.gitignore">
*
!.gitignore
</file>

<file path="storage/framework/sessions/.gitignore">
*
!.gitignore
</file>

<file path="storage/framework/testing/.gitignore">
*
!.gitignore
</file>

<file path="storage/framework/views/.gitignore">
*
!.gitignore
</file>

<file path="storage/logs/.gitignore">
*
!.gitignore
</file>

<file path="tests/CreatesApplication.php">
<?php

namespace Tests;

use Illuminate\Contracts\Console\Kernel;
use Illuminate\Foundation\Application;

trait CreatesApplication
{
    /**
     * Creates the application.
     */
    public function createApplication(): Application
    {
        $app = require __DIR__.'/../bootstrap/app.php';

        $app->make(Kernel::class)->bootstrap();

        return $app;
    }
}
</file>

<file path="tests/Feature/ExampleTest.php">
<?php

namespace Tests\Feature;

// use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class ExampleTest extends TestCase
{
    /**
     * A basic test example.
     */
    public function test_the_application_returns_a_successful_response(): void
    {
        $response = $this->get('/');

        $response->assertStatus(200);
    }
}
</file>

<file path="tests/TestCase.php">
<?php

namespace Tests;

use Illuminate\Foundation\Testing\TestCase as BaseTestCase;

abstract class TestCase extends BaseTestCase
{
    use CreatesApplication;
}
</file>

<file path="tests/Unit/ExampleTest.php">
<?php

namespace Tests\Unit;

use PHPUnit\Framework\TestCase;

class ExampleTest extends TestCase
{
    /**
     * A basic test example.
     */
    public function test_that_true_is_true(): void
    {
        $this->assertTrue(true);
    }
}
</file>

<file path="vite.config.js">
import { defineConfig } from 'vite';
import laravel from 'laravel-vite-plugin';

export default defineConfig({
    plugins: [
        laravel({
            input: [
                'resources/sass/app.scss',
                'resources/js/app.js',
            ],
            refresh: true,
        }),
    ],
});
</file>

<file path=".env.example">
APP_NAME=Laravel
APP_ENV=local
APP_KEY=base64:Z8iUB21q94/XoEGcXYT50yjsqdIMekZOq+Q4mZMygOg=
APP_DEBUG=true
APP_URL=http://localhost

LOG_CHANNEL=stack
LOG_DEPRECATIONS_CHANNEL=null
LOG_LEVEL=debug

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=nsdomains
DB_USERNAME=root
DB_PASSWORD=

BROADCAST_DRIVER=log
CACHE_DRIVER=file
FILESYSTEM_DISK=local
QUEUE_CONNECTION=sync
SESSION_DRIVER=file
SESSION_LIFETIME=120

MEMCACHED_HOST=127.0.0.1

REDIS_HOST=127.0.0.1
REDIS_PASSWORD=null
REDIS_PORT=6379

MAIL_MAILER=smtp
MAIL_HOST=mailpit
MAIL_PORT=1025
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_ENCRYPTION=null
MAIL_FROM_ADDRESS="hello@example.com"
MAIL_FROM_NAME="${APP_NAME}"

AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_DEFAULT_REGION=us-east-1
AWS_BUCKET=
AWS_USE_PATH_STYLE_ENDPOINT=false

PUSHER_APP_ID=
PUSHER_APP_KEY=
PUSHER_APP_SECRET=
PUSHER_HOST=
PUSHER_PORT=443
PUSHER_SCHEME=https
PUSHER_APP_CLUSTER=mt1

VITE_APP_NAME="${APP_NAME}"
VITE_PUSHER_APP_KEY="${PUSHER_APP_KEY}"
VITE_PUSHER_HOST="${PUSHER_HOST}"
VITE_PUSHER_PORT="${PUSHER_PORT}"
VITE_PUSHER_SCHEME="${PUSHER_SCHEME}"
VITE_PUSHER_APP_CLUSTER="${PUSHER_APP_CLUSTER}"

DYNADOT_API_KEY=o7i81Q716C6ugE9C8n7r7P9L7Dn6Z6e6w8s7Q8l8s8Y
GODADDY_API_KEY="gHpomdCTiyib_WBEpcx4kSuBdXfxfCjP3Fi:PZdC3omSCf6vsyTdafw9rd"
NAMECOM_API_KEY=07d5f0449659b7bb9eec7dcc92b2443cbdee4427

NAMECHEAP_API_KEY=e2a8150c87f04b68822bc65667b8910d
NAMECHEAP_USERNAME=JoshHill
NAMECHEAP_CLIENT_IP=127.0.0.1

PORKBUN_API_KEY=pk1_dbda633f30dc7b21711f9eba153088a6e8b5fb45017f826689e6d59a1f3a8627
PORKBUN_API_SECRET=sk1_16c02afc3ec516561793fcf42b99781ac7414373b82decda5448d269b4fd2da7

SPACESHIP_API_KEY=L5RC5eZdUax5BIELlH1M
SPACESHIP_API_SECRET=EXiz68H3hmFdxemS6oIMu8y9CXmioChc36aY1Qvm6qi92Lo66hpMHppYpcK8TQso

SAV_COM_API_KEY=lC5YdK2kVZHuZKOfv4HtXybY96ycw6nYFKuNlvb9

DOMAIN_PRICES_JSON_PATH=storage/app/namecheap.json
</file>

<file path=".github/workflows/main.yml">
name: Auto Deploy on Push

on:
  push:
    branches:
      - main  # Adjust this if your deployment branch is different

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout the repository
      uses: actions/checkout@v2

    - name: Install SSH key for server access
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Pull latest code from GitHub on the server
      run: |
        ssh -o StrictHostKeyChecking=no ubuntu@148.113.138.32 'cd /var/www/nsdomains-management && git fetch origin && git reset --hard origin/main'

    - name: Send Telegram notification
      run: |
        curl -s -X POST https://api.telegram.org/bot1790397670:AAFsAoJ5Qju9V4phdq5cflhJF938uS7t2QI/sendMessage \
        -d chat_id=-4188687896 \
        -d text="🚀 The latest code has been successfully pulled on the server!"
</file>

<file path=".gitignore">
/.phpunit.cache
/node_modules
/public/build
/public/hot
/public/storage
/storage/*.key
/vendor
.env
.env.backup
.env.production
.phpunit.result.cache
Homestead.json
Homestead.yaml
auth.json
npm-debug.log
yarn-error.log
/.fleet
/.idea
/.vscode
composer.lock
composer.json
composer.json
composer.lock
</file>

<file path="app/Console/Commands/DownloadSavDomains.php">
<?php

namespace App\Console\Commands;

use App\Models\Domain;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class DownloadSavDomains extends Command
{
    // Define the signature of the command with an optional dry-run.
    protected $signature = 'domains:download-sav {--dry-run : Run without saving to database}';

    // A short description for the command.
    protected $description = 'Download domains from SAV.com API (updated to use the new response format)';

    // Base URL for the SAV.com API.
    protected $apiUrl = 'https://api.sav.com/domains_api_v1';

    /**
     * Execute the command.
     *
     * ELI15: This function downloads domain information from SAV.com. It checks your API key,
     * sends a request, and processes every domain using the new response format. It logs every step,
     * and if you choose dry-run mode, it will simply simulate adding the domains without saving.
     *
     * @return int
     */
    public function handle()
    {
        // Log the start of the SAV.com domain download process.
        Log::info('Starting SAV.com domains download', [
            'dry_run' => $this->option('dry-run'),
            'environment' => app()->environment()
        ]);

        // Retrieve the SAV.com API key from config or .env.
        $apiKey = config('services.sav_com.api_key') ?: env('SAV_COM_API_KEY');

        // Log API key status (keeping the key secret).
        Log::info('SAV API Key Check', [
            'key_exists' => !empty($apiKey),
            'key_last_4' => !empty($apiKey) ? '****' . substr($apiKey, -4) : 'EMPTY'
        ]);

        // If the API key is missing, log and output an error.
        if (empty($apiKey)) {
            Log::error('SAV.com API credentials missing');
            $this->error('SAV.com API credentials not found. Please check SAV_COM_API_KEY in your .env file.');
            return 1;
        }

        $this->info('Downloading domains from SAV.com...');

        try {
            // Log details about the HTTP request.
            Log::info('Sending request to SAV.com API', [
                'url'    => $this->apiUrl . '/get_active_domains_in_account',
                'header' => 'APIKEY: ****' . substr($apiKey, -4)
            ]);

            // Send a POST request to the API with SSL verification disabled.
            $response = Http::withoutVerifying() // ELI5: We are not checking the website certificate.
                ->withHeaders([
                    'APIKEY' => $apiKey,
                ])
                ->post("{$this->apiUrl}/get_active_domains_in_account", []);

            // If the response is not successful, log the details and abort.
            if (!$response->successful()) {
                $errorDetails = [
                    'status'  => $response->status(),
                    'body'    => $response->body(),
                    'headers' => $response->headers()
                ];
                Log::error('Failed to fetch domains from SAV.com API', $errorDetails);
                $this->error('Failed to fetch domains from SAV.com API');
                $this->error('Status: ' . $response->status());
                $this->error('Response: ' . $response->body());
                return 1;
            }

            // Decode the JSON response.
            $jsonResponse = $response->json();
            Log::info('Complete SAV.com API Response', [
                'response' => $jsonResponse
            ]);

            // Output the API response so we can see it in the console.
            $this->info('Complete API Response:');
            $this->line(json_encode($jsonResponse, JSON_PRETTY_PRINT));

            // Validate that our expected structure exists.
            if (!isset($jsonResponse['response']['domains'])) {
                Log::error('Invalid response structure', ['json' => $jsonResponse]);
                $this->error('Invalid response structure from SAV.com API.');
                return 1;
            }

            // Get the domains list from the new response scheme.
            $domains = $jsonResponse['response']['domains'];
            $totalDomains   = count($domains);
            $newDomains     = 0;
            $skippedDomains = 0;

            Log::info('Processing retrieved domains', [
                'total_domains' => $totalDomains
            ]);

            // Loop through each domain and process it.
            foreach ($domains as $domainData) {
                $this->processDomain($domainData, 'sav.com', $newDomains, $skippedDomains);
            }

            // Prepare and log a final summary message.
            $message = "Process completed. Total domains from SAV.com: {$totalDomains}. New: {$newDomains}, Skipped: {$skippedDomains}";
            Log::info($message);
            $this->info($message);

        } catch (\Exception $e) {
            // Log any exceptions that occur.
            Log::error('Error processing SAV.com domains: ' . $e->getMessage());
            $this->error('Error: ' . $e->getMessage());
            return 1;
        }

        return 0;
    }

    /**
     * Process a single domain record.
     *
     * ELI15: This helper function takes one domain entry, checks if it has a valid name,
     * makes sure it isn't already saved in our database, and then either simulates or saves
     * the domain information using the new field names.
     *
     * @param array  $domainData      The data for the domain from SAV.com.
     * @param string $registrar       The registrar name (here, "sav.com").
     * @param int    &$newDomains     Counter for new domains added.
     * @param int    &$skippedDomains Counter for domains that were skipped.
     */
    private function processDomain(array $domainData, string $registrar, int &$newDomains, int &$skippedDomains): void
    {
        // Grab the domain name using the new key.
        $domainName = $domainData['domain_name'] ?? null;
        if (!$domainName) {
            Log::warning('Domain name missing in domain data', ['data' => $domainData]);
            return;
        }

        // Check if the domain already exists, and skip if true.
        if (Domain::where('domain', $domainName)->exists()) {
            $this->line("Skipping existing domain: {$domainName}");
            Log::info('Skipping existing domain', ['domain' => $domainName]);
            $skippedDomains++;
            return;
        }

        // Convert registration and expiration dates (they are already Unix timestamps as strings).
        $expTimestamp = isset($domainData['date_expiration']) ? (int) $domainData['date_expiration'] : time();
        $regTimestamp = isset($domainData['date_registered']) ? (int) $domainData['date_registered'] : time();

        // Determine the auto-renew flag. "1" means true.
        $autoRenew = isset($domainData['auto_renew_enabled']) && $domainData['auto_renew_enabled'] === "1";

        Log::info('Processing domain', [
            'domain_name'      => $domainName,
            'autoRenew'        => $autoRenew,
            'internal_status'  => $domainData['internal_status'] ?? 'unknown',
            'backend'          => $domainData['backend'] ?? 'unknown'
        ]);

        // Build our nameservers list from separate fields.
        $nameservers = [];
        if (!empty($domainData['ns_1'])) {
            $nameservers[] = $domainData['ns_1'];
        }
        if (!empty($domainData['ns_2'])) {
            $nameservers[] = $domainData['ns_2'];
        }

        // If it's a dry run, just output the details without saving.
        if ($this->option('dry-run')) {
            $this->info("Would add domain: {$domainName}");
            $this->line("  Registration: " . date('Y-m-d', $regTimestamp));
            $this->line("  Expiry: " . date('Y-m-d', $expTimestamp));
            $this->line("  Registrar: sav.com");
            $this->line("  Auto Renew: " . ($autoRenew ? 'Yes' : 'No'));
            $newDomains++;
            return;
        }

        // Save the domain using the new field mapping.
        Domain::create([
            'domain'      => $domainName,
            'exp_date'    => $expTimestamp,
            'reg_date'    => $regTimestamp,
            'registrar'   => $registrar,
            'auto_renew'  => $autoRenew,
            'status'      => $domainData['internal_status'] ?? 'registered',
            'nameservers' => json_encode($nameservers)
        ]);

        Log::info('Added new domain', ['domain' => $domainName]);
        $newDomains++;
    }
}
</file>

<file path="app/Http/Controllers/HomeController.php">
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;

class HomeController extends Controller
{
    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('auth');
    }

    /**
     * Show the application dashboard based on user role.
     *
     * @return \Illuminate\Contracts\Support\Renderable
     */
    public function index()
    {
        // Log dashboard access
        Log::info('Dashboard access', [
            'user_id' => auth()->id(),
            'is_admin' => auth()->user()->is_admin
        ]);

        // Redirect admin users to domains page
        if (auth()->user()->is_admin) {
            return redirect('/domains');
        }

        // Show regular user dashboard
        return view('dashboard.user');
    }
}
</file>

<file path="app/Http/Kernel.php">
<?php

namespace App\Http;

use Illuminate\Foundation\Http\Kernel as HttpKernel;

class Kernel extends HttpKernel
{
    /**
     * The application's global HTTP middleware stack.
     *
     * These middleware are run during every request to your application.
     *
     * @var array<int, class-string|string>
     */
    protected $middleware = [
        // \App\Http\Middleware\TrustHosts::class,
        \App\Http\Middleware\TrustProxies::class,
        \Illuminate\Http\Middleware\HandleCors::class,
        \App\Http\Middleware\PreventRequestsDuringMaintenance::class,
        \Illuminate\Foundation\Http\Middleware\ValidatePostSize::class,
        \App\Http\Middleware\TrimStrings::class,
        \Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull::class,
    ];

    /**
     * The application's route middleware groups.
     *
     * @var array<string, array<int, class-string|string>>
     */
    protected $middlewareGroups = [
        'web' => [
            \App\Http\Middleware\EncryptCookies::class,
            \Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,
            \Illuminate\Session\Middleware\StartSession::class,
            \Illuminate\View\Middleware\ShareErrorsFromSession::class,
            \App\Http\Middleware\VerifyCsrfToken::class,
            \Illuminate\Routing\Middleware\SubstituteBindings::class,
        ],

        'api' => [
            // \Laravel\Sanctum\Http\Middleware\EnsureFrontendRequestsAreStateful::class,
            \Illuminate\Routing\Middleware\ThrottleRequests::class.':api',
            \Illuminate\Routing\Middleware\SubstituteBindings::class,
        ],
    ];

    /**
     * The application's middleware aliases.
     *
     * Aliases may be used instead of class names to conveniently assign middleware to routes and groups.
     *
     * @var array<string, class-string|string>
     */
    protected $middlewareAliases = [
        'auth' => \App\Http\Middleware\Authenticate::class,
        'auth.basic' => \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,
        'auth.session' => \Illuminate\Session\Middleware\AuthenticateSession::class,
        'cache.headers' => \Illuminate\Http\Middleware\SetCacheHeaders::class,
        'can' => \Illuminate\Auth\Middleware\Authorize::class,
        'guest' => \App\Http\Middleware\RedirectIfAuthenticated::class,
        'password.confirm' => \Illuminate\Auth\Middleware\RequirePassword::class,
        'precognitive' => \Illuminate\Foundation\Http\Middleware\HandlePrecognitiveRequests::class,
        'signed' => \App\Http\Middleware\ValidateSignature::class,
        'throttle' => \Illuminate\Routing\Middleware\ThrottleRequests::class,
        'verified' => \Illuminate\Auth\Middleware\EnsureEmailIsVerified::class,
        'admin' => \App\Http\Middleware\AdminMiddleware::class,
    ];
}
</file>

<file path="app/Models/DomainResult.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class DomainResult extends Model
{
    use HasFactory;

    protected $fillable = [
        'uuid',
        'domain',
        'user_id',
        'registrar',
        'expiration_date',
        'days_left',
        'price',
            
    ];

    public function user()
    {
        return $this->belongsTo(User::class);
    }
}
</file>

<file path="app/Models/User.php">
<?php

namespace App\Models;

// use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;

class User extends Authenticatable
{
    use HasApiTokens, HasFactory, Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'name',
        'email',
        'password',
        'is_admin'
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array<int, string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * The attributes that should be cast.
     *
     * @var array<string, string>
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
        'password' => 'hashed',
    ];
}
</file>

<file path="config/app.php">
<?php

use Illuminate\Support\Facades\Facade;
use Illuminate\Support\ServiceProvider;

return [

    /*
    |--------------------------------------------------------------------------
    | Application Name
    |--------------------------------------------------------------------------
    |
    | This value is the name of your application. This value is used when the
    | framework needs to place the application's name in a notification or
    | any other location as required by the application or its packages.
    |
    */

    'name' => env('APP_NAME', 'Laravel'),

    /*
    |--------------------------------------------------------------------------
    | Application Environment
    |--------------------------------------------------------------------------
    |
    | This value determines the "environment" your application is currently
    | running in. This may determine how you prefer to configure various
    | services the application utilizes. Set this in your ".env" file.
    |
    */

    'env' => env('APP_ENV', 'production'),

    /*
    |--------------------------------------------------------------------------
    | Application Debug Mode
    |--------------------------------------------------------------------------
    |
    | When your application is in debug mode, detailed error messages with
    | stack traces will be shown on every error that occurs within your
    | application. If disabled, a simple generic error page is shown.
    |
    */

    'debug' => (bool) env('APP_DEBUG', false),

    /*
    |--------------------------------------------------------------------------
    | Application URL
    |--------------------------------------------------------------------------
    |
    | This URL is used by the console to properly generate URLs when using
    | the Artisan command line tool. You should set this to the root of
    | your application so that it is used when running Artisan tasks.
    |
    */

    'url' => env('APP_URL', 'http://localhost'),

    'asset_url' => env('ASSET_URL'),

    /*
    |--------------------------------------------------------------------------
    | Application Timezone
    |--------------------------------------------------------------------------
    |
    | Here you may specify the default timezone for your application, which
    | will be used by the PHP date and date-time functions. We have gone
    | ahead and set this to a sensible default for you out of the box.
    |
    */

    'timezone' => 'UTC',

    /*
    |--------------------------------------------------------------------------
    | Application Locale Configuration
    |--------------------------------------------------------------------------
    |
    | The application locale determines the default locale that will be used
    | by the translation service provider. You are free to set this value
    | to any of the locales which will be supported by the application.
    |
    */

    'locale' => 'en',

    /*
    |--------------------------------------------------------------------------
    | Application Fallback Locale
    |--------------------------------------------------------------------------
    |
    | The fallback locale determines the locale to use when the current one
    | is not available. You may change the value to correspond to any of
    | the language folders that are provided through your application.
    |
    */

    'fallback_locale' => 'en',

    /*
    |--------------------------------------------------------------------------
    | Faker Locale
    |--------------------------------------------------------------------------
    |
    | This locale will be used by the Faker PHP library when generating fake
    | data for your database seeds. For example, this will be used to get
    | localized telephone numbers, street address information and more.
    |
    */

    'faker_locale' => 'en_US',

    /*
    |--------------------------------------------------------------------------
    | Encryption Key
    |--------------------------------------------------------------------------
    |
    | This key is used by the Illuminate encrypter service and should be set
    | to a random, 32 character string, otherwise these encrypted strings
    | will not be safe. Please do this before deploying an application!
    |
    */

    'key' => env('APP_KEY'),

    'cipher' => 'AES-256-CBC',

    /*
    |--------------------------------------------------------------------------
    | Maintenance Mode Driver
    |--------------------------------------------------------------------------
    |
    | These configuration options determine the driver used to determine and
    | manage Laravel's "maintenance mode" status. The "cache" driver will
    | allow maintenance mode to be controlled across multiple machines.
    |
    | Supported drivers: "file", "cache"
    |
    */

    'maintenance' => [
        'driver' => 'file',
        // 'store' => 'redis',
    ],

    /*
    |--------------------------------------------------------------------------
    | Autoloaded Service Providers
    |--------------------------------------------------------------------------
    |
    | The service providers listed here will be automatically loaded on the
    | request to your application. Feel free to add your own services to
    | this array to grant expanded functionality to your applications.
    |
    */

    'providers' => ServiceProvider::defaultProviders()->merge([
        /*
         * Package Service Providers...
         */

        /*
         * Application Service Providers...
         */
        App\Providers\AppServiceProvider::class,
        App\Providers\AuthServiceProvider::class,
        // App\Providers\BroadcastServiceProvider::class,
        App\Providers\EventServiceProvider::class,
        App\Providers\RouteServiceProvider::class,
        App\Providers\DomainServiceProvider::class,
    ])->toArray(),

    /*
    |--------------------------------------------------------------------------
    | Class Aliases
    |--------------------------------------------------------------------------
    |
    | This array of class aliases will be registered when this application
    | is started. However, feel free to register as many as you wish as
    | the aliases are "lazy" loaded so they don't hinder performance.
    |
    */

    'aliases' => Facade::defaultAliases()->merge([
        // 'Example' => App\Facades\Example::class,
    ])->toArray(),

];
</file>

<file path="database/migrations/2024_03_14_000001_add_fields_to_users_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class AddFieldsToUsersTable extends Migration
{
    /**
     * Add namepros_name, payment_details, and is_admin fields to users table
     * 
     * namepros_name: User's NamePros forum username
     * payment_details: User's payment information in text format
     * is_admin: Boolean flag to identify admin users
     */
    public function up()
    {
        // Log the start of migration
        \Log::info('Starting migration: Adding fields to users table');
        
        Schema::table('users', function (Blueprint $table) {
            // Add NamePros username field
            $table->string('namepros_name')->nullable()->after('name');
            
            // Add payment details field with template support
            $table->text('payment_details')->nullable()->after('namepros_name');
            
            // Add admin flag with false default
            $table->boolean('is_admin')->default(false)->after('payment_details');
        });
        
        // Log completion
        \Log::info('Completed migration: Fields added to users table');
    }

    /**
     * Reverse the migrations
     */
    public function down()
    {
        // Log the start of rollback
        \Log::info('Starting rollback: Removing added fields from users table');
        
        Schema::table('users', function (Blueprint $table) {
            $table->dropColumn([
                'namepros_name',
                'payment_details',
                'is_admin'
            ]);
        });
        
        // Log completion of rollback
        \Log::info('Completed rollback: Fields removed from users table');
    }
}
</file>

<file path="database/migrations/2024_10_18_000000_add_user_id_to_domain_results_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Facades\Log;

class AddUserIdToDomainResultsTable extends Migration
{
    /**
     * Run the migration.
     *
     * @return void
     */
    public function up()
    {
        Log::info('Starting migration: adding user_id to domain_results table');
        
        Schema::table('domain_results', function (Blueprint $table) {
            // Adding nullable user_id column with foreign key constraint
            // It's nullable because unregistered users can get quotations too
            $table->foreignId('user_id')->nullable()->after('domain')->constrained()->onDelete('set null');
            
            Log::info('Added user_id column to domain_results table');
        });
        
        // Count how many existing records will be affected
        $count = DB::table('domain_results')->count();
        Log::info("Migration complete. {$count} existing records now have nullable user_id field");
    }

    /**
     * Reverse the migration.
     *
     * @return void
     */
    public function down()
    {
        Log::info('Rolling back: removing user_id from domain_results table');
        
        Schema::table('domain_results', function (Blueprint $table) {
            // First drop the foreign key constraint
            $table->dropForeign(['user_id']);
            // Then drop the column
            $table->dropColumn('user_id');
            
            Log::info('Removed user_id column from domain_results table');
        });
    }
}
</file>

<file path="database/migrations/2025_03_11_212759_create_quote_payment_records_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Facades\Log;

// Renamed class with a unique suffix to avoid conflicts
class CreateQuotePaymentsTable20250311 extends Migration
{
    /**
     * Run the migration.
     *
     * @return void
     */
    public function up()
    {
        // Log the class name for debugging
        Log::info('Running migration with class: ' . __CLASS__);
        Log::info('Starting migration: creating quote_payments table');
        
        Schema::create('quote_payments', function (Blueprint $table) {
            $table->id();
            $table->uuid('quote_uuid')->index(); // UUID from domain_results
            $table->foreignId('user_id')->nullable()->constrained()->onDelete('set null'); // User who requested the quote
            $table->enum('status', ['pending', 'paid', 'cancelled', 'refunded'])->default('pending');
            $table->decimal('amount', 10, 2)->nullable(); // Total amount paid
            $table->foreignId('processed_by')->nullable()->references('id')->on('users')->onDelete('set null'); // Admin who processed
            $table->text('admin_notes')->nullable(); // Notes from admin
            $table->timestamp('paid_at')->nullable(); // When payment was made
            $table->timestamps(); // created_at and updated_at
            
            // Add a unique constraint on quote_uuid to ensure one payment record per quote
            $table->unique('quote_uuid');
            
            Log::info('Created quote_payments table');
        });
        
        // Add a trigger or logic to automatically create a payment record when domain results are created
        // This could be done in the application code instead
        
        Log::info('Migration complete for quote_payments table');
    }

    /**
     * Reverse the migration.
     *
     * @return void
     */
    public function down()
    {
        Log::info('Rolling back: dropping quote_payments table');
        
        Schema::dropIfExists('quote_payments');
        
        Log::info('Dropped quote_payments table');
    }
}
</file>

<file path="docs/description.md">
# Domain Management System

## User Journey
### Public Access
- View public domain list
  - See domain names
  - View expiration dates
  - Check suggested prices
  - Copy domain names
- Request domain quotes
  - Submit domain list
  - Receive pricing information
  - Get expiration details

### Admin Access
- Authentication
  - Login
  - Logout
  - Password management

- Domain Management
  - View all domains
    - Active domains
    - Sold domains
    - Filter by status
    - Sort by expiration
  - Upload domains
    - Multiple registrar support
    - CSV file upload
    - Bulk import
  - Mark domains as sold
    - Individual marking
    - Bulk marking
    - Status updates
  - Export domains
    - CSV export
    - Filtered exports

- Pricing Management
  - View suggested prices
  - Price calculation rules
    - Premium TLD pricing
    - Regular TLD pricing
    - Expiration-based pricing

## System Events
### Automated Tasks
- Domain Downloads
  - Dynadot integration
  - GoDaddy integration
  - Namecheap integration
  - Name.com integration
  - Porkbun integration
  - Spaceship integration
  - SAV integration

### Data Processing
- CSV Processing
  - File validation
  - Data extraction
  - Error handling
  - Duplicate checking

### Notifications
- Deployment notifications
  - GitHub actions
  - Telegram notifications
- System alerts
  - Error logging
  - Activity logging

### Database Operations
- Domain tracking
  - Creation dates
  - Expiration dates
  - Status updates
- User management
  - Admin accounts
  - Access control

## Technical Infrastructure
### Frontend
- Bootstrap UI
- JavaScript functionality
  - Domain selection
  - Bulk actions
  - Copy functions
- Responsive design

### Backend
- Laravel framework
- Authentication system
- API integrations
- Database management
</file>

<file path="README.md">
# Domain Registrar API Integration

This project supports downloading domain information from various domain registrars using their APIs.

## Supported Registrars

### Dynadot
- API Documentation: https://www.dynadot.com/domain/api3.html
- Capabilities:
  - Download domain list
  - Domain information retrieval

### GOdaddy docs
- API: https://developer.godaddy.com/doc/endpoint/domains#/v1/list


### Other Registrars
- Cosmotown
- GoDaddy
- Namebright
- Namecheap
- Name.com
- Porkbun
- Regery
- SAV
- Spaceship

## Getting Started
1. Obtain API credentials from your registrar
2. Configure your API keys in the settings
3. Use the download command to retrieve your domains


### API DOWNLOAD COMPLETITION STATUS
 -dynadot DONE
 -godaddy DONE
- Cosmotown - no api
- Namebright - requires 100$
- Namecheap DONE
- Name.com DONE
- Porkbun DONE
- Regery - rare
- SAV - whitelist ips 
- Spaceship DONE


### CRONTAB DOWNLOAD ALL REGISTRARS
crontab -e
* * * * * cd /path/to/your/project && php artisan schedule:run >> /dev/null 2>&1
</file>

<file path="resources/views/layouts/app.blade.php">
<!doctype html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- CSRF Token -->
    <meta name="csrf-token" content="{{ csrf_token() }}">

    <title>{{ config('app.name', 'Laravel') }}</title>

    <!-- Fonts -->
    <link rel="dns-prefetch" href="//fonts.bunny.net">
    <link href="https://fonts.bunny.net/css?family=Nunito" rel="stylesheet">

    <!-- Scripts -->
    @vite(['resources/sass/app.scss', 'resources/js/app.js'])

    <!-- Bootstrap CSS and JS -->
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

    <!-- Link to favicon -->
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
    <link rel="manifest" href="/site.webmanifest">
</head>
<body>
    <div id="app">
        <nav class="navbar navbar-expand-md navbar-light bg-white shadow-sm">
            <div class="container">
                <a class="navbar-brand" href="{{ url('/') }}">
                    {{ config('app.name', 'Laravel') }}
                </a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="{{ __('Toggle navigation') }}">
                    <span class="navbar-toggler-icon"></span>
                </button>

                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <!-- Left Side Of Navbar -->
                    <ul class="navbar-nav me-auto">

                    </ul>

                    <!-- Right Side Of Navbar -->
                    <ul class="navbar-nav ms-auto">
                        @guest
                            @if (Route::has('login'))
                                <li class="nav-item">
                                    <a class="nav-link" href="{{ route('login') }}">{{ __('Login') }}</a>
                                </li>
                            @endif

                            @if (Route::has('register'))
                                <li class="nav-item">
                                    <a class="nav-link" href="{{ route('register') }}">{{ __('Register') }}</a>
                                </li>
                            @endif
                        @else
                            @if(auth()->user()->is_admin)
                                <li class="nav-item">
                                    <a class="nav-link" href="{{ route('domains.uploadForm') }}">{{ __('Upload Domains') }}</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" href="{{ route('domains.index') }}">{{ __('Manage Domains') }}</a>
                                </li>
                            @else
                                <li class="nav-item">
                                    <a class="nav-link" href="{{ route('getquote.form') }}">{{ __('Get Quote') }}</a>
                                </li>
                            @endif

                            <li class="nav-item dropdown">
                                <a id="navbarDropdown" class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false" v-pre>
                                    {{ Auth::user()->name }}
                                </a>

                                <div class="dropdown-menu dropdown-menu-end" aria-labelledby="navbarDropdown">
                                    <a class="dropdown-item" href="{{ route('logout') }}"
                                       onclick="event.preventDefault();
                                                     document.getElementById('logout-form').submit();">
                                        {{ __('Logout') }}
                                    </a>

                                    <form id="logout-form" action="{{ route('logout') }}" method="POST" class="d-none">
                                        @csrf
                                    </form>
                                </div>
                            </li>
                        @endguest
                    </ul>
                </div>
            </div>
        </nav>

        <main class="py-4">
            @yield('content')
        </main>
    </div>
</body>
</html>
</file>

<file path=".cursorrules">
use DRY, KISS methodology
Always first explain what you plan to do and then output code.
Leave comments like ELI15, like i am 15yo.
Always use logging and output counters, middle work results - so we always know whats going on
Dont verify ssl with curl

<cursor-tools Integration>
# Instructions
Use the following commands to get AI assistance:

**Web Search:**
`cursor-tools web "<your question>"` - Get answers from the web using Perplexity AI (e.g., `cursor-tools web "latest weather in London"`)
when using web for complex queries suggest writing the output to a file somewhere like local-research/<query summary>.md.

**Repository Context:**
`cursor-tools repo "<your question>"` - Get context-aware answers about this repository using Google Gemini (e.g., `cursor-tools repo "explain authentication flow"`)

**Documentation Generation:**
`cursor-tools doc [options]` - Generate comprehensive documentation for this repository (e.g., `cursor-tools doc --output docs.md`)
when using doc for remote repos suggest writing the output to a file somewhere like local-docs/<repo-name>.md.

**GitHub Information:**
`cursor-tools github pr [number]` - Get the last 10 PRs, or a specific PR by number (e.g., `cursor-tools github pr 123`)
`cursor-tools github issue [number]` - Get the last 10 issues, or a specific issue by number (e.g., `cursor-tools github issue 456`)

**Browser Automation (Stateless):**
`cursor-tools browser open <url> [options]` - Open a URL and capture page content, console logs, and network activity (e.g., `cursor-tools browser open "https://example.com" --html`)
`cursor-tools browser act "<instruction>" --url=<url> [options]` - Execute actions on a webpage using natural language instructions (e.g., `cursor-tools browser act "Click Login" --url=https://example.com`)
`cursor-tools browser observe "<instruction>" --url=<url> [options]` - Observe interactive elements on a webpage and suggest possible actions (e.g., `cursor-tools browser observe "interactive elements" --url=https://example.com`)
`cursor-tools browser extract "<instruction>" --url=<url> [options]` - Extract data from a webpage based on natural language instructions (e.g., `cursor-tools browser extract "product names" --url=https://example.com/products`)

**Notes on Browser Commands:**
- All browser commands are stateless: each command starts with a fresh browser instance and closes it when done.
- When using `--connect-to`, special URL values are supported:
  - `current`: Use the existing page without reloading
  - `reload-current`: Use the existing page and refresh it (useful in development)
- Multi step workflows involving state or combining multiple actions are supported in the `act` command using the pipe (|) separator (e.g., `cursor-tools browser act "Click Login | Type 'user@example.com' into email | Click Submit" --url=https://example.com`)
- Video recording is available for all browser commands using the `--video=<directory>` option. This will save a video of the entire browser interaction at 1280x720 resolution. The video file will be saved in the specified directory with a timestamp.
- DO NOT ask browser act to "wait" for anything, the wait command is currently disabled in Stagehand.

**Tool Recommendations:**
- `cursor-tools web` is best for general web information not specific to the repository.
- `cursor-tools repo` is ideal for repository-specific questions, planning, code review and debugging.
- `cursor-tools doc` generates documentation for local or remote repositories.
- `cursor-tools browser` is useful for testing and debugging web apps.

**Running Commands:**
1. **Installed version:** Use `cursor-tools <command>` (if in PATH) or `npm exec cursor-tools "<command>"`, `yarn cursor-tools "<command>"`, `pnpm cursor-tools "<command>"`.
2. **Without installation:** Use `npx -y cursor-tools@latest "<command>"` or `bunx -y cursor-tools@latest "<command>"`.

**General Command Options (Supported by all commands):**
--model=<model name>: Specify an alternative AI model to use
--max-tokens=<number>: Control response length
--save-to=<file path>: Save command output to a file (in *addition* to displaying it)
--help: View all available options (help is not fully implemented yet)

**Documentation Command Options:**
--from-github=<GitHub username>/<repository name>[@<branch>]: Generate documentation for a remote GitHub repository

**GitHub Command Options:**
--from-github=<GitHub username>/<repository name>[@<branch>]: Access PRs/issues from a specific GitHub repository

**Browser Command Options (for 'open', 'act', 'observe', 'extract'):**
--console: Capture browser console logs (enabled by default, use --no-console to disable)
--html: Capture page HTML content
--network: Capture network activity (enabled by default, use --no-network to disable)
--screenshot=<file path>: Save a screenshot of the page
--timeout=<milliseconds>: Set navigation timeout (default: 30000ms)
--viewport=<width>x<height>: Set viewport size (e.g., 1280x720). When using --connect-to, viewport is only changed if this option is explicitly provided
--headless: Run browser in headless mode (default: true)
--no-headless: Show browser UI (non-headless mode) for debugging
--connect-to=<port>: Connect to existing Chrome instance
--wait=<duration or selector>: Wait after page load (e.g., '5s', '#element-id', 'selector:.my-class')
--video=<directory>: Save a video recording of the browser interaction to the specified directory (1280x720 resolution). Not available when using --connect-to

**Additional Notes:**
- For detailed information, see `node_modules/cursor-tools/README.md` (if installed locally).
- Configuration is in `cursor-tools.config.json` (or `~/.cursor-tools/config.json`).
- API keys are loaded from `.cursor-tools.env` (or `~/.cursor-tools/.env`).
- Browser commands require separate installation of Playwright: `npm install --save-dev playwright` or `npm install -g playwright`.
- **Remember:** You're part of a team of superhuman expert AIs. Work together to solve complex problems.
<!-- cursor-tools-version: 0.5.0 -->
</cursor-tools Integration>
</file>

<file path="app/Console/Kernel.php">
<?php

namespace App\Console;

use Illuminate\Console\Scheduling\Schedule;
use Illuminate\Foundation\Console\Kernel as ConsoleKernel;

class Kernel extends ConsoleKernel
{
    /**
     * Define the application's command schedule.
     */
    protected function schedule(Schedule $schedule): void
    {
        // Run domains:download-all every 3 hours
        $schedule->command('domains:download-all')
                ->everySixHours()
                ->withoutOverlapping() // Prevents running if previous instance is still running
                ->runInBackground()    // Runs in background to prevent blocking
                ->appendOutputTo(storage_path('logs/domains-download-all.log')); // Logs output to file
    }

    /**
     * Register the commands for the application.
     */
    protected function commands(): void
    {
        $this->load(__DIR__.'/Commands');

        require base_path('routes/console.php');
    }

    protected $commands = [
        Commands\DownloadDynadotDomains::class,
    ];
}
</file>

<file path="app/Http/Controllers/UploadController.php">
<?php

// app/Http/Controllers/UploadController.php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Domain;
use Illuminate\Support\Facades\Log;
use League\Csv\Reader;
use League\Csv\Statement;

class UploadController extends Controller
{
    /**
     * Show the form for uploading domains.
     */
    public function showUploadForm()
    {
        return view('upload');
    }

    /**
     * Process the uploaded CSV file and add new domains.
     */
    public function uploadDomains(Request $request)
    {
        // Validate the request input
        $request->validate([
            'registrar' => 'required',
            'file' => 'required|file|mimes:csv,txt',
        ]);

        // Get the registrar and uploaded file from the request
        $registrar = $request->input('registrar');
        $file = $request->file('file');

        // Read the entire file content into an array (each line is an array element)
        $filePath = $file->getRealPath();
        $fileContent = file($filePath);

        // ELI15: Check if the first line has a specific notice text. If so, remove it.
        if (strpos($fileContent[0], 'Please note that renewal prices') !== false) {
            array_shift($fileContent);
        }

        // Convert the filtered array of file lines back into one string for CSV parsing
        $fileContentString = implode("", $fileContent);

        // Load the CSV document from the string content
        $csv = Reader::createFromString($fileContentString);

        // Set CSV delimiter conditionally based on the registrar input value.
        if ($registrar === 'regery') {
            $csv->setDelimiter(';');
        }

        $csv->setHeaderOffset(0); // Tells the library that the first row is the header

        // Log the CSV header info for debugging
        $header = $csv->getHeader();
        Log::info('CSV Header: ' . implode(', ', $header));

        // Create a statement object to process the CSV content
        $stmt = (new Statement());

        // Process the records from the CSV
        $records = $stmt->process($csv);

        // Log how many rows were initially found in the CSV
        Log::info('Initial data count: ' . count($records));

        $newDomainsCount = 0; // Counter for new domains added

        // Process each row from the CSV data
        foreach ($records as $index => $row) {
            // Log a counter for each row being processed
            Log::info("Processing row " . ($index + 1));

            // Parse the row based on registrar and extract domain details
            $domainData = $this->parseRow($registrar, $row);

            // If parsing fails, log a warning and skip this row.
            if (!$domainData) {
                Log::warning('Skipping row due to parsing error: ' . implode(', ', $row));
                continue;
            }

            // Check if the domain already exists in the database.
            if (Domain::where('domain', $domainData['domain'])->exists()) {
                Log::info('Domain already exists: ' . $domainData['domain']);
                continue;
            }

            // Create the new domain record in the database.
            Domain::create($domainData);
            $newDomainsCount++; // Increase our counter for each new domain added
            Log::info('New domain added: ' . $domainData['domain']);
        }

        // Log the total number of newly added domains.
        Log::info('Total new domains added: ' . $newDomainsCount);

        // Redirect back with a success message
        return redirect()->back()->with('success', "Domains uploaded successfully. New domains added: $newDomainsCount. Go <a href='/domains'>here</a> to view them.");
    }

    /**
     * Parse a CSV row based on the registrar type.
     * ELI15: This function picks the right CSV columns based on the registrar to get the domain and the expiration date.
     */
    private function parseRow($registrar, $row)
    {
        switch ($registrar) {
            case 'cosmotown':
                $domain = $row['Domain Name'];
                $expDate = $row['Expiry Date'];
                $expTimestamp = strtotime($expDate);
                break;
            case 'dynadot':
                $domain = $row['Domain'];
                $expDate = $row['Expiration Date'];
                $expTimestamp = $this->parseDynadotDate($expDate);
                break;
            case 'spaceship':
                $domain = $row['Domain'];
                $expDate = $row['Expiration Date'];
                $expTimestamp = strtotime($expDate);
                break;
            case 'namecheap':
                $domain = $row['Domain Name'];
                $expDate = $row['Domain expiration date'];
                $expTimestamp = strtotime($expDate);
                break;
            case 'porkbun':
                $domain = $row['DOMAIN'];
                $expDate = $row['EXPIRE DATE'];
                $expTimestamp = strtotime($expDate);
                break;
            case 'namebright':
                $domain = $row['Domain'];
                $expDate = $row['Expiration Date'];
                $expTimestamp = strtotime($expDate);
                break;
            case 'godaddy':
                $domain = $row['Domain Name'];
                $expDate = $row['Expiration Date'];
                $expTimestamp = strtotime($expDate);
                break;
            case 'sav':
                $domain = $row['domain_name'];
                $expDate = $row['date_expiration'];
                $expTimestamp = strtotime($expDate);
                break;
            case 'regery':
                $domain = $row['Domain name'];
                $expDate = $row['Exp Date'];
                $expTimestamp = strtotime($expDate);
                break;
            case 'namecom': // Handle namecom with updated fields
                $domain = $row['Domain Name'] ?? null;
                $expDate = $row['Expire Date'] ?? null;
                $expTimestamp = $expDate ? strtotime($expDate) : null;
                break;
            case '123reg.co.uk':
                // ELI15: For 123reg.co.uk, we use the same column names as shown in the CSV sample.
                $domain = $row['Domain Name'];
                $expDate = $row['Expiration Date'];
                $expTimestamp = strtotime($expDate);
                break;
            case 'fabulous':
                // ELI15: For fabulous registrar, we extract domain from domain_name column and expiration date from exdate column
                $domain = $row['domain_name'] ?? null;
                $expDate = $row['exdate'] ?? null;
                // ELI15: Log the raw date format to help with debugging
                Log::info('Fabulous raw date format: ' . $expDate);
                $expTimestamp = $expDate ? strtotime($expDate) : null;
                // ELI15: Log the parsed timestamp to verify conversion worked
                Log::info('Fabulous parsed timestamp: ' . ($expTimestamp ? date('Y-m-d H:i:s', $expTimestamp) : 'failed'));
                break;
            default:
                // If registrar doesn't match any case, return null.
                return null;
        }

        // ELI15: Make sure we have a domain and a valid expiration date.
        if (empty($domain)) {
            Log::warning('Parsing error: Domain is missing', ['row' => $row]);
            return null;
        }

        if (empty($expTimestamp)) {
            Log::warning('Parsing error: Expiration date is invalid or missing', ['row' => $row]);
            return null;
        }

        // Return the domain data as an array.
        return [
            'domain'    => $domain,
            'exp_date'  => $expTimestamp,
            'registrar' => $registrar,
        ];
    }

    /**
     * Parse date string for Dynadot registrar.
     * ELI15: This function helps us adjust Dynadot's date format to a standard timestamp.
     */
    private function parseDynadotDate($dateString)
    {
        // Remove the timezone abbreviation if present and add our own timezone.
        $dateString = str_replace(' PST', '', $dateString);
        return strtotime($dateString . ' America/Los_Angeles');
    }
}
</file>

<file path="app/Http/Controllers/UserController.php">
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\User;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Log;

class UserController extends Controller
{
    public function __construct()
    {
        $this->middleware('auth');
    }

    public function dashboard()
    {
        $user = Auth::user();
        Log::info('User accessed dashboard', ['user_id' => $user->id]);
        return view('dashboard.user', compact('user'));
    }

    public function updatePaymentDetails(Request $request)
    {
        $request->validate([
            'payment_details' => 'required|string|max:1000'
        ]);

        $user = Auth::user();
        $user->payment_details = $request->payment_details;
        $user->save();

        Log::info('User updated payment details', ['user_id' => $user->id]);
        return redirect()->back()->with('status', 'Payment details updated successfully!');
    }
}
</file>

<file path="app/Http/Middleware/AdminMiddleware.php">
<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Symfony\Component\HttpKernel\Exception\HttpException;

class AdminMiddleware
{
    public function handle(Request $request, Closure $next)
    {
        // Log the attempt to access admin route
        Log::info('Admin route access attempt', [
            'user_id' => auth()->id(),
            'route' => $request->path()
        ]);

        // Check if user is logged in and is admin
        if (auth()->check() && auth()->user()->is_admin) {
            return $next($request);
        }

        // Log unauthorized attempt
        Log::warning('Unauthorized admin access attempt', [
            'user_id' => auth()->id(),
            'route' => $request->path()
        ]);

        // Return 403 response instead of redirecting
        if ($request->expectsJson()) {
            // For API requests
            return response()->json(['message' => 'Unauthorized access. Admin privileges required.'], 403);
        }

        // For web requests - you can either:
        // Option 1: Throw a 403 exception that will be rendered by Laravel
        abort(403, 'Unauthorized access. Admin privileges required.');
        
        // Option 2: Or redirect to a custom error page
        // return response()->view('errors.403', [], 403);
    }
}
</file>

<file path="resources/views/dashboard/user.blade.php">
@extends('layouts.app')

@section('content')
<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">{{ __('Dashboard') }}</div>

                <div class="card-body">
                    @if (session('status'))
                        <div class="alert alert-success" role="alert">
                            {{ session('status') }}
                        </div>
                    @endif

                    <h2 class="mb-4">Welcome, {{ auth()->user()->name }}!</h2>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="card mb-4">
                                <div class="card-body text-center">
                                    <h5 class="card-title">Get Quote for Domain</h5>
                                    <p class="card-text">Request pricing for your desired domain.</p>
                                    <a href="{{ route('getquote.form') }}" class="btn btn-primary">
                                        Get Quote
                                    </a>
                                </div>
                            </div>
                        </div>

                        <div class="col-md-12">
                            <div class="card">
                                <div class="card-header">
                                    Payment Details
                                </div>
                                <div class="card-body">
                                    <form method="POST" action="{{ route('user.payment.update') }}">
                                        @csrf
                                        <div class="form-group">
                                            <label for="payment_details">Your Payment Information</label>
                                            <textarea 
                                                class="form-control @error('payment_details') is-invalid @enderror" 
                                                id="payment_details" 
                                                name="payment_details" 
                                                rows="4" 
                                                placeholder="Enter your payment details (PayPal email, crypto wallet, etc.)"
                                            >{{ old('payment_details', auth()->user()->payment_details) }}</textarea>
                                            @error('payment_details')
                                                <span class="invalid-feedback" role="alert">
                                                    <strong>{{ $message }}</strong>
                                                </span>
                                            @enderror
                                        </div>
                                        <button type="submit" class="btn btn-primary mt-3">
                                            Save Payment Details
                                        </button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@endsection
</file>

<file path="resources/views/upload.blade.php">
<!-- resources/views/upload.blade.php -->

@extends('layouts.app')

@section('content')
<div class="container">
    <h2>Upload Domains | <a href="/domains">View Domains</a></h2> 

    @if(session('success'))
    <div class="alert alert-success">{!! session('success') !!}</div>
    @endif
    <form action="{{ route('domains.upload') }}" method="POST" enctype="multipart/form-data" id="upload-form">
        @csrf
        <div class="form-group">
            <label for="registrar">Registrar</label>
            <select name="registrar" id="registrar" class="form-control" required>
                <option value="">Select Registrar</option>
                <option value="cosmotown">Cosmotown</option>
                <option value="dynadot">Dynadot</option>
                <option value="spaceship">Spaceship</option>
                <option value="namecheap">Namecheap</option>
                <option value="porkbun">Porkbun</option>
                <option value="namebright">Namebright</option>
                <option value="godaddy">GoDaddy</option>
                <option value="sav">SAV</option>
                <option value="regery">Regery</option>
                <option value="namecom">Name.com</option>
                <option value="123reg.co.uk">123reg.co.uk</option>
                <option value="fabulous">Fabulous</option>
            </select>
        </div>
        <div class="form-group">
            <label for="file">CSV File</label>
            <div id="drop-area" class="form-control-file">
                <p>Drag & Drop your file here or click to select</p>
                <input type="file" name="file" id="file" class="form-control-file" style="display: none;">
            </div>
        </div>
        <button type="submit" class="btn btn-primary">Upload</button>
    </form>
</div>

<script>
document.addEventListener('DOMContentLoaded', function () {
    console.info('Upload form initialized, ready for file drop.');

    let dropArea = document.getElementById('drop-area');
    let fileInput = document.getElementById('file');
    let dropCounter = 0;

    dropArea.addEventListener('dragover', (event) => {
        event.preventDefault();
        dropArea.classList.add('dragging');
        console.info('File dragged over drop area.');
    });

    dropArea.addEventListener('dragleave', () => {
        dropArea.classList.remove('dragging');
        console.info('File left the drop area.');
    });

    dropArea.addEventListener('drop', (event) => {
        event.preventDefault();
        dropArea.classList.remove('dragging');
        dropCounter++;
        console.info('File dropped into drop area. Drop count: ' + dropCounter);

        fileInput.files = event.dataTransfer.files;
        if (fileInput.files.length > 0) {
            console.info('File selected: ' + fileInput.files[0].name);
            dropArea.querySelector('p').textContent = fileInput.files[0].name;
        }
    });

    dropArea.addEventListener('click', () => {
        console.info('Drop area clicked. Opening file dialog.');
        fileInput.click();
    });

    fileInput.addEventListener('change', () => {
        if (fileInput.files.length > 0) {
            console.info('File selected via dialog: ' + fileInput.files[0].name);
            dropArea.querySelector('p').textContent = fileInput.files[0].name;
        }
    });
});
</script>

<style>
#drop-area {
    border: 2px dashed #007bff;
    padding: 20px;
    text-align: center;
    cursor: pointer;
}
#drop-area.dragging {
    background-color: #e9ecef;
}
</style>
@endsection
</file>

<file path="app/Console/Commands/DownloadAllDomains.php">
<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Artisan;
use Symfony\Component\Finder\Finder;

class DownloadAllDomains extends Command
{
    // Hey! This command will run all Download* commands in the app/Console/Commands directory
    protected $signature = 'domains:download-all';
    protected $description = 'Run all domain download commands';

    public function handle()
    {
        // Start logging our journey!
        Log::info('Starting to run all domain download commands');
        
        // Find all Download* commands in the Commands directory
        $finder = new Finder();
        $finder->files()
               ->in(app_path('Console/Commands'))
               ->name('Download*.php');
        
        // Initialize our counters and collectors
        $totalCommands = 0;
        $successfulCommands = 0;
        $failedCommands = [];
        $commandOutputs = []; // New array to store all outputs
        $processCompletedLines = []; // Initialize collector for Process completed lines
        
        $this->info('Searching for download commands...');
        
        $commands = [];
        foreach ($finder as $file) {
            // Get command name from filename (remove .php and convert to kebab-case)
            $className = $file->getBasename('.php');
            // Skip ourselves to avoid infinite loop
            if ($className === 'DownloadAllDomains') {
                continue;
            }
            
            // Convert DownloadSpaceshipDomains to domains:download-spaceship
            $commandName = 'domains:download-' . strtolower(preg_replace(
                ['/([a-z])([A-Z])/', '/^Download/', '/Domains$/', '/-$/'],
                ['$1-$2', '', '', ''],
                $className
            ));
            
            // Clean up any double hyphens and trailing hyphens
            $commandName = rtrim(str_replace('--', '-', $commandName), '-');
            
            $commands[] = $commandName;
            $totalCommands++;
        }
        
        if ($totalCommands === 0) {
            $message = 'No download commands found!';
            Log::warning($message);
            $this->warn($message);
            return 1;
        }
        
        $this->info("Found {$totalCommands} download commands to execute");
        
        // Run each command and collect output
        foreach ($commands as $index => $command) {
            $commandNumber = $index + 1;
            Log::info("Executing command {$commandNumber}/{$totalCommands}: {$command}");
            $this->info("\n[{$commandNumber}/{$totalCommands}] Running {$command}...");
            
            try {
                // Run the command and capture its exit code
                $startTime = microtime(true);
                $exitCode = Artisan::call($command);
                $executionTime = round(microtime(true) - $startTime, 2);
                
                // Get the output from the command
                $output = trim(Artisan::output());
                
                // Extract "Process completed" line if exists
                if (preg_match('/Process completed.*$/m', $output, $matches)) {
                    // Add command name before the Process completed line
                    $processCompletedLines[] = "[{$command}] " . $matches[0];
                }
                
                // Store the command results
                $commandOutputs[$command] = [
                    'status' => $exitCode === 0 ? 'SUCCESS' : 'FAILED',
                    'execution_time' => $executionTime,
                    'output' => $output,
                    'exit_code' => $exitCode
                ];
                
                if ($exitCode === 0) {
                    $successfulCommands++;
                    Log::info("Successfully executed {$command} in {$executionTime}s");
                } else {
                    $failedCommands[] = $command;
                    Log::error("Command {$command} failed with exit code {$exitCode} after {$executionTime}s");
                    Log::error("Output: {$output}");
                }
                
            } catch (\Exception $e) {
                $failedCommands[] = $command;
                $commandOutputs[$command] = [
                    'status' => 'ERROR',
                    'execution_time' => 0,
                    'output' => $e->getMessage(),
                    'exit_code' => -1
                ];
                Log::error("Exception running {$command}: " . $e->getMessage());
            }
        }
        
        // Display detailed summary
        $this->newLine(2);
        $this->info('=== EXECUTION SUMMARY ===');
        foreach ($commandOutputs as $command => $result) {
            $this->info("\n🔹 {$command}");
            $this->info("Status: {$result['status']}");
            $this->info("Time: {$result['execution_time']}s");
            $this->info("Exit Code: {$result['exit_code']}");
            $this->info("Output:");
            $this->line($result['output']);
            $this->line(str_repeat('-', 50));
        }
        
        // Show final statistics
        $message = sprintf(
            "\n📊 FINAL STATISTICS:\n" .
            "Total commands: %d\n" .
            "Successful: %d\n" .
            "Failed: %d",
            $totalCommands,
            $successfulCommands,
            count($failedCommands)
        );
        
        Log::info($message);
        $this->info($message);
        
        if (!empty($failedCommands)) {
            $this->error("❌ Failed commands: " . implode(', ', $failedCommands));
        }
        
        // Send Process completed lines to Telegram if we have any
        if (!empty($processCompletedLines)) {
            $telegramMessage = "Domain Download Summary:\n\n" . implode("\n", $processCompletedLines);
            
            // Initialize cURL
            $curl = curl_init();
            
            // Set cURL options
            curl_setopt_array($curl, [
                CURLOPT_URL => 'https://api.telegram.org/bot1790397670:AAFsAoJ5Qju9V4phdq5cflhJF938uS7t2QI/sendMessage',
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_POST => true,
                CURLOPT_SSL_VERIFYPEER => false, // As per your requirements to not verify SSL
                CURLOPT_POSTFIELDS => [
                    'chat_id' => '-4188687896',
                    'text' => $telegramMessage
                ]
            ]);
            
            // Execute the request
            $response = curl_exec($curl);
            $httpCode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
            
            // Check for errors
            if ($response === false || $httpCode !== 200) {
                $error = curl_error($curl);
                Log::error('Failed to send message to Telegram: ' . $error);
                $this->error('Failed to send message to Telegram: ' . $error);
            } else {
                Log::info('Successfully sent summary to Telegram');
                $this->info('Successfully sent summary to Telegram');
            }
            
            // Close cURL session
            curl_close($curl);
        }
        
        return count($failedCommands) === 0 ? 0 : 1;
    }
}
</file>

<file path="app/Providers/DomainServiceProvider.php">
<?php

namespace App\Providers;

use Illuminate\Support\ServiceProvider;
use App\Services\WhoisService;
use App\Services\PricingService;
use App\Services\DomainService;
use App\Services\ProxyService;
use Illuminate\Support\Facades\Log;
use App\Services\SocksProxyLoader;

class DomainServiceProvider extends ServiceProvider
{
    public function register()
    {
        // First register ProxyService (it has default parameters so can be instantiated without arguments)
        $this->app->singleton(ProxyService::class, function ($app) {
            Log::info("Registering ProxyService in container");
            return new ProxyService();
        });

        // Then register WhoisService which depends on ProxyService
        $this->app->singleton(WhoisService::class, function ($app) {
            Log::info("Registering WhoisService in container");
            // Get the ProxyService from the container
            $proxyService = $app->make(ProxyService::class);
            return new WhoisService($app->make(SocksProxyLoader::class));
        });

        $this->app->singleton(PricingService::class, function ($app) {
            return new PricingService();
        });

        $this->app->singleton(DomainService::class, function ($app) {
            return new DomainService(
                $app->make(WhoisService::class),
                $app->make(PricingService::class)
            );
        });

        $this->app->singleton(SocksProxyLoader::class, function ($app) {
            return new SocksProxyLoader();
        });
    }
}
</file>

<file path="app/Services/DomainService.php">
<?php

namespace App\Services;

use App\Models\DomainResult;
use Carbon\Carbon;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\Log;

class DomainService
{
    private $whoisService;
    private $pricingService;

    public function __construct(WhoisService $whoisService, PricingService $pricingService)
    {
        $this->whoisService = $whoisService;
        $this->pricingService = $pricingService;
    }

    /**
     * Process a list of domains and store results
     *
     * @param array $domains
     * @param string $uuid
     * @param int|null $userId
     * @return array
     */
    public function processDomains(array $domains, string $uuid, ?int $userId = null)
    {
        // Log the number of domains being processed and user info
        Log::info("Processing " . count($domains) . " domains with UUID: {$uuid}" . 
                  ($userId ? " for user ID: {$userId}" : " for guest user"));
        
        $results = [];
        $totalPrice = 0;
        
        // Process each domain...
        foreach ($domains as $domain) {
            if (!$this->isValidDomain($domain)) {
                $results[] = [
                    'domain' => $domain,
                    'error' => 'Invalid domain format.',
                ];
                continue;
            }

            $domainInfo = $this->processSingleDomain($domain, $uuid);
            
            if (isset($domainInfo['error'])) {
                $results[] = $domainInfo;
                continue;
            }

            $totalPrice += floatval($domainInfo['price']);
            $results[] = $domainInfo;

            // When saving to the database, include the user_id
            DomainResult::create([
                'uuid' => $uuid,
                'domain' => $domain,
                'user_id' => $userId, // Store the user ID (null for guests)
                'expiration_date' => $domainInfo['expiration_date'],
                'days_left' => $domainInfo['days_left'],
                'price' => $domainInfo['price'],
                'registrar' => $domainInfo['registrar'],
                'newReg' => $domainInfo['newReg'],
            ]);
        }
        
        // Return results...
        return [
            'results' => $results,
            'total_price' => number_format($totalPrice, 2)
        ];
    }

    // ELI15: Process a single domain and return its information
    private function processSingleDomain(string $domain, string $uuid): array
    {
        $whoisData = $this->whoisService->fetchWhoisData($domain);

        if (!$whoisData) {
            return [
                'domain' => $domain,
                'error' => 'Unable to retrieve WHOIS data.',
            ];
        }

        $expirationDate = Carbon::parse($whoisData['expiration_date']);
        $daysLeft = Carbon::today()->diffInDays($expirationDate, false);
        $tld = strtolower(substr(strrchr($domain, '.'), 1));
        
        $calculatedPrice = $this->pricingService->calculatePrice($tld, $daysLeft);
        $registrationPrice = $this->pricingService->getRegistrationPrice($tld);

        return [
            'domain' => $domain,
            'expiration_date' => $expirationDate->toDateString(),
            'days_left' => $daysLeft >= 0 ? $daysLeft : 0,
            'price' => number_format($calculatedPrice, 2),
            'registrar' => $whoisData['registrar'],
            'newReg' => number_format($registrationPrice, 2),
        ];
    }

    private function isValidDomain(string $domain): bool
    {
        return filter_var('http://' . $domain, FILTER_VALIDATE_URL) !== false;
    }
}
</file>

<file path="docs/tasks.md">
# Domain Management System Tasks

## 1. User Registration Enhancement
### Database Changes
- [x] Add new fields to users table:
  - `namepros_name` (string)
  - `payment_details` (text)
  - `is_admin` (boolean, default: false)

### Implementation Tasks
- [x] Create migration for new user fields
- [x] Update User model with new fillable fields
- [x] Modify registration form to include new fields
- [ ] Add payment details template validation
- [x] Enable user registration in `routes/web.php`
- [x] Implement payment details editing in user dashboard
  - [x] Create UserController with payment management
  - [x] Add payment details form to dashboard
  - [x] Implement update functionality
  - [x] Add success messages and validation

## 2. Quote System Access
### Current Status
- [x] Unregistered users can access quote functionality
- [x] Quote system working via `GetQuoteController`

### Required Changes
- [x] Add middleware to ensure quote routes remain public
- [x] Add user authentication check in quote views

## 3. Domain Check Results Submission
### Database Changes
- Create new table for check submissions:

```sql
CREATE TABLE domain_check_submissions (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    user_id BIGINT,
    uuid VARCHAR(36),
    status ENUM('pending', 'verified', 'paid'),
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (uuid) REFERENCES domain_results(uuid)
);
```

### Implementation Tasks
- [ ] Create migration for submissions table
- [ ] Create SubmissionController
- [ ] Add submission functionality to quote results
- [ ] Create submission listing view for users
- [ ] Add notification system for new submissions

## 4. Domain Push Verification
### Implementation Tasks
- [ ] Create verification service
- [ ] Add automated check against domains table
- [ ] Implement verification status tracking
- [ ] Add verification results to submission details

## 5. Admin Order Management
### Implementation Tasks
- [ ] Create admin orders dashboard
- [ ] Add filters for:
  - All orders
  - Submitted for payout
  - Verification status
  - Payment status
- [ ] Implement order status management
- [ ] Add order details view

## 6. Order Fulfillment Tracking
### Database Changes
- Add tracking fields to submissions table:
```sql
ALTER TABLE domain_check_submissions 
ADD COLUMN total_domains INT,
ADD COLUMN verified_domains INT,
ADD COLUMN fulfillment_percentage DECIMAL(5,2);
```

### Implementation Tasks
- [ ] Create fulfillment calculation service
- [ ] Add fulfillment status to admin dashboard
- [ ] Implement domain-by-domain verification tracking
- [ ] Add fulfillment reporting

## 7. Payment Management
### Implementation Tasks
- [ ] Add payment status tracking
- [ ] Create payment marking interface for admin
- [ ] Implement payment history
- [ ] Add payment notifications
- [ ] Create payment reports

## Technical Requirements
- Laravel 10.x
- MySQL/MariaDB
- Authentication system
- Admin middleware
- API integrations with registrars

## Security Considerations
- Validate all user inputs
- Implement rate limiting
- Secure admin routes
- Protect payment information
- Audit logging for critical actions

## Integration Points
- Existing domain management system
- Current quote system
- Registrar APIs
- User authentication system
</file>

<file path="app/Services/PricingService.php">
<?php

namespace App\Services;

use Illuminate\Support\Facades\Log;

/**
 * PricingService - Domain Pricing Calculator
 * 
 * PRICING ALGORITHM EXPLANATION:
 * 
 * 1. INPUTS:
 *    - TLD (Top Level Domain): like 'com', 'net', 'org', etc.
 *    - Days Left: number of days until domain expires
 * 
 * 2. SPECIAL CASE:
 *    - If domain is expiring soon (15 days or less) → Price = $0
 * 
 * 3. BASE PRICE CALCULATION:
 *    - 15-30 days left → $1.50
 *    - 31-90 days left → $3.00
 *    - 91+ days left → $3.50
 * 
 * 4. PREMIUM vs NON-PREMIUM ADJUSTMENT:
 *    - Premium TLDs ('com', 'net', 'org'):
 *      → Final price = Base price (no discount)
 *    - Non-premium TLDs (all others):
 *      → Max allowed price = Lower of (50% of base price OR 50% of registration price)
 *      → Final price = Lower of (base price OR max allowed price)
 * 
 * 5. REGISTRATION PRICE:
 *    - Used in price calculation for non-premium TLDs
 *    - Pulled from JSON data
 * 
 * ELI15: This service figures out how much to charge for domains based on:
 * - How soon the domain expires (cheaper if expiring soon)
 * - How popular the domain type is (com/net/org cost more than others)
 * - Free if about to expire in 15 days or less
 * - For less popular domains, we use the lower of half the base price or half the registration price
 */
class PricingService
{
    private $jsonData;
    private $premiumTlds = ['com', 'net', 'org'];

    // ELI15: Load pricing data when service is created
    public function __construct()
    {
        $jsonPath = env('DOMAIN_PRICES_JSON_PATH', 'storage/app/namecheap.json');
        Log::debug("Loading domain prices from: {$jsonPath}");
        $this->jsonData = json_decode(file_get_contents(base_path($jsonPath)), true);
    }

    // ELI15: Calculate price based on TLD and days until expiration
    public function calculatePrice(string $tld, int $daysLeft): float
    {
        $registrationPrice = $this->getRegistrationPrice($tld);
        
        Log::info("Calculating price for TLD: {$tld}, Days left: {$daysLeft}, Registration price: {$registrationPrice}");

        if ($daysLeft <= 15) {
            Log::info("Domain expiring soon (<= 15 days), price set to 0");
            return 0.0;
        }

        $basePrice = $this->getBasePrice($daysLeft);
        $isPremium = in_array($tld, $this->premiumTlds);

        if (!$isPremium) {
            // ELI15: For non-premium domains, take the lower of half base price or half registration price
            $halfBasePrice = $basePrice * 0.5;
            $halfRegPrice = $registrationPrice * 0.5;
            $maxAllowedPrice = min($halfBasePrice, $halfRegPrice);
            
            // ELI15: Final price is the lower of base price or max allowed price
            $finalPrice = min($basePrice, $maxAllowedPrice);
            
            Log::info("Non-premium TLD calculation - Base price: {$basePrice}, Half base price: {$halfBasePrice}, Half reg price: {$halfRegPrice}, Max allowed: {$maxAllowedPrice}, Final: {$finalPrice}");
            
            return $finalPrice;
        }

        Log::info("Premium TLD calculation - Final price: {$basePrice}");
        return $basePrice;
    }

    // ELI15: Get the registration price for a specific TLD
    public function getRegistrationPrice(string $tld): float
    {
        foreach ($this->jsonData as $entry) {
            if ($entry['Tld'] === $tld) {
                return $entry['Register']['Price'];
            }
        }
        Log::warning("No registration price found for TLD: {$tld}");
        return 0.0;
    }

    private function getBasePrice(int $daysLeft): float
    {
        if ($daysLeft >= 15 && $daysLeft < 31) {
            return 1.5;
        } elseif ($daysLeft > 30 && $daysLeft < 91) {
            return 3.0;
        } else {
            return 3.5;
        }
    }
}
</file>

<file path="app/Services/WhoisService.php">
<?php

namespace App\Services;

use Iodev\Whois\Factory;
use Carbon\Carbon;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Log;
use Exception;
use App\Services\SocksProxyLoader;

class WhoisService
{
    private $loader;
    private $counter = 0;
    private $cacheEnabled = true;
    private $cacheTtl = 8640000; // 100 days (was 86400 - 24 hours)

    /**
     * Create a new WHOIS service instance.
     * 
     * @param SocksProxyLoader|null $loader
     */
    public function __construct(SocksProxyLoader $loader = null)
    {
        Log::info("WhoisService initializing");
        
        // Set up our loader with proxy support
        $this->loader = $loader ?? new SocksProxyLoader();
        
        Log::info("WhoisService initialized with SocksProxyLoader");
    }

    /**
     * Get WHOIS information for a domain using a SOCKS5 proxy
     * 
     * @param string $domain Domain name to query
     * @return array WHOIS information
     * @throws \Exception If the WHOIS query fails after retries
     */
    public function getDomainInfo(string $domain): array
    {
        $this->counter++;
        Log::info("Processing domain #{$this->counter}: {$domain}");
        
        // Check cache first to reduce proxy usage
        $cacheKey = "whois_data_" . md5($domain);
        if ($this->cacheEnabled && Cache::has($cacheKey)) {
            $cachedData = Cache::get($cacheKey);
            Log::info("Using cached WHOIS data for {$domain}");
            return $cachedData;
        }
        
        try {
            // Create a Whois instance with our custom loader that already has retry capability
            $factory = new Factory();
            $whois = $factory->createWhois($this->loader);
            
            // Get the WHOIS info - loader will handle retries automatically
            Log::info("Sending WHOIS request for {$domain} via proxy");
            $info = $whois->loadDomainInfo($domain);
            
            if (!$info) {
                Log::warning("No WHOIS information found for {$domain}");
                return [
                    'domain' => $domain,
                    'registrar' => 'Unknown',
                    'expiration_date' => null,
                    'days_left' => null,
                    'error' => 'No WHOIS information found'
                ];
            }
            
            // Process the information
            $expirationDate = $info->expirationDate;
            $registrar = $info->registrar;
            
            Log::info("WHOIS request successful for {$domain}. Registrar: {$registrar}");
            
            // Calculate days left if expiration date exists
            $daysLeft = null;
            if ($expirationDate) {
                $expDate = new \DateTime("@{$expirationDate}");
                $now = new \DateTime();
                $daysLeft = $now->diff($expDate)->days;
            }
            
            $result = [
                'domain' => $domain,
                'registrar' => $registrar ?? 'Unknown',
                'expiration_date' => $expirationDate ? date('Y-m-d', $expirationDate) : null,
                'days_left' => $daysLeft,
            ];
            
            // Cache the result
            if ($this->cacheEnabled) {
                Cache::put($cacheKey, $result, $this->cacheTtl);
                Log::info("Cached WHOIS data for {$domain}");
            }
            
            return $result;
        } catch (\Iodev\Whois\Exceptions\ConnectionException $e) {
            // ELI15: If we couldn't connect to the WHOIS server for this domain after trying a few times...
            Log::warning("WHOIS connection failed for {$domain} after retries: " . $e->getMessage());
            // ...just mark it as an error and return default info so we can continue with others.
            return [
                'domain' => $domain,
                'registrar' => 'Unknown',
                'expiration_date' => null,
                'days_left' => null,
                'error' => 'WHOIS server connection failed.'
            ];
        } catch (Exception $e) {
            // ELI15: If some other unexpected error happened during WHOIS lookup...
            Log::error("Unexpected error querying WHOIS for {$domain}: " . $e->getMessage());
            // ...log it and return an error structure. This prevents the whole process from crashing.
            return [
                'domain' => $domain,
                'registrar' => 'Error',
                'expiration_date' => null,
                'days_left' => null,
                'error' => 'Unexpected WHOIS error: ' . $e->getMessage()
            ];
        }
    }
    
    /**
     * Alias for getDomainInfo to match what DomainService expects
     * 
     * @param string $domain Domain name to query
     * @return array WHOIS information
     */
    public function fetchWhoisData(string $domain): array
    {
        return $this->getDomainInfo($domain);
    }
    
    /**
     * Process multiple domains in batch with proxy and retry logic
     * 
     * @param array $domains List of domain names
     * @return array Results for each domain
     */
    public function processDomainsBatch(array $domains): array
    {
        $results = [];
        $processedCount = 0;
        $totalDomains = count($domains);
        
        Log::info("Starting batch processing of {$totalDomains} domains with proxy");
        
        foreach ($domains as $domain) {
            $processedCount++;
            Log::info("Processing domain {$processedCount}/{$totalDomains}: {$domain}");
            
            try {
                $results[] = $this->getDomainInfo($domain);
            } catch (Exception $e) {
                // If all retries failed, add error result
                $results[] = [
                    'domain' => $domain,
                    'registrar' => 'Error',
                    'expiration_date' => null,
                    'days_left' => null,
                    'error' => $e->getMessage()
                ];
            }
            
            // Add a small delay between requests to reduce stress on proxy
            usleep(mt_rand(100, 300) * 1000); // 100-300ms random delay
        }
        
        Log::info("Completed batch processing of {$totalDomains} domains");
        return $results;
    }
    
    /**
     * Enable or disable caching
     * 
     * @param bool $enabled
     * @return $this
     */
    public function setCaching(bool $enabled)
    {
        $this->cacheEnabled = $enabled;
        return $this;
    }
    
    /**
     * Set cache time-to-live in seconds
     * 
     * @param int $seconds
     * @return $this
     */
    public function setCacheTtl(int $seconds)
    {
        $this->cacheTtl = $seconds;
        return $this;
    }
}
</file>

<file path="resources/views/getquote.blade.php">
@extends('layouts.app')

@section('content')
<div class="container">
    <h2><a href="{{ url()->current() }}" class="text-decoration-none">Get Domain Price Quotes</a></h2> <!-- Make heading a link -->
    <form id="quote-form">
        @csrf
        <div class="form-group">
            <label for="domains">Enter Domain Names (one per line):</label>
            <textarea class="form-control" id="domains" name="domains" rows="10" placeholder="example.com
example.net
example.org">
@foreach($results as $result)
{{ $result->domain }}
@if(!$loop->last)
@endif
@endforeach
</textarea>
        </div>
        <button type="button" class="btn btn-secondary mt-3" id="clean-button">Clean</button>
        <button type="submit" class="btn btn-primary mt-3" id="send-button">Get Price Quote for my Domains</button>
        <button type="button" class="btn btn-success mt-3" id="download-csv-button">Download CSV</button>
    </form>

    <!-- Pricing Algorithm Explanation - Now only in one place -->
    <div class="alert alert-info mb-3 mt-3">
        <h5>How We Calculate Prices:</h5>
        <ul>
            <li>Domains expiring in 15 days or less: <strong>$0</strong></li>
            <li>Domains with 15-30 days left: <strong>$1.50</strong></li>
            <li>Domains with 31-90 days left: <strong>$3.00</strong></li>
            <li>Domains with 91+ days left: <strong>$3.50</strong></li>
            <li>Non-premium TLDs (other than .com, .net, .org) receive a 50% discount OR half of registration price, whichever is less</li>
        </ul>
    </div>

    <div id="results" class="mt-5">
        @if($results->isNotEmpty())
            <h3>Previous Price Quotes:</h3>
            
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Domain</th>
                        <th>Registrar</th>
                        <th>New Registration</th>
                        <th>Expiration Date</th>
                        <th>Days Left</th>
                        <th>Price</th>
                        <th>In System</th>
                    </tr>
                </thead>
                <tbody>
                    @forelse($results as $result)
                        <tr>
                            <td>{{ $result->domain }}</td>
                            <td>{{ $result->registrar }}</td>
                            <td>${{ $result->newReg }}</td>
                            <td>{{ $result->expiration_date }}</td>
                            <td>{{ $result->days_left }}</td>
                            <td>${{ number_format($result->price, 2) }}</td>
                            <td class="text-center">
                                @if(isset($result->push_status) && $result->push_status)
                                    <span style="color: green; font-size: 1.2em;">✓</span>
                                @else
                                    <span style="color: #999;">-</span>
                                @endif
                            </td>
                        </tr>
                    @empty
                        <tr>
                            <td colspan="7" class="text-center">No domains to display</td>
                        </tr>
                    @endforelse
                </tbody>
                <tfoot>
                    <tr>
                        <td colspan="5" class="text-right"><strong>Total:</strong></td>
                        <td><strong>${{ $total_price }}</strong></td>
                        <td></td>
                    </tr>
                </tfoot>
            </table>

            @if($processed_count > 0)
                <div class="alert alert-info">
                    <p>Processed {{ $processed_count }} domains. 
                    @if($results->where('push_status', '✓')->count() > 0)
                        {{ $results->where('push_status', '✓')->count() }} domains are already in the system.
                    @endif
                    </p>
                </div>
            @endif

            @if($created_at)
                <p>Results cached on: {{ $created_at }}</p>
            @endif
        @endif
    </div>
</div>

<script>
function copyToClipboard(text) {
    navigator.clipboard.writeText(text).then(() => {
        const messageSpan = document.getElementById('copy-message');
        messageSpan.style.display = 'inline'; // Show the message
        setTimeout(() => {
            messageSpan.style.display = 'none'; // Hide the message after 2 seconds
        }, 2000);
    }).catch(err => {
        console.error('Could not copy text: ', err);
    });
}

document.getElementById('clean-button').addEventListener('click', function() {
    // Parse the input to extract domain names using a refined regular expression
    const rawInput = document.getElementById('domains').value;
    const domainRegex = /^[a-z0-9-]+\.[a-z]{2,}(?:\.[a-z]{2,})?/gim; // Matches domain names with extensions
    const domains = Array.from(rawInput.matchAll(domainRegex), match => match[0]).join('\n');
    document.getElementById('domains').value = domains;
});

document.getElementById('quote-form').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const domains = document.getElementById('domains').value;
    const resultsDiv = document.getElementById('results');
    let secondsElapsed = 0;
    const quotes = [
        "Hey, your list is long, wait for more!",
        "Patience is a virtue, especially with long lists!",
        "Good things come to those who wait!",
        "Almost there, hang tight!",
        "Your patience will be rewarded soon!",
        "Just a little longer, we promise!",
        "Great things take time!",
        "Hold on, we're fetching magic!",
        "Almost done, stay with us!",
        "Fetching results, please wait!"
    ];

    resultsDiv.innerHTML = `<p>Loading... <span id="loading-counter">0</span> seconds</p><p id="funny-quote"></p>`;

    const intervalId = setInterval(() => {
        secondsElapsed++;
        document.getElementById('loading-counter').textContent = secondsElapsed;

        if (secondsElapsed % 10 === 0) {
            const quoteIndex = (secondsElapsed / 10) % quotes.length;
            document.getElementById('funny-quote').textContent = quotes[quoteIndex];
        }
    }, 1000);

    try {
        const response = await fetch("{{ route('getquote.process', [], true) }}", { // Ensure HTTPS by passing true
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': '{{ csrf_token() }}'
            },
            body: JSON.stringify({ domains })
        });

        clearInterval(intervalId); // Stop the counter once the response is received

        const data = await response.json();

        if (data.status === 'success') {
            let html = '<h3>Quotes:</h3>';
            
            html += '<table class="table table-bordered"><thead><tr><th>Domain</th><th>Registrar</th><th>New Reg Price ($)</th><th>Expiration Date</th><th>Days Left</th><th>Price ($)</th></tr></thead><tbody>';

            data.data.forEach(domain => {
                if(domain.error){
                    html += `<tr>
                                <td>${domain.domain}</td>
                                <td colspan="5" class="text-danger">${domain.error}</td>
                             </tr>`;
                } else {
                    html += `<tr>
                                <td>${domain.domain}</td>
                                <td>${domain.registrar}</td>
                                <td>${domain.newReg}</td>
                                <td>${domain.expiration_date}</td>
                                <td>${domain.days_left}</td>
                                <td>${domain.price}</td>
                             </tr>`;
                }
            });

            html += `</tbody></table><h4>Total Price: $${data.total_price}</h4>`;
            html += `<a href="/getquote/${data.uuid}" class="btn btn-link mt-3">View Cached Results</a>`; // Use UUID in link
            html += `<button class="btn btn-secondary mt-3" onclick="copyToClipboard('${window.location.origin}/getquote/${data.uuid}')">Copy URL</button>`; // Add copy URL button with full URL
            html += `<span id="copy-message" class="text-success ml-2" style="display:none;">URL copied!</span>`; // Message span
            resultsDiv.innerHTML = html;
        } else {
            resultsDiv.innerHTML = `<div class="alert alert-danger">${data.message}</div>`;
        }
    } catch (error) {
        clearInterval(intervalId); // Stop the counter in case of an error
        console.error('Error fetching quotes:', error);
        resultsDiv.innerHTML = `<div class="alert alert-danger">An error occurred while fetching quotes.<br> TRY AGAN IF LIST WAS BIG - WHOIS RESULTS ARE CACHED <br></div>`;
    }
});

document.getElementById('download-csv-button').addEventListener('click', function() {
    const rows = [
        ["Domain", "Registrar", "New Reg Price ($)", "Expiration Date", "Days Left", "Price ($)"],
        @foreach ($results as $result)
        ["{{ $result->domain }}", "{{ $result->registrar }}", "{{ $result->newReg }}", "{{ $result->expiration_date }}", "{{ $result->days_left }}", "{{ $result->price }}"],
        @endforeach
    ];

    let csvContent = "data:text/csv;charset=utf-8," 
        + rows.map(row => row.map(value => `"${value}"`).join(",")).join("\n");

    const encodedUri = encodeURI(csvContent);
    const link = document.createElement("a");
    link.setAttribute("href", encodedUri);
    link.setAttribute("download", "domain_quotes.csv");
    document.body.appendChild(link);

    link.click();
    document.body.removeChild(link);
});
</script>
@endsection
</file>

<file path="app/Http/Controllers/GetQuoteController.php">
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;
use Carbon\Carbon;
use Iodev\Whois\Factory;
use Illuminate\Support\Str;
use App\Models\DomainResult;
use App\Models\Domain;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Log;
use App\Services\DomainService;
use App\Services\PricingService;
use App\Services\WhoisService;

class GetQuoteController extends Controller
{
    private $domainService;
    private $pricingService;

    public function __construct(DomainService $domainService, PricingService $pricingService)
    {
        $this->domainService = $domainService;
        $this->pricingService = $pricingService;
    }

    /**
     * Display the Get Quote form.
     *
     * @return \Illuminate\View\View
     */
    public function showForm($uuid = null)
    {
        $results = collect(); // Initialize as an empty Collection
        $totalPrice = 0;
        $createdAt = null;
        $processedCount = 0; // Counter for processed domains

        if ($uuid) {
            Log::info("Loading cached results for UUID: {$uuid}");
            
            // Fetch the results using the UUID from DomainResult and sort by 'days_left'
            $results = DomainResult::where('uuid', $uuid)
                ->orderBy('days_left', 'asc') // Sort by 'days_left' in ascending order
                ->get(['domain', 'registrar', 'expiration_date', 'days_left', 'price']); // Include 'registrar'

            // Calculate total price if results are found
            if (!$results->isEmpty()) {
                $processedCount = $results->count();
                Log::info("Found {$processedCount} domains in cached results");
                
                $createdAt = $results->first()->created_at; // Get the creation time of the first result

                // Calculate total price from the stored prices
                $totalPrice = $results->sum('price');
                Log::info("Showing cached results with total price: {$totalPrice}");

                // Add registration prices
                $results = $this->addRegistrationPrices($results);
                
                // Check if domains exist in the domains table and add push status
                $results = $this->checkDomainsExistence($results);
                Log::info("Added push status to cached results");
            }
        }

        return view('getquote', [
            'results' => $results,
            'total_price' => number_format($totalPrice, 2),
            'created_at' => $createdAt ? $createdAt->format('Y-m-d H:i:s') : null, // Format the timestamp
            'processed_count' => $processedCount, // Pass the counter to the view
        ]);
    }

    /**
     * Process the domain names and return WHOIS information with pricing.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function getQuote(Request $request)
    {
        // Validate the input
        $validator = Validator::make($request->all(), [
            'domains' => 'required|string',
        ]);

        if ($validator->fails()) {
            return response()->json([
                'status' => 'error',
                'message' => 'Please enter at least one domain name.',
                'errors' => $validator->errors(),
            ], 400);
        }

        // Split the domains by new lines and sanitize
        $domains = preg_split('/\r\n|\r|\n/', $request->input('domains'));
        $domains = array_filter(array_map('trim', $domains));
        
        // Count original domains for logging
        $originalCount = count($domains);
        
        // Convert all domains to lowercase and remove duplicates
        $domains = array_unique(array_map('strtolower', $domains));
        
        // Count after deduplication for logging
        $afterDedupeCount = count($domains);
        $removedCount = $originalCount - $afterDedupeCount;
        
        // Log the deduplication results
        Log::info("Domain deduplication: Original count: {$originalCount}, After deduplication: {$afterDedupeCount}, Removed: {$removedCount}");

        // Get the authenticated user's ID or null if not logged in
        $userId = auth()->check() ? auth()->id() : null;
        Log::info("Processing domains for " . ($userId ? "user ID: {$userId}" : "guest user"));

        $uuid = Str::uuid(); // Generate a UUID for this set of results
        $processedData = $this->domainService->processDomains($domains, $uuid, $userId);

        return response()->json([
            'status' => 'success',
            'data' => $processedData['results'],
            'uuid' => $uuid,
            'total_price' => $processedData['total_price'],
            'link' => url("/getquote/{$uuid}"), // Generate a link to the results
        ]);
    }

    /**
     * Add registration prices to the results.
     *
     * @param \Illuminate\Support\Collection $results
     * @return \Illuminate\Support\Collection
     */
    private function addRegistrationPrices($results)
    {
        return $results->map(function ($result) {
            $domain = is_array($result) ? $result['domain'] : $result->domain;
            $tld = strtolower(substr(strrchr($domain, '.'), 1));
            $registrationPrice = $this->pricingService->getRegistrationPrice($tld);

            if (is_array($result)) {
                $result['newReg'] = number_format($registrationPrice, 2);
            } else {
                $result->newReg = number_format($registrationPrice, 2);
            }

            return $result;
        });
    }
    
    /**
     * Check if domains exist in the domains table and add push status.
     * 
     * @param \Illuminate\Support\Collection $results
     * @return \Illuminate\Support\Collection
     */
    private function checkDomainsExistence($results)
    {
        // Get all domain names from results
        $domainNames = $results->pluck('domain')->toArray();
        Log::info("Checking existence for " . count($domainNames) . " domains");
        
        // Get all matching domains from the domains table - without status check
        $existingDomains = Domain::whereIn('domain', $domainNames)
                                ->pluck('domain')
                                ->toArray();
        
        Log::info("Found " . count($existingDomains) . " domains already in system");
        
        // Add push status to each result
        return $results->map(function ($result) use ($existingDomains) {
            $domain = is_array($result) ? $result['domain'] : $result->domain;
            
            if (is_array($result)) {
                $result['push_status'] = in_array($domain, $existingDomains) ? '✓' : '';
            } else {
                $result->push_status = in_array($domain, $existingDomains) ? '✓' : '';
            }
            
            return $result;
        });
    }

    public function showResults($uuid)
    {
        $results = DomainResult::where('uuid', $uuid)->get();

        if ($results->isEmpty()) {
            return response()->json(['status' => 'error', 'message' => 'No results found.'], 404);
        }

        return view('results', ['results' => $results]);
    }
}

#end of file
</file>

<file path="tests/PricingServiceTest.php">
<?php

// Enable error reporting for debugging
error_reporting(E_ALL);
ini_set('display_errors', 1);

// Autoload classes first
require_once __DIR__ . '/../vendor/autoload.php';

// Bootstrap the Laravel application
$app = require_once __DIR__ . '/../bootstrap/app.php';

// Bootstrap the application kernel so that facades are set up
$app->make(Illuminate\Contracts\Console\Kernel::class)->bootstrap();

use App\Services\PricingService;

// ---------------- Helper Functions ----------------

function logInfo(string $message)
{
    echo '[' . date('Y-m-d H:i:s') . '] ' . $message . PHP_EOL;
}

function extractTLD(string $domain): string
{
    $parts = explode('.', $domain);
    logInfo("ELI15: Splitting domain '{$domain}' into parts: " . implode(', ', $parts));
    return array_pop($parts);
}

// ---------------- Setup Dummy JSON data ----------------

$jsonFilePath = __DIR__ . '/../storage/app/namecheap.json';

$storageDir = dirname($jsonFilePath);
if (!is_dir($storageDir)) {
    mkdir($storageDir, 0777, true);
    logInfo("Created directory: {$storageDir}");
}

$dummyPricingData = [
    ["Tld" => "uk", "Register" => ["Price" => 3.50]],
    ["Tld" => "info", "Register" => ["Price" => 3.50]],
    ["Tld" => "creditcard", "Register" => ["Price" => 4.00]],
    ["Tld" => "business", "Register" => ["Price" => 4.00]],
    ["Tld" => "com", "Register" => ["Price" => 10.00]],
    ["Tld" => "buzz", "Register" => ["Price" => 4.00]],
    ["Tld" => "online", "Register" => ["Price" => 4.00]],
    ["Tld" => "me", "Register" => ["Price" => 4.50]],
    ["Tld" => "cc", "Register" => ["Price" => 3.75]],
];

file_put_contents($jsonFilePath, json_encode($dummyPricingData, JSON_PRETTY_PRINT));
logInfo("Dummy pricing data written to: {$jsonFilePath}");

putenv("DOMAIN_PRICES_JSON_PATH=storage/app/namecheap.json");

// ---------------- Prepare Test Cases ----------------

$testCases = [
    ['domain' => 'treetrimming.co.uk', 'daysLeft' => 17, 'expected_reg_price' => 3.50],
    ['domain' => 'digitalhome.info', 'daysLeft' => 28, 'expected_reg_price' => 3.50],
    ['domain' => 'smart.creditcard', 'daysLeft' => 30, 'expected_reg_price' => 4.00],
    ['domain' => 'jeff.business', 'daysLeft' => 30, 'expected_reg_price' => 4.00],
    ['domain' => 'maral.info', 'daysLeft' => 30, 'expected_reg_price' => 4.00],
    ['domain' => 'elkgrovepreschool.com', 'daysLeft' => 31, 'expected_reg_price' => 5.00],
    ['domain' => 'redes.info', 'daysLeft' => 32, 'expected_reg_price' => 4.00],
    ['domain' => 'interchain.info', 'daysLeft' => 32, 'expected_reg_price' => 4.00],
    ['domain' => 'theking.info', 'daysLeft' => 33, 'expected_reg_price' => 4.00],
    ['domain' => 'mybear.buzz', 'daysLeft' => 35, 'expected_reg_price' => 4.00],
    ['domain' => 'newphone.buzz', 'daysLeft' => 35, 'expected_reg_price' => 4.00],
    ['domain' => 'usa1news.buzz', 'daysLeft' => 35, 'expected_reg_price' => 4.00],
    ['domain' => 'newnews.buzz', 'daysLeft' => 35, 'expected_reg_price' => 4.00],
    ['domain' => 'nameis.buzz', 'daysLeft' => 35, 'expected_reg_price' => 4.00],
    ['domain' => 'woorx.buzz', 'daysLeft' => 35, 'expected_reg_price' => 4.00],
    ['domain' => 'xoqxe.buzz', 'daysLeft' => 35, 'expected_reg_price' => 4.00],
    ['domain' => 'ertigyenix.buzz', 'daysLeft' => 35, 'expected_reg_price' => 4.00],
    ['domain' => 'hpx.info', 'daysLeft' => 35, 'expected_reg_price' => 4.00],
    ['domain' => 'adexqa.online', 'daysLeft' => 36, 'expected_reg_price' => 4.00],
    ['domain' => 'arsena.online', 'daysLeft' => 36, 'expected_reg_price' => 4.00],
    ['domain' => 'tatra.me', 'daysLeft' => 40, 'expected_reg_price' => 4.50],
    ['domain' => 'emobility.cc', 'daysLeft' => 40, 'expected_reg_price' => 3.75],
    ['domain' => 'saha.cc', 'daysLeft' => 40, 'expected_reg_price' => 3.75],
    ['domain' => 'webmarketing.cc', 'daysLeft' => 40, 'expected_reg_price' => 3.75],
];

// ---------------- Run Tests ----------------

$pricingService = new PricingService();
logInfo("PricingService instance created.");

$testCounter = 0;

foreach ($testCases as $case) {
    $testCounter++;
    
    $domain = $case['domain'];
    $tld = extractTLD($domain);
    $daysLeft = $case['daysLeft'];
    $expectedRegisterPrice = $case['expected_reg_price'];
    
    logInfo("------ Test Case #{$testCounter} ------");
    logInfo("Processing domain: {$domain} | Extracted TLD: {$tld} | Days Left: {$daysLeft}");
    
    $regPrice = $pricingService->getRegistrationPrice($tld);
    logInfo("Registration Price from JSON for TLD '{$tld}' = \${$regPrice}");
    
    $finalPrice = $pricingService->calculatePrice($tld, $daysLeft);
    logInfo("Calculated final price for domain '{$domain}' = \${$finalPrice}");
    
    if ($regPrice == $expectedRegisterPrice) {
        logInfo("PASS: Registration price matches expected value (\${$expectedRegisterPrice}).");
    } else {
        logInfo("FAIL: Expected registration price (\${$expectedRegisterPrice}) but got \${$regPrice}.");
    }
    
    logInfo("------ End of Test Case #{$testCounter} ------\n");
}

logInfo("All tests complete. Total test cases processed: {$testCounter}.");

/*
Note: 
If you ever need to use curl in this or another script, remember to disable SSL verification like so:
   curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
This is to comply with the instruction of not verifying SSL in curl.
*/
</file>

<file path="routes/web.php">
<?php

use Illuminate\Support\Facades\Route;
use App\Http\Controllers\UploadController;
use App\Http\Controllers\DomainController;
use Illuminate\Support\Facades\Auth;
use App\Http\Controllers\GetQuoteController;
use App\Http\Controllers\Auth\LoginController;
use Illuminate\Support\Facades\Log;
use App\Http\Controllers\UserController;

/*
|--------------------------------------------------------------------------
| Web Routes
|--------------------------------------------------------------------------
|
| Here is where you can register web routes for your application. These
| routes are loaded by the RouteServiceProvider and all of them will
| be assigned to the "web" middleware group. Make something great!
|
*/

Route::get('/', function () {
    if (auth()->check()) {
        if (auth()->user()->is_admin) {
            return redirect('/domains');
        }
        return redirect('/home');
    }
    return redirect('/getquote');
});

// Admin routes
Route::middleware(['auth', 'admin'])->group(function () {
    // Upload functionality - admin only
    Route::get('/upload', [UploadController::class, 'showUploadForm'])->name('domains.uploadForm');
    Route::post('/upload', [UploadController::class, 'uploadDomains'])->name('domains.upload');

    // Domain management - admin only
    Route::delete('/domains/', [DomainController::class, 'destroy'])->name('domains.destroy');
    Route::post('/domains/mark-as-sold', [DomainController::class, 'markAsSold'])->name('domains.markAsSold');
    Route::get('/domains', [DomainController::class, 'index'])->name('domains.index');
    Route::post('/domains/filter', [DomainController::class, 'index'])->name('domains.filter');
    Route::get('/domains/export', [DomainController::class, 'exportCsv'])->name('domains.export');

    // Add new route for registrar filtering
    Route::get('/domains/registrar/{registrar}', [DomainController::class, 'indexByRegistrar'])
        ->name('domains.byRegistrar');
});

// Authenticated user routes (non-admin)
Route::middleware(['auth'])->group(function () {
    Route::get('/home', [App\Http\Controllers\HomeController::class, 'index'])->name('home');
    
    // Add these new routes for payment details
    Route::get('/dashboard', [UserController::class, 'dashboard'])->name('dashboard');
    Route::post('/user/payment', [UserController::class, 'updatePaymentDetails'])->name('user.payment.update');
});

// Public routes
Route::get('/public', [DomainController::class, 'publicList'])->name('domains.public');
Route::get('/getquote/{uuid?}', [GetQuoteController::class, 'showForm'])->name('getquote.form');
Route::post('/getquote', [GetQuoteController::class, 'getQuote'])->name('getquote.process');

// Authentication routes
Auth::routes(['register' => true]);
Route::post('/logout', [LoginController::class, 'logout'])->name('logout');
</file>

<file path="app/Http/Controllers/DomainController.php">
<?php

// app/Http/Controllers/DomainController.php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Domain;
use Illuminate\Support\Facades\DB;

class DomainController extends Controller
{
    // Constants for better maintainability
    private const PREMIUM_EXTENSIONS = ['com', 'net', 'org'];
    private const PRICE_URGENT = 2.00;
    private const PRICE_SOON = 3.50;
    private const PRICE_NORMAL_PREMIUM = 5.00;
    private const PRICE_NORMAL_REGULAR = 4.00;
    private const PRICE_LONG_PREMIUM = 6.00;
    private const PRICE_LONG_REGULAR = 5.00;
    private const PRICE_VERY_LONG_PREMIUM = 9.00;
    private const PRICE_VERY_LONG_REGULAR = 5.00;

    public function index(Request $request)
    {
        $status = $request->query('status', 'ACTIVE'); // Get status from query, default to ACTIVE
        
        // Start building the query for the main table
        $query = Domain::select('*', DB::raw('DATEDIFF(FROM_UNIXTIME(exp_date), NOW()) as days_left'))
                        ->where('status', $status); // Filter by status
        
        // Check if domain list filter is provided for the main table
        if ($request->has('domain_list') && !empty($request->input('domain_list'))) {
            // Split the input by newlines and clean up each domain
            $domainList = explode("\n", $request->input('domain_list'));
            $domainList = array_map('trim', $domainList);
            $domainList = array_filter($domainList); // Remove empty entries
            
            // Log the domains being filtered
            \Log::info('Filtering by domain list. Count: ' . count($domainList));
            
            // Add the domain list filter to the query
            if (!empty($domainList)) {
                $query->whereIn('domain', $domainList);
            }
        }
        
        // Execute the query and process results for the main table
        $domains = $query->orderBy('exp_date')
                         ->get()
                         ->map(function ($domain) {
                             // Add suggested price to each domain
                             $domain->suggested_price = $this->calculatePrice($domain->days_left, $domain->domain);
                             return $domain;
                         });
        
        // --- Calculate Histogram Data ---
        // ELI15: Get all active domains just for the histogram, regardless of the table filter.
        $allActiveDomains = Domain::select(DB::raw('DATEDIFF(FROM_UNIXTIME(exp_date), NOW()) as days_left'))
                                  ->where('status', 'ACTIVE')
                                  ->get();

        // ELI15: Define the buckets (ranges) for our histogram graph.
        $buckets = [
            '0-29' => 0, '30-59' => 0, '60-89' => 0, '90-119' => 0, 
            '120-149' => 0, '150-179' => 0, '180-209' => 0, '210-239' => 0,
            '240-269' => 0, '270-299' => 0, '300-329' => 0, '330-359' => 0,
            '360+' => 0
        ];
        $bucketRanges = [
            29 => '0-29', 59 => '30-59', 89 => '60-89', 119 => '90-119',
            149 => '120-149', 179 => '150-179', 209 => '180-209', 239 => '210-239',
            269 => '240-269', 299 => '270-299', 329 => '300-329', 359 => '330-359'
        ];

        // ELI15: Count how many domains fall into each bucket based on their days_left.
        foreach ($allActiveDomains as $domain) {
            $days = $domain->days_left;
            if ($days < 0) continue; // Ignore expired domains for histogram

            $bucketKey = '360+'; // Default for domains expiring far in the future
            foreach ($bucketRanges as $maxDays => $key) {
                if ($days <= $maxDays) {
                    $bucketKey = $key;
                    break;
                }
            }
            $buckets[$bucketKey]++;
        }
        
        // ELI15: Prepare the data for the chart, only if status is ACTIVE.
        if ($status === 'ACTIVE') {
            $histogramData = [
                'labels' => array_keys($buckets),
                'counts' => array_values($buckets)
            ];
            \Log::info('Histogram Data Prepared:', $histogramData);
        } else {
            // ELI15: Provide default empty data if not viewing ACTIVE domains.
            $histogramData = ['labels' => [], 'counts' => []];
            \Log::info('Not viewing ACTIVE domains, histogram data is empty.');
        }
        // --- End Histogram Data Calculation ---

        $total = $domains->count(); // Count based on the potentially filtered $domains
        $active = Domain::where('status', 'ACTIVE')->count(); // Total active count
        $sold = Domain::where('status', 'SOLD')->count();     // Total sold count
        $activeDomainsByRegistrar = Domain::select('registrar', DB::raw('count(*) as total'))
                                           ->where('status', 'ACTIVE')
                                           ->groupBy('registrar')
                                           ->get();
        \Log::info('Total domains (filtered/view) count: ' . $total);
        \Log::info('Total active domains count: ' . $active);
        \Log::info('Total sold domains count: ' . $sold);

        // Pass additional variable to indicate if filtering is active
        $isFiltered = $request->has('domain_list') && !empty($request->input('domain_list'));
        
        // ELI15: Send all the data (domains for the table, counts, histogram data) to the page.
        return view('domains.index', compact('domains', 'total', 'status', 'active', 'sold', 'activeDomainsByRegistrar', 'isFiltered', 'histogramData'));
    }

    /**
     * Calculate suggested price based on days left and domain extension
     * @param int $daysLeft
     * @param string $domain
     * @return float
     */
    private function calculatePrice(int $daysLeft, string $domain): float
    {
        // Get domain extension (everything after the last dot)
        $extension = strtolower(substr(strrchr($domain, '.'), 1));
        
        // ELI15: Log calculation details to help understand pricing.
        // Log::info("Calculating price for domain: $domain (Days left: $daysLeft, Extension: $extension)");
        
        // Very urgent domains (less than 15 days)
        if ($daysLeft < 15) {
            // Log::info("Price set to URGENT: $" . self::PRICE_URGENT);
            return self::PRICE_URGENT;
        }
        
        // Soon expiring domains (15-30 days)
        if ($daysLeft < 30) {
            // Log::info("Price set to SOON: $" . self::PRICE_SOON);
            return self::PRICE_SOON;
        }
        
        // Check if it's a premium extension
        $isPremium = in_array($extension, self::PREMIUM_EXTENSIONS);
        
        // Normal expiration (30-91 days)
        if ($daysLeft < 91) {
            $price = $isPremium ? self::PRICE_NORMAL_PREMIUM : self::PRICE_NORMAL_REGULAR;
            // Log::info("Price set to NORMAL (" . ($isPremium ? 'Premium' : 'Regular') . "): $$price");
            return $price;
        }
        
        // Very long expiration (200+ days) with different pricing for premium domains
        if ($daysLeft >= 200) {
            $price = $isPremium ? self::PRICE_VERY_LONG_PREMIUM : self::PRICE_VERY_LONG_REGULAR;
            // Log::info("Price set to VERY LONG (" . ($isPremium ? 'Premium' : 'Regular') . "): $$price");
            return $price;
        }
        
        // Long expiration (91-199 days)
        $price = $isPremium ? self::PRICE_LONG_PREMIUM : self::PRICE_LONG_REGULAR;
        // Log::info("Price set to LONG (" . ($isPremium ? 'Premium' : 'Regular') . "): $$price");
        return $price;
    }

    public function exportCsv()
    {
        $domains = Domain::where('status', 'ACTIVE') // Filter by ACTIVE status
                         ->orderBy('exp_date')
                         ->get();
        $filename = "domains_" . date('Ymd_His') . ".csv";
        $headers = [
            'Content-Type' => 'text/csv',
            'Content-Disposition' => "attachment; filename=$filename",
        ];
        $columns = ['Domain', 'Expiration Date', 'Registrar'];

        $callback = function() use ($domains, $columns) {
            $file = fopen('php://output', 'w');
            fputcsv($file, $columns);
            foreach ($domains as $domain) {
                fputcsv($file, [
                    $domain->domain,
                    date('Y-m-d H:i:s', $domain->exp_date),
                    $domain->registrar,
                ]);
            }
            fclose($file);
        };

        return response()->stream($callback, 200, $headers);
    }

    public function destroy(Request $request)
    {
        \Log::info('Bulk mark as sold request received', $request->all());
        $domainIds = $request->input('domains');
        if ($domainIds) {
            Domain::whereIn('id', $domainIds)
                ->update([
                    'status' => 'SOLD',
                    'updated_at' => now()
                ]);
        }
        return redirect()->route('domains.index')->with('success', 'Selected domains marked as sold successfully.');
    }
    public function bulkDestroy(Request $request)
    {
        \Log::info('Bulk mark as sold request received', $request->all());
        $domainIds = $request->input('domains');
        if ($domainIds) {
            Domain::whereIn('id', $domainIds)
                ->update([
                    'status' => 'SOLD',
                    'updated_at' => now()
                ]);
        }
        return redirect()->route('domains.index')->with('success', 'Selected domains marked as sold successfully.');
    }

    public function getActiveDomainsByRegistrar()
    {
        $registrarCounts = Domain::select('registrar', DB::raw('count(*) as total'))
                                 ->where('status', 'ACTIVE')
                                 ->groupBy('registrar')
                                 ->get();

        return response()->json($registrarCounts);
    }

    public function markAsSold(Request $request)
    {
        $domains = explode("\n", $request->input('domains'));
        $domains = array_map('trim', $domains);
        $domains = array_filter($domains);

        if (!empty($domains)) {
            Domain::whereIn('domain', $domains)
                ->update([
                    'status' => 'SOLD',
                    'updated_at' => now()
                ]);
        }

        return redirect()->route('domains.index')->with('success', 'Domains marked as sold successfully.');
    }

    public function publicList()
    {
        // Get domains and calculate days left
        $domains = Domain::select('*', DB::raw('DATEDIFF(FROM_UNIXTIME(exp_date), NOW()) as days_left'))
            ->where('status', 'ACTIVE')
            ->whereRaw('DATEDIFF(FROM_UNIXTIME(exp_date), NOW()) > 0')  // Only future expiring domains
            ->orderBy('exp_date')
            ->limit(150)  // Limit to 150 domains
            ->get()
            ->map(function ($domain) {
                // Add suggested price to each domain
                $domain->suggested_price = $this->calculatePrice($domain->days_left, $domain->domain);
                return $domain;
            });

        \Log::info('Public list accessed. Showing ' . $domains->count() . ' domains');
        
        return view('domains.public', compact('domains'));
    }

    public function indexByRegistrar(Request $request, $registrar)
    {
        \Log::info("Filtering domains for registrar: $registrar");
        
        // Get domains filtered by registrar
        $domains = Domain::select('*', DB::raw('DATEDIFF(FROM_UNIXTIME(exp_date), NOW()) as days_left'))
                         ->where('registrar', $registrar)
                         ->where('status', 'ACTIVE')  // Default to active domains
                         ->orderBy('exp_date')
                         ->get()
                         ->map(function ($domain) {
                             $domain->suggested_price = $this->calculatePrice($domain->days_left, $domain->domain);
                             return $domain;
                         });

        // --- Calculate Histogram Data (Similar to index method) ---
        // ELI15: Get active domains for this specific registrar for the histogram.
        $allActiveDomains = Domain::select(DB::raw('DATEDIFF(FROM_UNIXTIME(exp_date), NOW()) as days_left'))
                                  ->where('status', 'ACTIVE')
                                  ->where('registrar', $registrar)
                                  ->get();
        $buckets = [
            '0-29' => 0, '30-59' => 0, '60-89' => 0, '90-119' => 0, 
            '120-149' => 0, '150-179' => 0, '180-209' => 0, '210-239' => 0,
            '240-269' => 0, '270-299' => 0, '300-329' => 0, '330-359' => 0,
            '360+' => 0
        ];
        $bucketRanges = [
            29 => '0-29', 59 => '30-59', 89 => '60-89', 119 => '90-119',
            149 => '120-149', 179 => '150-179', 209 => '180-209', 239 => '210-239',
            269 => '240-269', 299 => '270-299', 329 => '300-329', 359 => '330-359'
        ];
        foreach ($allActiveDomains as $domain) {
            $days = $domain->days_left;
            if ($days < 0) continue;
            $bucketKey = '360+';
            foreach ($bucketRanges as $maxDays => $key) {
                if ($days <= $maxDays) {
                    $bucketKey = $key;
                    break;
                }
            }
            $buckets[$bucketKey]++;
        }
        $histogramData = [
            'labels' => array_keys($buckets),
            'counts' => array_values($buckets)
        ];
        \Log::info("Histogram Data Prepared for registrar {$registrar}:", $histogramData);
        // --- End Histogram Data Calculation ---

        // Get total counts for the statistics (these remain global)
        $total = $domains->count();
        $active = Domain::where('status', 'ACTIVE')->count();
        $sold = Domain::where('status', 'SOLD')->count();
        $activeDomainsByRegistrar = Domain::select('registrar', DB::raw('count(*) as total'))
                                          ->where('status', 'ACTIVE')
                                          ->groupBy('registrar')
                                          ->get();

        \Log::info("Found $total domains for registrar: $registrar");

        return view('domains.index', compact(
            'domains',
            'total',
            'active',
            'sold',
            'activeDomainsByRegistrar',
            'registrar',  // Pass the current registrar to highlight it in the view
            'histogramData' // Pass histogram data
        ));
    }
}
</file>

<file path="resources/views/domains/public.blade.php">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NSDOMAINS @CheapNamesBot</title>
    <!-- Include Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Add Font Awesome CSS in head section -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        /* Custom styles for better readability */
        .table-hover tbody tr:hover {
            background-color: #f5f5f5;
        }
        .info-card {
            background-color: #f8f9fa;
            border-left: 4px solid #0d6efd;
            margin-bottom: 20px;
        }
        .registrar-list {
            columns: 2;
            -webkit-columns: 2;
            -moz-columns: 2;
        }
        .contact-links a {
            display: block;
            margin-bottom: 5px;
        }
        
        /* Sticky Panel Styles */
        .sticky-panel {
            position: fixed;
            bottom: 20px;  /* Distance from bottom */
            right: 20px;   /* Distance from right */
            z-index: 1000; /* Ensure it stays on top */
            background: #fff;
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            max-width: 300px; /* Limit width to prevent overlap */
        }
        .sticky-panel:hover {
            transform: scale(1.02);
        }
        .domain-list {
            max-height: 300px;
            overflow-y: auto;
            margin-bottom: 10px;
        }
        .domain-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 5px;
            border-bottom: 1px solid #eee;
        }
        .domain-item button {
            padding: 0 5px;
            font-size: 12px;
        }
        .clickable {
            cursor: pointer;
            color: #0d6efd;
            text-decoration: underline;
        }
        .copy-feedback {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 10px 20px;
            background: #28a745;
            color: white;
            border-radius: 4px;
            display: none;
        }
        .main-table {
            max-width: 80%; /* Reduce table width to prevent overlay */
            margin: 0 auto; /* Center the table */
        }
        .domain-cell {
            color: inherit;
            text-decoration: none;
            cursor: default;
            word-break: normal;
            overflow-wrap: break-word;
            white-space: nowrap;
            display: inline-block;
            max-width: calc(100% - 70px);
        }
        .copy-btn {
            padding: 2px 8px;
            margin-left: 8px;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            background-color: transparent;
            cursor: pointer;
            transition: all 0.2s;
        }
        .copy-btn:hover {
            background-color: #e9ecef;
        }
        
        /* Toast styling */
        .toast-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1100;
        }
        
        /* Add these new styles for table columns */
        .table th:nth-child(1), /* Domain column */
        .table td:nth-child(1) {
            width: 25%;
            max-width: 300px;
        }
        .table th:nth-child(2), /* Expiration Date column */
        .table td:nth-child(2) {
            width: 20%;
        }
        .table th:nth-child(3), /* Registrar column */
        .table td:nth-child(3) {
            width: 20%;
        }
        .table th:nth-child(4), /* Days Left column */
        .table td:nth-child(4) {
            width: 15%;
        }
        .table th:nth-child(5), /* Price column */
        .table td:nth-child(5) {
            width: 20%;
        }
        /* Add this style for the counter */
        .domain-counter {
            background-color: #0d6efd;
            color: white;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 0.9em;
            margin-left: 8px;
        }

        /* Make table more responsive on mobile */
        @media (max-width: 768px) {
            .table th:nth-child(1),
            .table td:nth-child(1) {
                min-width: 200px; /* Ensure minimum width for domain column */
                white-space: nowrap; /* Prevent domain name wrapping */
            }
            
            /* Allow table to scroll horizontally on mobile */
            .table-responsive {
                overflow-x: auto;
                -webkit-overflow-scrolling: touch;
            }
            
            /* Adjust main table width for mobile */
            .main-table {
                max-width: 100%;
            }
            
            /* Adjust sticky panel for mobile */
            .sticky-panel {
                max-width: 250px;
                font-size: 0.9em;
            }
        }
    </style>
</head>
<body>
    <div class="container mt-4">
        <!-- New Information Section -->
        <div class="card info-card p-4 mb-4">
            <div class="row">
                <div class="col-md-6">
                    <h4 class="mb-3">Как купить / How to Buy:</h4>
                    <div class="contact-links">
                        <a href="https://t.me/CheapNamesSupport" target="_blank" class="btn btn-primary mb-2">
                            <i class="bi bi-telegram"></i> ПОКУПАТЬ ЧЕРЕЗ ПОДДЕРЖКУ BUY HERE @CheapNamesSupport!
                        </a>
          
                    </div>

                    <h4 class="mt-4">Регистраторы / Registrars:</h4>
                    <div class="registrar-list">
                        <ul class="list-unstyled">
                            <li>✓ Godaddy</li>
                            <li>✓ Sav</li>
                            <li>✓ Namebright</li>
                            <li>✓ Dynadot</li>
                            <li>✓ Cosmotown</li>
                            <li>✓ Namesilo</li>
                            <li> ... </li>
                        </ul>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4 class="mb-3">Преимущества / Benefits:</h4>
                    <ul class="list-group">
                        <li class="list-group-item">✓ Передаем на ваш аккаунт (моментально) - ПОЛНОСТЬЮ ВАШИ</li>
                        <li class="list-group-item">✓ Срок действия осталось 2-4 недели и больше</li>
                        <li class="list-group-item">✓ Смена NS на любые - CLOUDFLARE например</li>
                        <li class="list-group-item">✓ Можно продлить на своём аккаунте</li>
                    </ul>
                    
                    <div class="alert alert-info mt-3">
                       
                        <p class="mb-0 w-100 d-block">✓ Брошенные домены по $1.19 
                            <a href="https://t.me/CheapNamesBot" target="_blank">@CheapNamesbot</a>
                        </p>
                    </div>
                </div>
            </div>
        </div>

        <h1 class="mb-4">Доступно для покупки / Available Domains</h1>
        
        <!-- Add counter and last updated info -->
        <p class="text-muted">
            Showing {{ $domains->count() }} domains
            <br>
            Last updated: {{ now()->format('Y-m-d H:i:s') }}
        </p>

        <!-- Sticky Panel -->
        <div class="sticky-panel">
            <h5>Selected Domains <span id="domainCounter" class="domain-counter">0</span></h5>
            <div class="domain-list" id="selectedDomains">
                <!-- Selected domains will be added here -->
            </div>
            <button class="btn btn-primary btn-sm w-100" onclick="copyAllDomains()">Copy All Domains</button>
        </div>

        <!-- Copy Feedback -->
        <div class="copy-feedback" id="copyFeedback">Copied!</div>

        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Domain</th>
                        <th>Expiration Date</th>
                        <th>Registrar</th>
                        <th>Days Left</th>
                        <th>Price ($)</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach($domains as $domain)
                    <tr>
                        <td>
                            <span class="domain-cell">{{ $domain->domain }}</span>
                            <button class="copy-btn" onclick="copyToClipboard('{{ $domain->domain }}')" title="Copy domain">
                                <i class="fas fa-copy"></i>
                            </button>
                        </td>
                        <td>{{ date('Y-m-d', $domain->exp_date) }}</td>
                        <td>{{ $domain->registrar }}</td>
                        <td>{{ $domain->days_left }}</td>
                        <td>${{ $domain->suggested_price }}</td>
                    </tr>
                    @endforeach
                </tbody>
            </table>
        </div>
    </div>

    <!-- Page break and Footer -->
    <div class="container-fluid mt-5">
        <hr class="my-5"> <!-- Page break -->
        <footer class="text-center text-muted py-4">
            <p class="mb-1">© 2024 CheapNames. All rights reserved.</p>
            <p class="mb-0">Contact: <a href="https://t.me/CheapNamesSupport" target="_blank">@CheapNamesSupport</a></p>
        </footer>
    </div>

    <!-- Include Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        // Store selected domains
        let selectedDomains = new Set();

        // Add domain to the sticky panel
        function addDomain(domain) {
            if (!selectedDomains.has(domain)) {
                selectedDomains.add(domain);
                updateDomainList();
                showFeedback('Domain added!');
            }
        }

        // Remove domain from the sticky panel
        function removeDomain(domain) {
            selectedDomains.delete(domain);
            updateDomainList();
        }

        // Update the domain list display
        function updateDomainList() {
            const container = document.getElementById('selectedDomains');
            const counter = document.getElementById('domainCounter');
            container.innerHTML = '';
            
            // Update counter
            counter.textContent = selectedDomains.size;
            
            selectedDomains.forEach(domain => {
                const div = document.createElement('div');
                div.className = 'domain-item';
                div.innerHTML = `
                    <span>${domain}</span>
                    <button class="btn btn-danger btn-sm" onclick="removeDomain('${domain}')">×</button>
                `;
                container.appendChild(div);
            });
        }

        // Copy all selected domains
        function copyAllDomains() {
            if (selectedDomains.size === 0) {
                showFeedback('No domains selected!');
                return;
            }
            
            const domainsText = Array.from(selectedDomains).join('\n');
            navigator.clipboard.writeText(domainsText)
                .then(() => {
                    // Display a feedback message indicating all domains have been copied
                    showFeedback('All domains copied!');
                })
                .catch(err => {
                    showFeedback('Failed to copy domains');
                    console.error('Failed to copy: ', err);
                });
        }

        // Show feedback message
        function showFeedback(message) {
            const feedback = document.getElementById('copyFeedback');
            feedback.textContent = message;
            feedback.style.display = 'block';
            
            setTimeout(() => {
                feedback.style.display = 'none';
            }, 2000);
        }

        function copyToClipboard(text) {
            navigator.clipboard.writeText(text).then(() => {
                // Show toast notification
                const toast = new bootstrap.Toast(document.getElementById('copyToast'));
                document.getElementById('toastMessage').textContent = 'Domain copied: ' + text;
                //toast.show();
                
                // Add to selected domains
                addDomain(text);
            }).catch(err => {
                console.error('Failed to copy:', err);
                document.getElementById('toastMessage').textContent = 'Failed to copy domain';
                const toast = new bootstrap.Toast(document.getElementById('copyToast'));
                toast.show();
            });
        }
    </script>

    <!-- Add toast container before closing body tag -->
    <div class="toast-container">
        <div class="toast align-items-center text-white bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true" id="copyToast">
            <div class="d-flex">
                <div class="toast-body">
                    <i class="fas fa-check-circle me-2"></i>
                    <span id="toastMessage">Domain copied!</span>
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
    </div>
</body>
</html>
</file>

<file path="resources/views/domains/index.blade.php">
@extends('layouts.app')

@section('content')
<div class="container">
    <h2>Domains</h2>
    {{-- Top Button Row & Histogram Wrapper --}}
    <div class="mb-3" style="position: relative;"> {{-- Added position: relative --}}
        <a href="{{ route('domains.export') }}" class="btn btn-success">Export CSV</a>
        <a href="{{ url('/upload') }}" class="btn btn-primary">Upload</a>
        <a href="{{ url('/getquote') }}" class="btn btn-secondary">Get Quote</a>
        {{-- Moved Histogram Toggle Button Here --}}
        <button type="button" id="toggle-histogram-link" class="btn btn-outline-info ml-2">Show Expiration Histogram</button> 

        {{-- Histogram Container (Positioned Absolutely, Initially Hidden) --}}
        <div id="histogram-popup-container" style="display: none; position: absolute; top: 100%; left: 0; width: 600px; max-width: 100%; z-index: 100; background: white; border: 1px solid #ccc; border-radius: 5px; box-shadow: 0 5px 15px rgba(0,0,0,.1); padding: 15px; margin-top: 5px;">
            {{-- Removed the explicit close button --}}
            <h4 style="margin: 0; margin-bottom: 10px;">Active Domain Expiration Distribution</h4> 
            <div id="histogramChart" style="height: 400px;"></div>
        </div>
        {{-- End Histogram Container --}}
    </div>
    {{-- End Top Button Row & Histogram Wrapper --}}

    <div class="row mb-4">
        <div class="col-md-6">
            <p>Total (in view): {{ $total }} domains</p>
            <p>Total Active: {{ $active }} domains</p>
            <p>Total Sold: {{ $sold }} domains</p>
        </div>
        
        <div class="col-md-6">
            <h4>Active Domains by Registrar</h4>
            <ul>
                <li>
                    <a href="{{ route('domains.index') }}" 
                       class="registrar-link {{ !isset($registrar) ? 'fw-bold text-primary' : '' }}">
                        All Domains: {{ $active }} total
                    </a>
                </li>
                @foreach($activeDomainsByRegistrar as $reg)
                    <li>
                        <a href="{{ route('domains.byRegistrar', ['registrar' => $reg->registrar]) }}" 
                           class="registrar-link {{ isset($registrar) && $registrar == $reg->registrar ? 'fw-bold text-primary' : '' }}">
                            {{ $reg->registrar }}: {{ $reg->total }} domains
                        </a>
                    </li>
                @endforeach
            </ul>
        </div>
    </div>

    <button class="btn btn-info mb-3" type="button" data-toggle="collapse" data-target="#collapsibleTextarea" aria-expanded="false" aria-controls="collapsibleTextarea">
        Bulk Mark as Sold (by Name)
    </button>
    <div class="collapse" id="collapsibleTextarea">
        <form action="{{ route('domains.markAsSold') }}" method="POST">
            @csrf
            <div class="form-group">
                <textarea class="form-control" name="domains" rows="5" placeholder="Enter domain names, one per line"></textarea>
            </div>
            <button type="submit" class="btn btn-warning mb-3">Submit</button>
        </form>
    </div>

    <div class="mb-3 mt-3"> {{-- Active/Sold Buttons --}}
        <a href="{{ route('domains.index', ['status' => 'ACTIVE']) }}" class="btn btn-info mr-2">Active</a>
        <a href="{{ route('domains.index', ['status' => 'SOLD']) }}" class="btn btn-secondary">Sold</a>
    </div>

    @if(isset($registrar))
        <div class="mb-3">
            <a href="{{ route('domains.index') }}" class="btn btn-outline-secondary">
                <i class="fas fa-times"></i> Clear Registrar Filter
            </a>
            <span class="ms-2">Showing domains for registrar: <strong>{{ $registrar }}</strong></span>
        </div>
    @endif

    <div class="card mb-4">
        <div class="card-header">
            <h5>Filter by Domain List</h5>
        </div>
        <div class="card-body">
            <form action="{{ route('domains.filter') }}" method="POST">
                @csrf
                <div class="form-group">
                    <label for="domain_list">Paste Domains (one per line)</label>
                    <textarea class="form-control" id="domain_list" name="domain_list" rows="5" 
                        placeholder="example.com
example.net
example.org"></textarea>
                </div>
                <button type="submit" class="btn btn-primary mt-3">
                    <i class="fas fa-filter"></i> Filter Domains
                </button>
                @if(isset($isFiltered) && $isFiltered)
                    <a href="{{ route('domains.index') }}" class="btn btn-secondary mt-3 ml-2">
                        <i class="fas fa-times"></i> Clear Filter
                    </a>
                @endif
            </form>
            
            @if(isset($isFiltered) && $isFiltered)
                <div class="alert alert-info mt-3">
                    @php
                        $totalPrice = $domains->sum('suggested_price');
                    @endphp
                    <strong>Showing {{ $total }} filtered domains.</strong> 
                    <strong>Total suggested price: ${{ number_format($totalPrice, 2) }}</strong>
                    <div class="mt-2">
                        <a href="{{ route('domains.index') }}" class="btn btn-sm btn-outline-primary">
                            Clear filter to see all domains
                        </a>
                    </div>
                </div>
            @endif
        </div>
    </div>

    @if($total > 0)
        <form id="bulk-action-form" action="{{ route('domains.destroy') }}" method="POST">
            @csrf
            @method('DELETE')
            <table class="table">
                <thead>
                    <tr>
                        <th>#</th>
                        <th><input type="checkbox" id="select-all"></th>
                        <th>Domain</th>
                        <th>Expiration Date</th>
                        <th>Registrar</th>
                        <th>Days Left</th>
                        <th>Suggested Price</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach($domains as $domain)
                        <tr>
                            <td>{{ $loop->iteration }}</td>
                            <td><input type="checkbox" name="domains[]" value="{{ $domain->id }}" class="domain-checkbox"></td>
                            <td>{{ $domain->domain }}</td>
                            <td>{{ date('Y-m-d H:i:s', $domain->exp_date) }}</td>
                            <td>{{ $domain->registrar }}</td>
                            <td>{{ $domain->days_left }}</td>
                            <td>${{ number_format($domain->suggested_price, 2) }}</td>
                        </tr>
                    @endforeach
                </tbody>
            </table>
            <button type="submit" id="bulk-action-button" class="btn btn-warning" style="display: none; position: fixed; bottom: 20px; right: 20px;">Mark Selected as Sold</button>
        </form>
    @else
        <p>No domains found.</p>
    @endif
</div>

<script>
    document.getElementById('select-all').addEventListener('click', function(event) {
        let checkboxes = document.querySelectorAll('.domain-checkbox');
        checkboxes.forEach(checkbox => checkbox.checked = event.target.checked);
        toggleBulkActionButton();
    });

    document.querySelectorAll('.domain-checkbox').forEach(checkbox => {
        checkbox.addEventListener('change', toggleBulkActionButton);
    });

    function toggleBulkActionButton() {
        let anyChecked = document.querySelectorAll('.domain-checkbox:checked').length > 0;
        document.getElementById('bulk-action-button').style.display = anyChecked ? 'block' : 'none';
    }

    document.querySelectorAll('form[action^="{{ route('domains.destroy', '') }}"]').forEach(form => {
        form.addEventListener('submit', function(event) {
            event.stopPropagation();
        });
    });
</script>

{{-- Include Plotly always, JS will handle empty data --}}
<script src='https://cdn.plot.ly/plotly-2.32.0.min.js'></script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const histogramContainer = document.getElementById('histogram-container');
        const toggleLink = document.getElementById('toggle-histogram-link');

        const histogramData = @json($histogramData);
        
        console.log('Raw Histogram Data:', histogramData);

        const trace = {
            x: histogramData.labels,
            y: histogramData.counts,
            type: 'bar',
            marker: {
                color: histogramData.counts,
                colorscale: 'Viridis'
            }
        };
        
        const layout = {
            title: 'Domain Expiration Buckets (Active)',
            xaxis: { 
                title: 'Days Until Expiration', 
                tickangle: -45
            },
            yaxis: { title: 'Number of Domains' },
            margin: { l: 50, r: 20, b: 100, t: 50 }
        };
        
        if (histogramData && histogramData.labels && histogramData.labels.length > 0) {
            Plotly.newPlot('histogramChart', [trace], layout, {responsive: true});
            console.log('2D Bar Chart rendered.');
        } else {
            console.log('No histogram data to render.');
            document.getElementById('histogramChart').innerHTML = '<p class="text-muted">Histogram data is only available for Active domains.</p>';
            toggleLink.disabled = true;
            toggleLink.textContent = 'Histogram N/A';
            toggleLink.classList.add('disabled');
        }

        const histogramPopupContainer = document.getElementById('histogram-popup-container');
        
        if (toggleLink && histogramPopupContainer) {
            toggleLink.addEventListener('click', function(event) {
                event.preventDefault(); // Prevent default link behavior
                const isHidden = histogramPopupContainer.style.display === 'none';
                histogramPopupContainer.style.display = isHidden ? 'block' : 'none';
                this.textContent = isHidden ? 'Hide Expiration Histogram' : 'Show Expiration Histogram';
                console.log('Histogram visibility toggled.');
            });
        }
    });
</script>

<style>
    .registrar-link {
        text-decoration: none;
        color: inherit;
    }
    .registrar-link:hover {
        text-decoration: underline;
        color: #0d6efd;
    }
</style>
@endsection
</file>

</files>
